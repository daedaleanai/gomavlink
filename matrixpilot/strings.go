// Code generated by "stringer -output strings.go -type=MavPreflightStorageAction,MavCmd,MavAutopilot,MavType,FirmwareVersionType,HlFailureFlag,MavModeFlag,MavModeFlagDecodePosition,MavGoto,MavMode,MavState,MavComponent,MavSysStatusSensor,MavFrame,MavlinkDataStreamType,FenceAction,FenceBreach,MavMountMode,UavcanNodeHealth,UavcanNodeMode,MavDataStream,MavRoi,MavCmdAck,MavParamType,MavParamExtType,MavResult,MavMissionResult,MavSeverity,MavPowerStatus,SerialControlDev,SerialControlFlag,MavDistanceSensor,MavSensorOrientation,MavProtocolCapability,MavMissionType,MavEstimatorType,MavBatteryType,MavBatteryFunction,MavBatteryChargeState,MavSmartBatteryFault,MavVtolState,MavLandedState,AdsbAltitudeType,AdsbEmitterType,AdsbFlags,MavDoRepositionFlags,EstimatorStatusFlags,MotorTestOrder,MotorTestThrottleType,GpsInputIgnoreFlags,MavCollisionAction,MavCollisionThreatLevel,MavCollisionSrc,GpsFixType,RtkBaselineCoordinateSystem,LandingTargetType,VtolTransitionHeading,CameraCapFlags,VideoStreamStatusFlags,VideoStreamType,CameraZoomType,SetFocusType,ParamAck,CameraMode,MavArmAuthDeniedReason,RcType,PositionTargetTypemask,UtmFlightState,UtmDataAvailFlags,CellularNetworkRadioType,CellularNetworkStatusFlag,PrecisionLandMode,ParachuteAction"; DO NOT EDIT.

package matrixpilot

import "strconv"

const _MavPreflightStorageAction_name = "MAV_PFS_CMD_READ_ALLMAV_PFS_CMD_WRITE_ALLMAV_PFS_CMD_CLEAR_ALLMAV_PFS_CMD_READ_SPECIFICMAV_PFS_CMD_WRITE_SPECIFICMAV_PFS_CMD_CLEAR_SPECIFICMAV_PFS_CMD_DO_NOTHING"

var _MavPreflightStorageAction_index = [...]uint8{0, 20, 41, 62, 87, 113, 139, 161}

func (i MavPreflightStorageAction) String() string {
	if i >= MavPreflightStorageAction(len(_MavPreflightStorageAction_index)-1) {
		return "MavPreflightStorageAction(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavPreflightStorageAction_name[_MavPreflightStorageAction_index[i]:_MavPreflightStorageAction_index[i+1]]
}

const _MavCmd_name = "MAV_CMD_PREFLIGHT_STORAGE_ADVANCEDMAV_CMD_NAV_WAYPOINTMAV_CMD_NAV_LOITER_UNLIMMAV_CMD_NAV_LOITER_TURNSMAV_CMD_NAV_LOITER_TIMEMAV_CMD_NAV_RETURN_TO_LAUNCHMAV_CMD_NAV_LANDMAV_CMD_NAV_TAKEOFFMAV_CMD_NAV_LAND_LOCALMAV_CMD_NAV_TAKEOFF_LOCALMAV_CMD_NAV_FOLLOWMAV_CMD_NAV_CONTINUE_AND_CHANGE_ALTMAV_CMD_NAV_LOITER_TO_ALTMAV_CMD_DO_FOLLOWMAV_CMD_DO_FOLLOW_REPOSITIONMAV_CMD_DO_ORBITMAV_CMD_NAV_ROIMAV_CMD_NAV_PATHPLANNINGMAV_CMD_NAV_SPLINE_WAYPOINTMAV_CMD_NAV_VTOL_TAKEOFFMAV_CMD_NAV_VTOL_LANDMAV_CMD_NAV_GUIDED_ENABLEMAV_CMD_NAV_DELAYMAV_CMD_NAV_PAYLOAD_PLACEMAV_CMD_NAV_LASTMAV_CMD_CONDITION_DELAYMAV_CMD_CONDITION_CHANGE_ALTMAV_CMD_CONDITION_DISTANCEMAV_CMD_CONDITION_YAWMAV_CMD_CONDITION_LASTMAV_CMD_DO_SET_MODEMAV_CMD_DO_JUMPMAV_CMD_DO_CHANGE_SPEEDMAV_CMD_DO_SET_HOMEMAV_CMD_DO_SET_PARAMETERMAV_CMD_DO_SET_RELAYMAV_CMD_DO_REPEAT_RELAYMAV_CMD_DO_SET_SERVOMAV_CMD_DO_REPEAT_SERVOMAV_CMD_DO_FLIGHTTERMINATIONMAV_CMD_DO_CHANGE_ALTITUDEMAV_CMD_DO_LAND_STARTMAV_CMD_DO_RALLY_LANDMAV_CMD_DO_GO_AROUNDMAV_CMD_DO_REPOSITIONMAV_CMD_DO_PAUSE_CONTINUEMAV_CMD_DO_SET_REVERSEMAV_CMD_DO_SET_ROI_LOCATIONMAV_CMD_DO_SET_ROI_WPNEXT_OFFSETMAV_CMD_DO_SET_ROI_NONEMAV_CMD_DO_CONTROL_VIDEOMAV_CMD_DO_SET_ROIMAV_CMD_DO_DIGICAM_CONFIGUREMAV_CMD_DO_DIGICAM_CONTROLMAV_CMD_DO_MOUNT_CONFIGUREMAV_CMD_DO_MOUNT_CONTROLMAV_CMD_DO_SET_CAM_TRIGG_DISTMAV_CMD_DO_FENCE_ENABLEMAV_CMD_DO_PARACHUTEMAV_CMD_DO_MOTOR_TESTMAV_CMD_DO_INVERTED_FLIGHTMAV_CMD_NAV_SET_YAW_SPEEDMAV_CMD_DO_SET_CAM_TRIGG_INTERVALMAV_CMD_DO_MOUNT_CONTROL_QUATMAV_CMD_DO_GUIDED_MASTERMAV_CMD_DO_GUIDED_LIMITSMAV_CMD_DO_ENGINE_CONTROLMAV_CMD_DO_SET_MISSION_CURRENTMAV_CMD_DO_LASTMAV_CMD_PREFLIGHT_CALIBRATIONMAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETSMAV_CMD_PREFLIGHT_UAVCANMAV_CMD_PREFLIGHT_STORAGEMAV_CMD_PREFLIGHT_REBOOT_SHUTDOWNMAV_CMD_OVERRIDE_GOTOMAV_CMD_MISSION_STARTMAV_CMD_COMPONENT_ARM_DISARMMAV_CMD_GET_HOME_POSITIONMAV_CMD_START_RX_PAIRMAV_CMD_GET_MESSAGE_INTERVALMAV_CMD_SET_MESSAGE_INTERVALMAV_CMD_REQUEST_MESSAGEMAV_CMD_REQUEST_PROTOCOL_VERSIONMAV_CMD_REQUEST_AUTOPILOT_CAPABILITIESMAV_CMD_REQUEST_CAMERA_INFORMATIONMAV_CMD_REQUEST_CAMERA_SETTINGSMAV_CMD_REQUEST_STORAGE_INFORMATIONMAV_CMD_STORAGE_FORMATMAV_CMD_REQUEST_CAMERA_CAPTURE_STATUSMAV_CMD_REQUEST_FLIGHT_INFORMATIONMAV_CMD_RESET_CAMERA_SETTINGSMAV_CMD_SET_CAMERA_MODEMAV_CMD_SET_CAMERA_ZOOMMAV_CMD_SET_CAMERA_FOCUSMAV_CMD_JUMP_TAGMAV_CMD_DO_JUMP_TAGMAV_CMD_IMAGE_START_CAPTUREMAV_CMD_IMAGE_STOP_CAPTUREMAV_CMD_REQUEST_CAMERA_IMAGE_CAPTUREMAV_CMD_DO_TRIGGER_CONTROLMAV_CMD_VIDEO_START_CAPTUREMAV_CMD_VIDEO_STOP_CAPTUREMAV_CMD_VIDEO_START_STREAMINGMAV_CMD_VIDEO_STOP_STREAMINGMAV_CMD_REQUEST_VIDEO_STREAM_INFORMATIONMAV_CMD_REQUEST_VIDEO_STREAM_STATUSMAV_CMD_LOGGING_STARTMAV_CMD_LOGGING_STOPMAV_CMD_AIRFRAME_CONFIGURATIONMAV_CMD_CONTROL_HIGH_LATENCYMAV_CMD_PANORAMA_CREATEMAV_CMD_DO_VTOL_TRANSITIONMAV_CMD_ARM_AUTHORIZATION_REQUESTMAV_CMD_SET_GUIDED_SUBMODE_STANDARDMAV_CMD_SET_GUIDED_SUBMODE_CIRCLEMAV_CMD_CONDITION_GATEMAV_CMD_NAV_FENCE_RETURN_POINTMAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSIONMAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSIONMAV_CMD_NAV_FENCE_CIRCLE_INCLUSIONMAV_CMD_NAV_FENCE_CIRCLE_EXCLUSIONMAV_CMD_NAV_RALLY_POINTMAV_CMD_UAVCAN_GET_NODE_INFOMAV_CMD_PAYLOAD_PREPARE_DEPLOYMAV_CMD_PAYLOAD_CONTROL_DEPLOYMAV_CMD_WAYPOINT_USER_1MAV_CMD_WAYPOINT_USER_2MAV_CMD_WAYPOINT_USER_3MAV_CMD_WAYPOINT_USER_4MAV_CMD_WAYPOINT_USER_5MAV_CMD_SPATIAL_USER_1MAV_CMD_SPATIAL_USER_2MAV_CMD_SPATIAL_USER_3MAV_CMD_SPATIAL_USER_4MAV_CMD_SPATIAL_USER_5MAV_CMD_USER_1MAV_CMD_USER_2MAV_CMD_USER_3MAV_CMD_USER_4MAV_CMD_USER_5"

var _MavCmd_map = map[MavCmd]string{
	0:     _MavCmd_name[0:34],
	16:    _MavCmd_name[34:54],
	17:    _MavCmd_name[54:78],
	18:    _MavCmd_name[78:102],
	19:    _MavCmd_name[102:125],
	20:    _MavCmd_name[125:153],
	21:    _MavCmd_name[153:169],
	22:    _MavCmd_name[169:188],
	23:    _MavCmd_name[188:210],
	24:    _MavCmd_name[210:235],
	25:    _MavCmd_name[235:253],
	30:    _MavCmd_name[253:288],
	31:    _MavCmd_name[288:313],
	32:    _MavCmd_name[313:330],
	33:    _MavCmd_name[330:358],
	34:    _MavCmd_name[358:374],
	80:    _MavCmd_name[374:389],
	81:    _MavCmd_name[389:413],
	82:    _MavCmd_name[413:440],
	84:    _MavCmd_name[440:464],
	85:    _MavCmd_name[464:485],
	92:    _MavCmd_name[485:510],
	93:    _MavCmd_name[510:527],
	94:    _MavCmd_name[527:552],
	95:    _MavCmd_name[552:568],
	112:   _MavCmd_name[568:591],
	113:   _MavCmd_name[591:619],
	114:   _MavCmd_name[619:645],
	115:   _MavCmd_name[645:666],
	159:   _MavCmd_name[666:688],
	176:   _MavCmd_name[688:707],
	177:   _MavCmd_name[707:722],
	178:   _MavCmd_name[722:745],
	179:   _MavCmd_name[745:764],
	180:   _MavCmd_name[764:788],
	181:   _MavCmd_name[788:808],
	182:   _MavCmd_name[808:831],
	183:   _MavCmd_name[831:851],
	184:   _MavCmd_name[851:874],
	185:   _MavCmd_name[874:902],
	186:   _MavCmd_name[902:928],
	189:   _MavCmd_name[928:949],
	190:   _MavCmd_name[949:970],
	191:   _MavCmd_name[970:990],
	192:   _MavCmd_name[990:1011],
	193:   _MavCmd_name[1011:1036],
	194:   _MavCmd_name[1036:1058],
	195:   _MavCmd_name[1058:1085],
	196:   _MavCmd_name[1085:1117],
	197:   _MavCmd_name[1117:1140],
	200:   _MavCmd_name[1140:1164],
	201:   _MavCmd_name[1164:1182],
	202:   _MavCmd_name[1182:1210],
	203:   _MavCmd_name[1210:1236],
	204:   _MavCmd_name[1236:1262],
	205:   _MavCmd_name[1262:1286],
	206:   _MavCmd_name[1286:1315],
	207:   _MavCmd_name[1315:1338],
	208:   _MavCmd_name[1338:1358],
	209:   _MavCmd_name[1358:1379],
	210:   _MavCmd_name[1379:1405],
	213:   _MavCmd_name[1405:1430],
	214:   _MavCmd_name[1430:1463],
	220:   _MavCmd_name[1463:1492],
	221:   _MavCmd_name[1492:1516],
	222:   _MavCmd_name[1516:1540],
	223:   _MavCmd_name[1540:1565],
	224:   _MavCmd_name[1565:1595],
	240:   _MavCmd_name[1595:1610],
	241:   _MavCmd_name[1610:1639],
	242:   _MavCmd_name[1639:1675],
	243:   _MavCmd_name[1675:1699],
	245:   _MavCmd_name[1699:1724],
	246:   _MavCmd_name[1724:1757],
	252:   _MavCmd_name[1757:1778],
	300:   _MavCmd_name[1778:1799],
	400:   _MavCmd_name[1799:1827],
	410:   _MavCmd_name[1827:1852],
	500:   _MavCmd_name[1852:1873],
	510:   _MavCmd_name[1873:1901],
	511:   _MavCmd_name[1901:1929],
	512:   _MavCmd_name[1929:1952],
	519:   _MavCmd_name[1952:1984],
	520:   _MavCmd_name[1984:2022],
	521:   _MavCmd_name[2022:2056],
	522:   _MavCmd_name[2056:2087],
	525:   _MavCmd_name[2087:2122],
	526:   _MavCmd_name[2122:2144],
	527:   _MavCmd_name[2144:2181],
	528:   _MavCmd_name[2181:2215],
	529:   _MavCmd_name[2215:2244],
	530:   _MavCmd_name[2244:2267],
	531:   _MavCmd_name[2267:2290],
	532:   _MavCmd_name[2290:2314],
	600:   _MavCmd_name[2314:2330],
	601:   _MavCmd_name[2330:2349],
	2000:  _MavCmd_name[2349:2376],
	2001:  _MavCmd_name[2376:2402],
	2002:  _MavCmd_name[2402:2438],
	2003:  _MavCmd_name[2438:2464],
	2500:  _MavCmd_name[2464:2491],
	2501:  _MavCmd_name[2491:2517],
	2502:  _MavCmd_name[2517:2546],
	2503:  _MavCmd_name[2546:2574],
	2504:  _MavCmd_name[2574:2614],
	2505:  _MavCmd_name[2614:2649],
	2510:  _MavCmd_name[2649:2670],
	2511:  _MavCmd_name[2670:2690],
	2520:  _MavCmd_name[2690:2720],
	2600:  _MavCmd_name[2720:2748],
	2800:  _MavCmd_name[2748:2771],
	3000:  _MavCmd_name[2771:2797],
	3001:  _MavCmd_name[2797:2830],
	4000:  _MavCmd_name[2830:2865],
	4001:  _MavCmd_name[2865:2898],
	4501:  _MavCmd_name[2898:2920],
	5000:  _MavCmd_name[2920:2950],
	5001:  _MavCmd_name[2950:2992],
	5002:  _MavCmd_name[2992:3034],
	5003:  _MavCmd_name[3034:3068],
	5004:  _MavCmd_name[3068:3102],
	5100:  _MavCmd_name[3102:3125],
	5200:  _MavCmd_name[3125:3153],
	30001: _MavCmd_name[3153:3183],
	30002: _MavCmd_name[3183:3213],
	31000: _MavCmd_name[3213:3236],
	31001: _MavCmd_name[3236:3259],
	31002: _MavCmd_name[3259:3282],
	31003: _MavCmd_name[3282:3305],
	31004: _MavCmd_name[3305:3328],
	31005: _MavCmd_name[3328:3350],
	31006: _MavCmd_name[3350:3372],
	31007: _MavCmd_name[3372:3394],
	31008: _MavCmd_name[3394:3416],
	31009: _MavCmd_name[3416:3438],
	31010: _MavCmd_name[3438:3452],
	31011: _MavCmd_name[3452:3466],
	31012: _MavCmd_name[3466:3480],
	31013: _MavCmd_name[3480:3494],
	31014: _MavCmd_name[3494:3508],
}

func (i MavCmd) String() string {
	if str, ok := _MavCmd_map[i]; ok {
		return str
	}
	return "MavCmd(" + strconv.FormatInt(int64(i), 10) + ")"
}

const _MavAutopilot_name = "MAV_AUTOPILOT_GENERICMAV_AUTOPILOT_RESERVEDMAV_AUTOPILOT_SLUGSMAV_AUTOPILOT_ARDUPILOTMEGAMAV_AUTOPILOT_OPENPILOTMAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLYMAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLYMAV_AUTOPILOT_GENERIC_MISSION_FULLMAV_AUTOPILOT_INVALIDMAV_AUTOPILOT_PPZMAV_AUTOPILOT_UDBMAV_AUTOPILOT_FPMAV_AUTOPILOT_PX4MAV_AUTOPILOT_SMACCMPILOTMAV_AUTOPILOT_AUTOQUADMAV_AUTOPILOT_ARMAZILAMAV_AUTOPILOT_AEROBMAV_AUTOPILOT_ASLUAVMAV_AUTOPILOT_SMARTAPMAV_AUTOPILOT_AIRRAILS"

var _MavAutopilot_index = [...]uint16{0, 21, 43, 62, 89, 112, 148, 206, 240, 261, 278, 295, 311, 328, 353, 375, 397, 416, 436, 457, 479}

func (i MavAutopilot) String() string {
	if i >= MavAutopilot(len(_MavAutopilot_index)-1) {
		return "MavAutopilot(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavAutopilot_name[_MavAutopilot_index[i]:_MavAutopilot_index[i+1]]
}

const _MavType_name = "MAV_TYPE_GENERICMAV_TYPE_FIXED_WINGMAV_TYPE_QUADROTORMAV_TYPE_COAXIALMAV_TYPE_HELICOPTERMAV_TYPE_ANTENNA_TRACKERMAV_TYPE_GCSMAV_TYPE_AIRSHIPMAV_TYPE_FREE_BALLOONMAV_TYPE_ROCKETMAV_TYPE_GROUND_ROVERMAV_TYPE_SURFACE_BOATMAV_TYPE_SUBMARINEMAV_TYPE_HEXAROTORMAV_TYPE_OCTOROTORMAV_TYPE_TRICOPTERMAV_TYPE_FLAPPING_WINGMAV_TYPE_KITEMAV_TYPE_ONBOARD_CONTROLLERMAV_TYPE_VTOL_DUOROTORMAV_TYPE_VTOL_QUADROTORMAV_TYPE_VTOL_TILTROTORMAV_TYPE_VTOL_RESERVED2MAV_TYPE_VTOL_RESERVED3MAV_TYPE_VTOL_RESERVED4MAV_TYPE_VTOL_RESERVED5MAV_TYPE_GIMBALMAV_TYPE_ADSBMAV_TYPE_PARAFOILMAV_TYPE_DODECAROTORMAV_TYPE_CAMERAMAV_TYPE_CHARGING_STATIONMAV_TYPE_FLARM"

var _MavType_index = [...]uint16{0, 16, 35, 53, 69, 88, 112, 124, 140, 161, 176, 197, 218, 236, 254, 272, 290, 312, 325, 352, 374, 397, 420, 443, 466, 489, 512, 527, 540, 557, 577, 592, 617, 631}

func (i MavType) String() string {
	if i >= MavType(len(_MavType_index)-1) {
		return "MavType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavType_name[_MavType_index[i]:_MavType_index[i+1]]
}

const (
	_FirmwareVersionType_name_0 = "FIRMWARE_VERSION_TYPE_DEV"
	_FirmwareVersionType_name_1 = "FIRMWARE_VERSION_TYPE_ALPHA"
	_FirmwareVersionType_name_2 = "FIRMWARE_VERSION_TYPE_BETA"
	_FirmwareVersionType_name_3 = "FIRMWARE_VERSION_TYPE_RC"
	_FirmwareVersionType_name_4 = "FIRMWARE_VERSION_TYPE_OFFICIAL"
)

func (i FirmwareVersionType) String() string {
	switch {
	case i == 0:
		return _FirmwareVersionType_name_0
	case i == 64:
		return _FirmwareVersionType_name_1
	case i == 128:
		return _FirmwareVersionType_name_2
	case i == 192:
		return _FirmwareVersionType_name_3
	case i == 255:
		return _FirmwareVersionType_name_4
	default:
		return "FirmwareVersionType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _HlFailureFlag_name = "HL_FAILURE_FLAG_GPSHL_FAILURE_FLAG_DIFFERENTIAL_PRESSUREHL_FAILURE_FLAG_ABSOLUTE_PRESSUREHL_FAILURE_FLAG_3D_ACCELHL_FAILURE_FLAG_3D_GYROHL_FAILURE_FLAG_3D_MAGHL_FAILURE_FLAG_TERRAINHL_FAILURE_FLAG_BATTERYHL_FAILURE_FLAG_RC_RECEIVERHL_FAILURE_FLAG_OFFBOARD_LINKHL_FAILURE_FLAG_ENGINEHL_FAILURE_FLAG_GEOFENCEHL_FAILURE_FLAG_ESTIMATORHL_FAILURE_FLAG_MISSION"

var _HlFailureFlag_map = map[HlFailureFlag]string{
	1:    _HlFailureFlag_name[0:19],
	2:    _HlFailureFlag_name[19:56],
	4:    _HlFailureFlag_name[56:89],
	8:    _HlFailureFlag_name[89:113],
	16:   _HlFailureFlag_name[113:136],
	32:   _HlFailureFlag_name[136:158],
	64:   _HlFailureFlag_name[158:181],
	128:  _HlFailureFlag_name[181:204],
	256:  _HlFailureFlag_name[204:231],
	512:  _HlFailureFlag_name[231:260],
	1024: _HlFailureFlag_name[260:282],
	2048: _HlFailureFlag_name[282:306],
	4096: _HlFailureFlag_name[306:331],
	8192: _HlFailureFlag_name[331:354],
}

func (i HlFailureFlag) String() string {
	if str, ok := _HlFailureFlag_map[i]; ok {
		return str
	}
	return "HlFailureFlag(" + strconv.FormatInt(int64(i), 10) + ")"
}

const (
	_MavModeFlag_name_0 = "MAV_MODE_FLAG_CUSTOM_MODE_ENABLEDMAV_MODE_FLAG_TEST_ENABLED"
	_MavModeFlag_name_1 = "MAV_MODE_FLAG_AUTO_ENABLED"
	_MavModeFlag_name_2 = "MAV_MODE_FLAG_GUIDED_ENABLED"
	_MavModeFlag_name_3 = "MAV_MODE_FLAG_STABILIZE_ENABLED"
	_MavModeFlag_name_4 = "MAV_MODE_FLAG_HIL_ENABLED"
	_MavModeFlag_name_5 = "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED"
	_MavModeFlag_name_6 = "MAV_MODE_FLAG_SAFETY_ARMED"
)

var (
	_MavModeFlag_index_0 = [...]uint8{0, 33, 59}
)

func (i MavModeFlag) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _MavModeFlag_name_0[_MavModeFlag_index_0[i]:_MavModeFlag_index_0[i+1]]
	case i == 4:
		return _MavModeFlag_name_1
	case i == 8:
		return _MavModeFlag_name_2
	case i == 16:
		return _MavModeFlag_name_3
	case i == 32:
		return _MavModeFlag_name_4
	case i == 64:
		return _MavModeFlag_name_5
	case i == 128:
		return _MavModeFlag_name_6
	default:
		return "MavModeFlag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_MavModeFlagDecodePosition_name_0 = "MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODEMAV_MODE_FLAG_DECODE_POSITION_TEST"
	_MavModeFlagDecodePosition_name_1 = "MAV_MODE_FLAG_DECODE_POSITION_AUTO"
	_MavModeFlagDecodePosition_name_2 = "MAV_MODE_FLAG_DECODE_POSITION_GUIDED"
	_MavModeFlagDecodePosition_name_3 = "MAV_MODE_FLAG_DECODE_POSITION_STABILIZE"
	_MavModeFlagDecodePosition_name_4 = "MAV_MODE_FLAG_DECODE_POSITION_HIL"
	_MavModeFlagDecodePosition_name_5 = "MAV_MODE_FLAG_DECODE_POSITION_MANUAL"
	_MavModeFlagDecodePosition_name_6 = "MAV_MODE_FLAG_DECODE_POSITION_SAFETY"
)

var (
	_MavModeFlagDecodePosition_index_0 = [...]uint8{0, 41, 75}
)

func (i MavModeFlagDecodePosition) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _MavModeFlagDecodePosition_name_0[_MavModeFlagDecodePosition_index_0[i]:_MavModeFlagDecodePosition_index_0[i+1]]
	case i == 4:
		return _MavModeFlagDecodePosition_name_1
	case i == 8:
		return _MavModeFlagDecodePosition_name_2
	case i == 16:
		return _MavModeFlagDecodePosition_name_3
	case i == 32:
		return _MavModeFlagDecodePosition_name_4
	case i == 64:
		return _MavModeFlagDecodePosition_name_5
	case i == 128:
		return _MavModeFlagDecodePosition_name_6
	default:
		return "MavModeFlagDecodePosition(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _MavGoto_name = "MAV_GOTO_DO_HOLDMAV_GOTO_DO_CONTINUEMAV_GOTO_HOLD_AT_CURRENT_POSITIONMAV_GOTO_HOLD_AT_SPECIFIED_POSITION"

var _MavGoto_index = [...]uint8{0, 16, 36, 69, 104}

func (i MavGoto) String() string {
	if i >= MavGoto(len(_MavGoto_index)-1) {
		return "MavGoto(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavGoto_name[_MavGoto_index[i]:_MavGoto_index[i+1]]
}

const _MavMode_name = "MAV_MODE_PREFLIGHTMAV_MODE_MANUAL_DISARMEDMAV_MODE_TEST_DISARMEDMAV_MODE_STABILIZE_DISARMEDMAV_MODE_GUIDED_DISARMEDMAV_MODE_AUTO_DISARMEDMAV_MODE_MANUAL_ARMEDMAV_MODE_TEST_ARMEDMAV_MODE_STABILIZE_ARMEDMAV_MODE_GUIDED_ARMEDMAV_MODE_AUTO_ARMED"

var _MavMode_map = map[MavMode]string{
	0:   _MavMode_name[0:18],
	64:  _MavMode_name[18:42],
	66:  _MavMode_name[42:64],
	80:  _MavMode_name[64:91],
	88:  _MavMode_name[91:115],
	92:  _MavMode_name[115:137],
	192: _MavMode_name[137:158],
	194: _MavMode_name[158:177],
	208: _MavMode_name[177:201],
	216: _MavMode_name[201:222],
	220: _MavMode_name[222:241],
}

func (i MavMode) String() string {
	if str, ok := _MavMode_map[i]; ok {
		return str
	}
	return "MavMode(" + strconv.FormatInt(int64(i), 10) + ")"
}

const (
	_MavState_name_0 = "MAV_STATE_UNINIT"
	_MavState_name_1 = "MAV_STATE_BOOTMAV_STATE_CALIBRATINGMAV_STATE_STANDBYMAV_STATE_ACTIVEMAV_STATE_CRITICALMAV_STATE_EMERGENCYMAV_STATE_POWEROFFMAV_STATE_FLIGHT_TERMINATION"
)

var (
	_MavState_index_1 = [...]uint8{0, 14, 35, 52, 68, 86, 105, 123, 151}
)

func (i MavState) String() string {
	switch {
	case i == 0:
		return _MavState_name_0
	case 2 <= i && i <= 9:
		i -= 2
		return _MavState_name_1[_MavState_index_1[i]:_MavState_index_1[i+1]]
	default:
		return "MavState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_MavComponent_name_0 = "MAV_COMP_ID_ALLMAV_COMP_ID_AUTOPILOT1"
	_MavComponent_name_1 = "MAV_COMP_ID_CAMERAMAV_COMP_ID_CAMERA2MAV_COMP_ID_CAMERA3MAV_COMP_ID_CAMERA4MAV_COMP_ID_CAMERA5MAV_COMP_ID_CAMERA6"
	_MavComponent_name_2 = "MAV_COMP_ID_SERVO1MAV_COMP_ID_SERVO2MAV_COMP_ID_SERVO3MAV_COMP_ID_SERVO4MAV_COMP_ID_SERVO5MAV_COMP_ID_SERVO6MAV_COMP_ID_SERVO7MAV_COMP_ID_SERVO8MAV_COMP_ID_SERVO9MAV_COMP_ID_SERVO10MAV_COMP_ID_SERVO11MAV_COMP_ID_SERVO12MAV_COMP_ID_SERVO13MAV_COMP_ID_SERVO14MAV_COMP_ID_GIMBALMAV_COMP_ID_LOGMAV_COMP_ID_ADSBMAV_COMP_ID_OSDMAV_COMP_ID_PERIPHERALMAV_COMP_ID_QX1_GIMBALMAV_COMP_ID_FLARM"
	_MavComponent_name_3 = "MAV_COMP_ID_MISSIONPLANNER"
	_MavComponent_name_4 = "MAV_COMP_ID_PATHPLANNERMAV_COMP_ID_OBSTACLE_AVOIDANCEMAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY"
	_MavComponent_name_5 = "MAV_COMP_ID_IMUMAV_COMP_ID_IMU_2MAV_COMP_ID_IMU_3"
	_MavComponent_name_6 = "MAV_COMP_ID_GPSMAV_COMP_ID_GPS2"
	_MavComponent_name_7 = "MAV_COMP_ID_UDP_BRIDGEMAV_COMP_ID_UART_BRIDGE"
	_MavComponent_name_8 = "MAV_COMP_ID_SYSTEM_CONTROL"
)

var (
	_MavComponent_index_0 = [...]uint8{0, 15, 37}
	_MavComponent_index_1 = [...]uint8{0, 18, 37, 56, 75, 94, 113}
	_MavComponent_index_2 = [...]uint16{0, 18, 36, 54, 72, 90, 108, 126, 144, 162, 181, 200, 219, 238, 257, 275, 290, 306, 321, 343, 365, 382}
	_MavComponent_index_4 = [...]uint8{0, 23, 53, 89}
	_MavComponent_index_5 = [...]uint8{0, 15, 32, 49}
	_MavComponent_index_6 = [...]uint8{0, 15, 31}
	_MavComponent_index_7 = [...]uint8{0, 22, 45}
)

func (i MavComponent) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _MavComponent_name_0[_MavComponent_index_0[i]:_MavComponent_index_0[i+1]]
	case 100 <= i && i <= 105:
		i -= 100
		return _MavComponent_name_1[_MavComponent_index_1[i]:_MavComponent_index_1[i+1]]
	case 140 <= i && i <= 160:
		i -= 140
		return _MavComponent_name_2[_MavComponent_index_2[i]:_MavComponent_index_2[i+1]]
	case i == 190:
		return _MavComponent_name_3
	case 195 <= i && i <= 197:
		i -= 195
		return _MavComponent_name_4[_MavComponent_index_4[i]:_MavComponent_index_4[i+1]]
	case 200 <= i && i <= 202:
		i -= 200
		return _MavComponent_name_5[_MavComponent_index_5[i]:_MavComponent_index_5[i+1]]
	case 220 <= i && i <= 221:
		i -= 220
		return _MavComponent_name_6[_MavComponent_index_6[i]:_MavComponent_index_6[i+1]]
	case 240 <= i && i <= 241:
		i -= 240
		return _MavComponent_name_7[_MavComponent_index_7[i]:_MavComponent_index_7[i+1]]
	case i == 250:
		return _MavComponent_name_8
	default:
		return "MavComponent(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _MavSysStatusSensor_name = "MAV_SYS_STATUS_SENSOR_3D_GYROMAV_SYS_STATUS_SENSOR_3D_ACCELMAV_SYS_STATUS_SENSOR_3D_MAGMAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSUREMAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSUREMAV_SYS_STATUS_SENSOR_GPSMAV_SYS_STATUS_SENSOR_OPTICAL_FLOWMAV_SYS_STATUS_SENSOR_VISION_POSITIONMAV_SYS_STATUS_SENSOR_LASER_POSITIONMAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTHMAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROLMAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATIONMAV_SYS_STATUS_SENSOR_YAW_POSITIONMAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROLMAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROLMAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTSMAV_SYS_STATUS_SENSOR_RC_RECEIVERMAV_SYS_STATUS_SENSOR_3D_GYRO2MAV_SYS_STATUS_SENSOR_3D_ACCEL2MAV_SYS_STATUS_SENSOR_3D_MAG2MAV_SYS_STATUS_GEOFENCEMAV_SYS_STATUS_AHRSMAV_SYS_STATUS_TERRAINMAV_SYS_STATUS_REVERSE_MOTORMAV_SYS_STATUS_LOGGINGMAV_SYS_STATUS_SENSOR_BATTERYMAV_SYS_STATUS_SENSOR_PROXIMITYMAV_SYS_STATUS_SENSOR_SATCOM"

var _MavSysStatusSensor_map = map[MavSysStatusSensor]string{
	1:         _MavSysStatusSensor_name[0:29],
	2:         _MavSysStatusSensor_name[29:59],
	4:         _MavSysStatusSensor_name[59:87],
	8:         _MavSysStatusSensor_name[87:126],
	16:        _MavSysStatusSensor_name[126:169],
	32:        _MavSysStatusSensor_name[169:194],
	64:        _MavSysStatusSensor_name[194:228],
	128:       _MavSysStatusSensor_name[228:265],
	256:       _MavSysStatusSensor_name[265:301],
	512:       _MavSysStatusSensor_name[301:344],
	1024:      _MavSysStatusSensor_name[344:386],
	2048:      _MavSysStatusSensor_name[386:430],
	4096:      _MavSysStatusSensor_name[430:464],
	8192:      _MavSysStatusSensor_name[464:504],
	16384:     _MavSysStatusSensor_name[504:545],
	32768:     _MavSysStatusSensor_name[545:580],
	65536:     _MavSysStatusSensor_name[580:613],
	131072:    _MavSysStatusSensor_name[613:643],
	262144:    _MavSysStatusSensor_name[643:674],
	524288:    _MavSysStatusSensor_name[674:703],
	1048576:   _MavSysStatusSensor_name[703:726],
	2097152:   _MavSysStatusSensor_name[726:745],
	4194304:   _MavSysStatusSensor_name[745:767],
	8388608:   _MavSysStatusSensor_name[767:795],
	16777216:  _MavSysStatusSensor_name[795:817],
	33554432:  _MavSysStatusSensor_name[817:846],
	67108864:  _MavSysStatusSensor_name[846:877],
	134217728: _MavSysStatusSensor_name[877:905],
}

func (i MavSysStatusSensor) String() string {
	if str, ok := _MavSysStatusSensor_map[i]; ok {
		return str
	}
	return "MavSysStatusSensor(" + strconv.FormatInt(int64(i), 10) + ")"
}

const _MavFrame_name = "MAV_FRAME_GLOBALMAV_FRAME_LOCAL_NEDMAV_FRAME_MISSIONMAV_FRAME_GLOBAL_RELATIVE_ALTMAV_FRAME_LOCAL_ENUMAV_FRAME_GLOBAL_INTMAV_FRAME_GLOBAL_RELATIVE_ALT_INTMAV_FRAME_LOCAL_OFFSET_NEDMAV_FRAME_BODY_NEDMAV_FRAME_BODY_OFFSET_NEDMAV_FRAME_GLOBAL_TERRAIN_ALTMAV_FRAME_GLOBAL_TERRAIN_ALT_INTMAV_FRAME_BODY_FRDMAV_FRAME_BODY_FLUMAV_FRAME_MOCAP_NEDMAV_FRAME_MOCAP_ENUMAV_FRAME_VISION_NEDMAV_FRAME_VISION_ENUMAV_FRAME_ESTIM_NEDMAV_FRAME_ESTIM_ENU"

var _MavFrame_index = [...]uint16{0, 16, 35, 52, 81, 100, 120, 153, 179, 197, 222, 250, 282, 300, 318, 337, 356, 376, 396, 415, 434}

func (i MavFrame) String() string {
	if i >= MavFrame(len(_MavFrame_index)-1) {
		return "MavFrame(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavFrame_name[_MavFrame_index[i]:_MavFrame_index[i+1]]
}

const _MavlinkDataStreamType_name = "MAVLINK_DATA_STREAM_IMG_JPEGMAVLINK_DATA_STREAM_IMG_BMPMAVLINK_DATA_STREAM_IMG_RAW8UMAVLINK_DATA_STREAM_IMG_RAW32UMAVLINK_DATA_STREAM_IMG_PGMMAVLINK_DATA_STREAM_IMG_PNG"

var _MavlinkDataStreamType_index = [...]uint8{0, 28, 55, 84, 114, 141, 168}

func (i MavlinkDataStreamType) String() string {
	i -= 1
	if i >= MavlinkDataStreamType(len(_MavlinkDataStreamType_index)-1) {
		return "MavlinkDataStreamType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MavlinkDataStreamType_name[_MavlinkDataStreamType_index[i]:_MavlinkDataStreamType_index[i+1]]
}

const _FenceAction_name = "FENCE_ACTION_NONEFENCE_ACTION_GUIDEDFENCE_ACTION_REPORTFENCE_ACTION_GUIDED_THR_PASSFENCE_ACTION_RTL"

var _FenceAction_index = [...]uint8{0, 17, 36, 55, 83, 99}

func (i FenceAction) String() string {
	if i >= FenceAction(len(_FenceAction_index)-1) {
		return "FenceAction(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FenceAction_name[_FenceAction_index[i]:_FenceAction_index[i+1]]
}

const _FenceBreach_name = "FENCE_BREACH_NONEFENCE_BREACH_MINALTFENCE_BREACH_MAXALTFENCE_BREACH_BOUNDARY"

var _FenceBreach_index = [...]uint8{0, 17, 36, 55, 76}

func (i FenceBreach) String() string {
	if i >= FenceBreach(len(_FenceBreach_index)-1) {
		return "FenceBreach(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FenceBreach_name[_FenceBreach_index[i]:_FenceBreach_index[i+1]]
}

const _MavMountMode_name = "MAV_MOUNT_MODE_RETRACTMAV_MOUNT_MODE_NEUTRALMAV_MOUNT_MODE_MAVLINK_TARGETINGMAV_MOUNT_MODE_RC_TARGETINGMAV_MOUNT_MODE_GPS_POINT"

var _MavMountMode_index = [...]uint8{0, 22, 44, 76, 103, 127}

func (i MavMountMode) String() string {
	if i >= MavMountMode(len(_MavMountMode_index)-1) {
		return "MavMountMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavMountMode_name[_MavMountMode_index[i]:_MavMountMode_index[i+1]]
}

const _UavcanNodeHealth_name = "UAVCAN_NODE_HEALTH_OKUAVCAN_NODE_HEALTH_WARNINGUAVCAN_NODE_HEALTH_ERRORUAVCAN_NODE_HEALTH_CRITICAL"

var _UavcanNodeHealth_index = [...]uint8{0, 21, 47, 71, 98}

func (i UavcanNodeHealth) String() string {
	if i >= UavcanNodeHealth(len(_UavcanNodeHealth_index)-1) {
		return "UavcanNodeHealth(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _UavcanNodeHealth_name[_UavcanNodeHealth_index[i]:_UavcanNodeHealth_index[i+1]]
}

const (
	_UavcanNodeMode_name_0 = "UAVCAN_NODE_MODE_OPERATIONALUAVCAN_NODE_MODE_INITIALIZATIONUAVCAN_NODE_MODE_MAINTENANCEUAVCAN_NODE_MODE_SOFTWARE_UPDATE"
	_UavcanNodeMode_name_1 = "UAVCAN_NODE_MODE_OFFLINE"
)

var (
	_UavcanNodeMode_index_0 = [...]uint8{0, 28, 59, 87, 119}
)

func (i UavcanNodeMode) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _UavcanNodeMode_name_0[_UavcanNodeMode_index_0[i]:_UavcanNodeMode_index_0[i+1]]
	case i == 7:
		return _UavcanNodeMode_name_1
	default:
		return "UavcanNodeMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_MavDataStream_name_0 = "MAV_DATA_STREAM_ALLMAV_DATA_STREAM_RAW_SENSORSMAV_DATA_STREAM_EXTENDED_STATUSMAV_DATA_STREAM_RC_CHANNELSMAV_DATA_STREAM_RAW_CONTROLLER"
	_MavDataStream_name_1 = "MAV_DATA_STREAM_POSITION"
	_MavDataStream_name_2 = "MAV_DATA_STREAM_EXTRA1MAV_DATA_STREAM_EXTRA2MAV_DATA_STREAM_EXTRA3"
)

var (
	_MavDataStream_index_0 = [...]uint8{0, 19, 46, 77, 104, 134}
	_MavDataStream_index_2 = [...]uint8{0, 22, 44, 66}
)

func (i MavDataStream) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _MavDataStream_name_0[_MavDataStream_index_0[i]:_MavDataStream_index_0[i+1]]
	case i == 6:
		return _MavDataStream_name_1
	case 10 <= i && i <= 12:
		i -= 10
		return _MavDataStream_name_2[_MavDataStream_index_2[i]:_MavDataStream_index_2[i+1]]
	default:
		return "MavDataStream(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _MavRoi_name = "MAV_ROI_NONEMAV_ROI_WPNEXTMAV_ROI_WPINDEXMAV_ROI_LOCATIONMAV_ROI_TARGET"

var _MavRoi_index = [...]uint8{0, 12, 26, 41, 57, 71}

func (i MavRoi) String() string {
	if i >= MavRoi(len(_MavRoi_index)-1) {
		return "MavRoi(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavRoi_name[_MavRoi_index[i]:_MavRoi_index[i+1]]
}

const _MavCmdAck_name = "MAV_CMD_ACK_OKMAV_CMD_ACK_ERR_FAILMAV_CMD_ACK_ERR_ACCESS_DENIEDMAV_CMD_ACK_ERR_NOT_SUPPORTEDMAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTEDMAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGEMAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGEMAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGEMAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE"

var _MavCmdAck_index = [...]uint16{0, 14, 34, 63, 92, 138, 178, 212, 246, 280}

func (i MavCmdAck) String() string {
	i -= 1
	if i >= MavCmdAck(len(_MavCmdAck_index)-1) {
		return "MavCmdAck(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MavCmdAck_name[_MavCmdAck_index[i]:_MavCmdAck_index[i+1]]
}

const _MavParamType_name = "MAV_PARAM_TYPE_UINT8MAV_PARAM_TYPE_INT8MAV_PARAM_TYPE_UINT16MAV_PARAM_TYPE_INT16MAV_PARAM_TYPE_UINT32MAV_PARAM_TYPE_INT32MAV_PARAM_TYPE_UINT64MAV_PARAM_TYPE_INT64MAV_PARAM_TYPE_REAL32MAV_PARAM_TYPE_REAL64"

var _MavParamType_index = [...]uint8{0, 20, 39, 60, 80, 101, 121, 142, 162, 183, 204}

func (i MavParamType) String() string {
	i -= 1
	if i >= MavParamType(len(_MavParamType_index)-1) {
		return "MavParamType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MavParamType_name[_MavParamType_index[i]:_MavParamType_index[i+1]]
}

const _MavParamExtType_name = "MAV_PARAM_EXT_TYPE_UINT8MAV_PARAM_EXT_TYPE_INT8MAV_PARAM_EXT_TYPE_UINT16MAV_PARAM_EXT_TYPE_INT16MAV_PARAM_EXT_TYPE_UINT32MAV_PARAM_EXT_TYPE_INT32MAV_PARAM_EXT_TYPE_UINT64MAV_PARAM_EXT_TYPE_INT64MAV_PARAM_EXT_TYPE_REAL32MAV_PARAM_EXT_TYPE_REAL64MAV_PARAM_EXT_TYPE_CUSTOM"

var _MavParamExtType_index = [...]uint16{0, 24, 47, 72, 96, 121, 145, 170, 194, 219, 244, 269}

func (i MavParamExtType) String() string {
	i -= 1
	if i >= MavParamExtType(len(_MavParamExtType_index)-1) {
		return "MavParamExtType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MavParamExtType_name[_MavParamExtType_index[i]:_MavParamExtType_index[i+1]]
}

const _MavResult_name = "MAV_RESULT_ACCEPTEDMAV_RESULT_TEMPORARILY_REJECTEDMAV_RESULT_DENIEDMAV_RESULT_UNSUPPORTEDMAV_RESULT_FAILEDMAV_RESULT_IN_PROGRESS"

var _MavResult_index = [...]uint8{0, 19, 50, 67, 89, 106, 128}

func (i MavResult) String() string {
	if i >= MavResult(len(_MavResult_index)-1) {
		return "MavResult(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavResult_name[_MavResult_index[i]:_MavResult_index[i+1]]
}

const _MavMissionResult_name = "MAV_MISSION_ACCEPTEDMAV_MISSION_ERRORMAV_MISSION_UNSUPPORTED_FRAMEMAV_MISSION_UNSUPPORTEDMAV_MISSION_NO_SPACEMAV_MISSION_INVALIDMAV_MISSION_INVALID_PARAM1MAV_MISSION_INVALID_PARAM2MAV_MISSION_INVALID_PARAM3MAV_MISSION_INVALID_PARAM4MAV_MISSION_INVALID_PARAM5_XMAV_MISSION_INVALID_PARAM6_YMAV_MISSION_INVALID_PARAM7MAV_MISSION_INVALID_SEQUENCEMAV_MISSION_DENIEDMAV_MISSION_OPERATION_CANCELLED"

var _MavMissionResult_index = [...]uint16{0, 20, 37, 66, 89, 109, 128, 154, 180, 206, 232, 260, 288, 314, 342, 360, 391}

func (i MavMissionResult) String() string {
	if i >= MavMissionResult(len(_MavMissionResult_index)-1) {
		return "MavMissionResult(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavMissionResult_name[_MavMissionResult_index[i]:_MavMissionResult_index[i+1]]
}

const _MavSeverity_name = "MAV_SEVERITY_EMERGENCYMAV_SEVERITY_ALERTMAV_SEVERITY_CRITICALMAV_SEVERITY_ERRORMAV_SEVERITY_WARNINGMAV_SEVERITY_NOTICEMAV_SEVERITY_INFOMAV_SEVERITY_DEBUG"

var _MavSeverity_index = [...]uint8{0, 22, 40, 61, 79, 99, 118, 135, 153}

func (i MavSeverity) String() string {
	if i >= MavSeverity(len(_MavSeverity_index)-1) {
		return "MavSeverity(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavSeverity_name[_MavSeverity_index[i]:_MavSeverity_index[i+1]]
}

const (
	_MavPowerStatus_name_0 = "MAV_POWER_STATUS_BRICK_VALIDMAV_POWER_STATUS_SERVO_VALID"
	_MavPowerStatus_name_1 = "MAV_POWER_STATUS_USB_CONNECTED"
	_MavPowerStatus_name_2 = "MAV_POWER_STATUS_PERIPH_OVERCURRENT"
	_MavPowerStatus_name_3 = "MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT"
	_MavPowerStatus_name_4 = "MAV_POWER_STATUS_CHANGED"
)

var (
	_MavPowerStatus_index_0 = [...]uint8{0, 28, 56}
)

func (i MavPowerStatus) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _MavPowerStatus_name_0[_MavPowerStatus_index_0[i]:_MavPowerStatus_index_0[i+1]]
	case i == 4:
		return _MavPowerStatus_name_1
	case i == 8:
		return _MavPowerStatus_name_2
	case i == 16:
		return _MavPowerStatus_name_3
	case i == 32:
		return _MavPowerStatus_name_4
	default:
		return "MavPowerStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_SerialControlDev_name_0 = "SERIAL_CONTROL_DEV_TELEM1SERIAL_CONTROL_DEV_TELEM2SERIAL_CONTROL_DEV_GPS1SERIAL_CONTROL_DEV_GPS2"
	_SerialControlDev_name_1 = "SERIAL_CONTROL_DEV_SHELL"
)

var (
	_SerialControlDev_index_0 = [...]uint8{0, 25, 50, 73, 96}
)

func (i SerialControlDev) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _SerialControlDev_name_0[_SerialControlDev_index_0[i]:_SerialControlDev_index_0[i+1]]
	case i == 10:
		return _SerialControlDev_name_1
	default:
		return "SerialControlDev(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_SerialControlFlag_name_0 = "SERIAL_CONTROL_FLAG_REPLYSERIAL_CONTROL_FLAG_RESPOND"
	_SerialControlFlag_name_1 = "SERIAL_CONTROL_FLAG_EXCLUSIVE"
	_SerialControlFlag_name_2 = "SERIAL_CONTROL_FLAG_BLOCKING"
	_SerialControlFlag_name_3 = "SERIAL_CONTROL_FLAG_MULTI"
)

var (
	_SerialControlFlag_index_0 = [...]uint8{0, 25, 52}
)

func (i SerialControlFlag) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _SerialControlFlag_name_0[_SerialControlFlag_index_0[i]:_SerialControlFlag_index_0[i+1]]
	case i == 4:
		return _SerialControlFlag_name_1
	case i == 8:
		return _SerialControlFlag_name_2
	case i == 16:
		return _SerialControlFlag_name_3
	default:
		return "SerialControlFlag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _MavDistanceSensor_name = "MAV_DISTANCE_SENSOR_LASERMAV_DISTANCE_SENSOR_ULTRASOUNDMAV_DISTANCE_SENSOR_INFRAREDMAV_DISTANCE_SENSOR_RADARMAV_DISTANCE_SENSOR_UNKNOWN"

var _MavDistanceSensor_index = [...]uint8{0, 25, 55, 83, 108, 135}

func (i MavDistanceSensor) String() string {
	if i >= MavDistanceSensor(len(_MavDistanceSensor_index)-1) {
		return "MavDistanceSensor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavDistanceSensor_name[_MavDistanceSensor_index[i]:_MavDistanceSensor_index[i+1]]
}

const (
	_MavSensorOrientation_name_0 = "MAV_SENSOR_ROTATION_NONEMAV_SENSOR_ROTATION_YAW_45MAV_SENSOR_ROTATION_YAW_90MAV_SENSOR_ROTATION_YAW_135MAV_SENSOR_ROTATION_YAW_180MAV_SENSOR_ROTATION_YAW_225MAV_SENSOR_ROTATION_YAW_270MAV_SENSOR_ROTATION_YAW_315MAV_SENSOR_ROTATION_ROLL_180MAV_SENSOR_ROTATION_ROLL_180_YAW_45MAV_SENSOR_ROTATION_ROLL_180_YAW_90MAV_SENSOR_ROTATION_ROLL_180_YAW_135MAV_SENSOR_ROTATION_PITCH_180MAV_SENSOR_ROTATION_ROLL_180_YAW_225MAV_SENSOR_ROTATION_ROLL_180_YAW_270MAV_SENSOR_ROTATION_ROLL_180_YAW_315MAV_SENSOR_ROTATION_ROLL_90MAV_SENSOR_ROTATION_ROLL_90_YAW_45MAV_SENSOR_ROTATION_ROLL_90_YAW_90MAV_SENSOR_ROTATION_ROLL_90_YAW_135MAV_SENSOR_ROTATION_ROLL_270MAV_SENSOR_ROTATION_ROLL_270_YAW_45MAV_SENSOR_ROTATION_ROLL_270_YAW_90MAV_SENSOR_ROTATION_ROLL_270_YAW_135MAV_SENSOR_ROTATION_PITCH_90MAV_SENSOR_ROTATION_PITCH_270MAV_SENSOR_ROTATION_PITCH_180_YAW_90MAV_SENSOR_ROTATION_PITCH_180_YAW_270MAV_SENSOR_ROTATION_ROLL_90_PITCH_90MAV_SENSOR_ROTATION_ROLL_180_PITCH_90MAV_SENSOR_ROTATION_ROLL_270_PITCH_90MAV_SENSOR_ROTATION_ROLL_90_PITCH_180MAV_SENSOR_ROTATION_ROLL_270_PITCH_180MAV_SENSOR_ROTATION_ROLL_90_PITCH_270MAV_SENSOR_ROTATION_ROLL_180_PITCH_270MAV_SENSOR_ROTATION_ROLL_270_PITCH_270MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90MAV_SENSOR_ROTATION_ROLL_90_YAW_270MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293MAV_SENSOR_ROTATION_PITCH_315MAV_SENSOR_ROTATION_ROLL_90_PITCH_315"
	_MavSensorOrientation_name_1 = "MAV_SENSOR_ROTATION_CUSTOM"
)

var (
	_MavSensorOrientation_index_0 = [...]uint16{0, 24, 50, 76, 103, 130, 157, 184, 211, 239, 274, 309, 345, 374, 410, 446, 482, 509, 543, 577, 612, 640, 675, 710, 746, 774, 803, 839, 876, 912, 949, 986, 1023, 1061, 1098, 1136, 1174, 1218, 1253, 1297, 1326, 1363}
)

func (i MavSensorOrientation) String() string {
	switch {
	case 0 <= i && i <= 40:
		return _MavSensorOrientation_name_0[_MavSensorOrientation_index_0[i]:_MavSensorOrientation_index_0[i+1]]
	case i == 100:
		return _MavSensorOrientation_name_1
	default:
		return "MavSensorOrientation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _MavProtocolCapability_name = "MAV_PROTOCOL_CAPABILITY_MISSION_FLOATMAV_PROTOCOL_CAPABILITY_PARAM_FLOATMAV_PROTOCOL_CAPABILITY_MISSION_INTMAV_PROTOCOL_CAPABILITY_COMMAND_INTMAV_PROTOCOL_CAPABILITY_PARAM_UNIONMAV_PROTOCOL_CAPABILITY_FTPMAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGETMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NEDMAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INTMAV_PROTOCOL_CAPABILITY_TERRAINMAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGETMAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATIONMAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATIONMAV_PROTOCOL_CAPABILITY_MAVLINK2MAV_PROTOCOL_CAPABILITY_MISSION_FENCEMAV_PROTOCOL_CAPABILITY_MISSION_RALLYMAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION"

var _MavProtocolCapability_map = map[MavProtocolCapability]string{
	1:     _MavProtocolCapability_name[0:37],
	2:     _MavProtocolCapability_name[37:72],
	4:     _MavProtocolCapability_name[72:107],
	8:     _MavProtocolCapability_name[107:142],
	16:    _MavProtocolCapability_name[142:177],
	32:    _MavProtocolCapability_name[177:204],
	64:    _MavProtocolCapability_name[204:247],
	128:   _MavProtocolCapability_name[247:300],
	256:   _MavProtocolCapability_name[300:354],
	512:   _MavProtocolCapability_name[354:385],
	1024:  _MavProtocolCapability_name[385:428],
	2048:  _MavProtocolCapability_name[428:470],
	4096:  _MavProtocolCapability_name[470:513],
	8192:  _MavProtocolCapability_name[513:545],
	16384: _MavProtocolCapability_name[545:582],
	32768: _MavProtocolCapability_name[582:619],
	65536: _MavProtocolCapability_name[619:661],
}

func (i MavProtocolCapability) String() string {
	if str, ok := _MavProtocolCapability_map[i]; ok {
		return str
	}
	return "MavProtocolCapability(" + strconv.FormatInt(int64(i), 10) + ")"
}

const (
	_MavMissionType_name_0 = "MAV_MISSION_TYPE_MISSIONMAV_MISSION_TYPE_FENCEMAV_MISSION_TYPE_RALLY"
	_MavMissionType_name_1 = "MAV_MISSION_TYPE_ALL"
)

var (
	_MavMissionType_index_0 = [...]uint8{0, 24, 46, 68}
)

func (i MavMissionType) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _MavMissionType_name_0[_MavMissionType_index_0[i]:_MavMissionType_index_0[i+1]]
	case i == 255:
		return _MavMissionType_name_1
	default:
		return "MavMissionType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _MavEstimatorType_name = "MAV_ESTIMATOR_TYPE_NAIVEMAV_ESTIMATOR_TYPE_VISIONMAV_ESTIMATOR_TYPE_VIOMAV_ESTIMATOR_TYPE_GPSMAV_ESTIMATOR_TYPE_GPS_INS"

var _MavEstimatorType_index = [...]uint8{0, 24, 49, 71, 93, 119}

func (i MavEstimatorType) String() string {
	i -= 1
	if i >= MavEstimatorType(len(_MavEstimatorType_index)-1) {
		return "MavEstimatorType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MavEstimatorType_name[_MavEstimatorType_index[i]:_MavEstimatorType_index[i+1]]
}

const _MavBatteryType_name = "MAV_BATTERY_TYPE_UNKNOWNMAV_BATTERY_TYPE_LIPOMAV_BATTERY_TYPE_LIFEMAV_BATTERY_TYPE_LIONMAV_BATTERY_TYPE_NIMH"

var _MavBatteryType_index = [...]uint8{0, 24, 45, 66, 87, 108}

func (i MavBatteryType) String() string {
	if i >= MavBatteryType(len(_MavBatteryType_index)-1) {
		return "MavBatteryType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavBatteryType_name[_MavBatteryType_index[i]:_MavBatteryType_index[i+1]]
}

const _MavBatteryFunction_name = "MAV_BATTERY_FUNCTION_UNKNOWNMAV_BATTERY_FUNCTION_ALLMAV_BATTERY_FUNCTION_PROPULSIONMAV_BATTERY_FUNCTION_AVIONICSMAV_BATTERY_TYPE_PAYLOAD"

var _MavBatteryFunction_index = [...]uint8{0, 28, 52, 83, 112, 136}

func (i MavBatteryFunction) String() string {
	if i >= MavBatteryFunction(len(_MavBatteryFunction_index)-1) {
		return "MavBatteryFunction(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavBatteryFunction_name[_MavBatteryFunction_index[i]:_MavBatteryFunction_index[i+1]]
}

const _MavBatteryChargeState_name = "MAV_BATTERY_CHARGE_STATE_UNDEFINEDMAV_BATTERY_CHARGE_STATE_OKMAV_BATTERY_CHARGE_STATE_LOWMAV_BATTERY_CHARGE_STATE_CRITICALMAV_BATTERY_CHARGE_STATE_EMERGENCYMAV_BATTERY_CHARGE_STATE_FAILEDMAV_BATTERY_CHARGE_STATE_UNHEALTHYMAV_BATTERY_CHARGE_STATE_CHARGING"

var _MavBatteryChargeState_index = [...]uint8{0, 34, 61, 89, 122, 156, 187, 221, 254}

func (i MavBatteryChargeState) String() string {
	if i >= MavBatteryChargeState(len(_MavBatteryChargeState_index)-1) {
		return "MavBatteryChargeState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavBatteryChargeState_name[_MavBatteryChargeState_index[i]:_MavBatteryChargeState_index[i+1]]
}

const (
	_MavSmartBatteryFault_name_0 = "MAV_SMART_BATTERY_FAULT_DEEP_DISCHARGEMAV_SMART_BATTERY_FAULT_SPIKES"
	_MavSmartBatteryFault_name_1 = "MAV_SMART_BATTERY_FAULT_SINGLE_CELL_FAIL"
	_MavSmartBatteryFault_name_2 = "MAV_SMART_BATTERY_FAULT_OVER_CURRENT"
	_MavSmartBatteryFault_name_3 = "MAV_SMART_BATTERY_FAULT_OVER_TEMPERATURE"
	_MavSmartBatteryFault_name_4 = "MAV_SMART_BATTERY_FAULT_UNDER_TEMPERATURE"
)

var (
	_MavSmartBatteryFault_index_0 = [...]uint8{0, 38, 68}
)

func (i MavSmartBatteryFault) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _MavSmartBatteryFault_name_0[_MavSmartBatteryFault_index_0[i]:_MavSmartBatteryFault_index_0[i+1]]
	case i == 4:
		return _MavSmartBatteryFault_name_1
	case i == 8:
		return _MavSmartBatteryFault_name_2
	case i == 16:
		return _MavSmartBatteryFault_name_3
	case i == 32:
		return _MavSmartBatteryFault_name_4
	default:
		return "MavSmartBatteryFault(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _MavVtolState_name = "MAV_VTOL_STATE_UNDEFINEDMAV_VTOL_STATE_TRANSITION_TO_FWMAV_VTOL_STATE_TRANSITION_TO_MCMAV_VTOL_STATE_MCMAV_VTOL_STATE_FW"

var _MavVtolState_index = [...]uint8{0, 24, 55, 86, 103, 120}

func (i MavVtolState) String() string {
	if i >= MavVtolState(len(_MavVtolState_index)-1) {
		return "MavVtolState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavVtolState_name[_MavVtolState_index[i]:_MavVtolState_index[i+1]]
}

const _MavLandedState_name = "MAV_LANDED_STATE_UNDEFINEDMAV_LANDED_STATE_ON_GROUNDMAV_LANDED_STATE_IN_AIRMAV_LANDED_STATE_TAKEOFFMAV_LANDED_STATE_LANDING"

var _MavLandedState_index = [...]uint8{0, 26, 52, 75, 99, 123}

func (i MavLandedState) String() string {
	if i >= MavLandedState(len(_MavLandedState_index)-1) {
		return "MavLandedState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavLandedState_name[_MavLandedState_index[i]:_MavLandedState_index[i+1]]
}

const _AdsbAltitudeType_name = "ADSB_ALTITUDE_TYPE_PRESSURE_QNHADSB_ALTITUDE_TYPE_GEOMETRIC"

var _AdsbAltitudeType_index = [...]uint8{0, 31, 59}

func (i AdsbAltitudeType) String() string {
	if i >= AdsbAltitudeType(len(_AdsbAltitudeType_index)-1) {
		return "AdsbAltitudeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AdsbAltitudeType_name[_AdsbAltitudeType_index[i]:_AdsbAltitudeType_index[i+1]]
}

const _AdsbEmitterType_name = "ADSB_EMITTER_TYPE_NO_INFOADSB_EMITTER_TYPE_LIGHTADSB_EMITTER_TYPE_SMALLADSB_EMITTER_TYPE_LARGEADSB_EMITTER_TYPE_HIGH_VORTEX_LARGEADSB_EMITTER_TYPE_HEAVYADSB_EMITTER_TYPE_HIGHLY_MANUVADSB_EMITTER_TYPE_ROTOCRAFTADSB_EMITTER_TYPE_UNASSIGNEDADSB_EMITTER_TYPE_GLIDERADSB_EMITTER_TYPE_LIGHTER_AIRADSB_EMITTER_TYPE_PARACHUTEADSB_EMITTER_TYPE_ULTRA_LIGHTADSB_EMITTER_TYPE_UNASSIGNED2ADSB_EMITTER_TYPE_UAVADSB_EMITTER_TYPE_SPACEADSB_EMITTER_TYPE_UNASSGINED3ADSB_EMITTER_TYPE_EMERGENCY_SURFACEADSB_EMITTER_TYPE_SERVICE_SURFACEADSB_EMITTER_TYPE_POINT_OBSTACLE"

var _AdsbEmitterType_index = [...]uint16{0, 25, 48, 71, 94, 129, 152, 182, 209, 237, 261, 290, 317, 346, 375, 396, 419, 448, 483, 516, 548}

func (i AdsbEmitterType) String() string {
	if i >= AdsbEmitterType(len(_AdsbEmitterType_index)-1) {
		return "AdsbEmitterType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AdsbEmitterType_name[_AdsbEmitterType_index[i]:_AdsbEmitterType_index[i+1]]
}

const (
	_AdsbFlags_name_0 = "ADSB_FLAGS_VALID_COORDSADSB_FLAGS_VALID_ALTITUDE"
	_AdsbFlags_name_1 = "ADSB_FLAGS_VALID_HEADING"
	_AdsbFlags_name_2 = "ADSB_FLAGS_VALID_VELOCITY"
	_AdsbFlags_name_3 = "ADSB_FLAGS_VALID_CALLSIGN"
	_AdsbFlags_name_4 = "ADSB_FLAGS_VALID_SQUAWK"
	_AdsbFlags_name_5 = "ADSB_FLAGS_SIMULATED"
)

var (
	_AdsbFlags_index_0 = [...]uint8{0, 23, 48}
)

func (i AdsbFlags) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _AdsbFlags_name_0[_AdsbFlags_index_0[i]:_AdsbFlags_index_0[i+1]]
	case i == 4:
		return _AdsbFlags_name_1
	case i == 8:
		return _AdsbFlags_name_2
	case i == 16:
		return _AdsbFlags_name_3
	case i == 32:
		return _AdsbFlags_name_4
	case i == 64:
		return _AdsbFlags_name_5
	default:
		return "AdsbFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _MavDoRepositionFlags_name = "MAV_DO_REPOSITION_FLAGS_CHANGE_MODE"

var _MavDoRepositionFlags_index = [...]uint8{0, 35}

func (i MavDoRepositionFlags) String() string {
	i -= 1
	if i >= MavDoRepositionFlags(len(_MavDoRepositionFlags_index)-1) {
		return "MavDoRepositionFlags(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MavDoRepositionFlags_name[_MavDoRepositionFlags_index[i]:_MavDoRepositionFlags_index[i+1]]
}

const _EstimatorStatusFlags_name = "ESTIMATOR_ATTITUDEESTIMATOR_VELOCITY_HORIZESTIMATOR_VELOCITY_VERTESTIMATOR_POS_HORIZ_RELESTIMATOR_POS_HORIZ_ABSESTIMATOR_POS_VERT_ABSESTIMATOR_POS_VERT_AGLESTIMATOR_CONST_POS_MODEESTIMATOR_PRED_POS_HORIZ_RELESTIMATOR_PRED_POS_HORIZ_ABSESTIMATOR_GPS_GLITCHESTIMATOR_ACCEL_ERROR"

var _EstimatorStatusFlags_map = map[EstimatorStatusFlags]string{
	1:    _EstimatorStatusFlags_name[0:18],
	2:    _EstimatorStatusFlags_name[18:42],
	4:    _EstimatorStatusFlags_name[42:65],
	8:    _EstimatorStatusFlags_name[65:88],
	16:   _EstimatorStatusFlags_name[88:111],
	32:   _EstimatorStatusFlags_name[111:133],
	64:   _EstimatorStatusFlags_name[133:155],
	128:  _EstimatorStatusFlags_name[155:179],
	256:  _EstimatorStatusFlags_name[179:207],
	512:  _EstimatorStatusFlags_name[207:235],
	1024: _EstimatorStatusFlags_name[235:255],
	2048: _EstimatorStatusFlags_name[255:276],
}

func (i EstimatorStatusFlags) String() string {
	if str, ok := _EstimatorStatusFlags_map[i]; ok {
		return str
	}
	return "EstimatorStatusFlags(" + strconv.FormatInt(int64(i), 10) + ")"
}

const _MotorTestOrder_name = "MOTOR_TEST_ORDER_DEFAULTMOTOR_TEST_ORDER_SEQUENCEMOTOR_TEST_ORDER_BOARD"

var _MotorTestOrder_index = [...]uint8{0, 24, 49, 71}

func (i MotorTestOrder) String() string {
	if i >= MotorTestOrder(len(_MotorTestOrder_index)-1) {
		return "MotorTestOrder(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MotorTestOrder_name[_MotorTestOrder_index[i]:_MotorTestOrder_index[i+1]]
}

const _MotorTestThrottleType_name = "MOTOR_TEST_THROTTLE_PERCENTMOTOR_TEST_THROTTLE_PWMMOTOR_TEST_THROTTLE_PILOTMOTOR_TEST_COMPASS_CAL"

var _MotorTestThrottleType_index = [...]uint8{0, 27, 50, 75, 97}

func (i MotorTestThrottleType) String() string {
	if i >= MotorTestThrottleType(len(_MotorTestThrottleType_index)-1) {
		return "MotorTestThrottleType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MotorTestThrottleType_name[_MotorTestThrottleType_index[i]:_MotorTestThrottleType_index[i+1]]
}

const (
	_GpsInputIgnoreFlags_name_0 = "GPS_INPUT_IGNORE_FLAG_ALTGPS_INPUT_IGNORE_FLAG_HDOP"
	_GpsInputIgnoreFlags_name_1 = "GPS_INPUT_IGNORE_FLAG_VDOP"
	_GpsInputIgnoreFlags_name_2 = "GPS_INPUT_IGNORE_FLAG_VEL_HORIZ"
	_GpsInputIgnoreFlags_name_3 = "GPS_INPUT_IGNORE_FLAG_VEL_VERT"
	_GpsInputIgnoreFlags_name_4 = "GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY"
	_GpsInputIgnoreFlags_name_5 = "GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY"
	_GpsInputIgnoreFlags_name_6 = "GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY"
)

var (
	_GpsInputIgnoreFlags_index_0 = [...]uint8{0, 25, 51}
)

func (i GpsInputIgnoreFlags) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _GpsInputIgnoreFlags_name_0[_GpsInputIgnoreFlags_index_0[i]:_GpsInputIgnoreFlags_index_0[i+1]]
	case i == 4:
		return _GpsInputIgnoreFlags_name_1
	case i == 8:
		return _GpsInputIgnoreFlags_name_2
	case i == 16:
		return _GpsInputIgnoreFlags_name_3
	case i == 32:
		return _GpsInputIgnoreFlags_name_4
	case i == 64:
		return _GpsInputIgnoreFlags_name_5
	case i == 128:
		return _GpsInputIgnoreFlags_name_6
	default:
		return "GpsInputIgnoreFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _MavCollisionAction_name = "MAV_COLLISION_ACTION_NONEMAV_COLLISION_ACTION_REPORTMAV_COLLISION_ACTION_ASCEND_OR_DESCENDMAV_COLLISION_ACTION_MOVE_HORIZONTALLYMAV_COLLISION_ACTION_MOVE_PERPENDICULARMAV_COLLISION_ACTION_RTLMAV_COLLISION_ACTION_HOVER"

var _MavCollisionAction_index = [...]uint8{0, 25, 52, 90, 128, 167, 191, 217}

func (i MavCollisionAction) String() string {
	if i >= MavCollisionAction(len(_MavCollisionAction_index)-1) {
		return "MavCollisionAction(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavCollisionAction_name[_MavCollisionAction_index[i]:_MavCollisionAction_index[i+1]]
}

const _MavCollisionThreatLevel_name = "MAV_COLLISION_THREAT_LEVEL_NONEMAV_COLLISION_THREAT_LEVEL_LOWMAV_COLLISION_THREAT_LEVEL_HIGH"

var _MavCollisionThreatLevel_index = [...]uint8{0, 31, 61, 92}

func (i MavCollisionThreatLevel) String() string {
	if i >= MavCollisionThreatLevel(len(_MavCollisionThreatLevel_index)-1) {
		return "MavCollisionThreatLevel(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavCollisionThreatLevel_name[_MavCollisionThreatLevel_index[i]:_MavCollisionThreatLevel_index[i+1]]
}

const _MavCollisionSrc_name = "MAV_COLLISION_SRC_ADSBMAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT"

var _MavCollisionSrc_index = [...]uint8{0, 22, 62}

func (i MavCollisionSrc) String() string {
	if i >= MavCollisionSrc(len(_MavCollisionSrc_index)-1) {
		return "MavCollisionSrc(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavCollisionSrc_name[_MavCollisionSrc_index[i]:_MavCollisionSrc_index[i+1]]
}

const _GpsFixType_name = "GPS_FIX_TYPE_NO_GPSGPS_FIX_TYPE_NO_FIXGPS_FIX_TYPE_2D_FIXGPS_FIX_TYPE_3D_FIXGPS_FIX_TYPE_DGPSGPS_FIX_TYPE_RTK_FLOATGPS_FIX_TYPE_RTK_FIXEDGPS_FIX_TYPE_STATICGPS_FIX_TYPE_PPP"

var _GpsFixType_index = [...]uint8{0, 19, 38, 57, 76, 93, 115, 137, 156, 172}

func (i GpsFixType) String() string {
	if i >= GpsFixType(len(_GpsFixType_index)-1) {
		return "GpsFixType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _GpsFixType_name[_GpsFixType_index[i]:_GpsFixType_index[i+1]]
}

const _RtkBaselineCoordinateSystem_name = "RTK_BASELINE_COORDINATE_SYSTEM_ECEFRTK_BASELINE_COORDINATE_SYSTEM_NED"

var _RtkBaselineCoordinateSystem_index = [...]uint8{0, 35, 69}

func (i RtkBaselineCoordinateSystem) String() string {
	if i >= RtkBaselineCoordinateSystem(len(_RtkBaselineCoordinateSystem_index)-1) {
		return "RtkBaselineCoordinateSystem(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RtkBaselineCoordinateSystem_name[_RtkBaselineCoordinateSystem_index[i]:_RtkBaselineCoordinateSystem_index[i+1]]
}

const _LandingTargetType_name = "LANDING_TARGET_TYPE_LIGHT_BEACONLANDING_TARGET_TYPE_RADIO_BEACONLANDING_TARGET_TYPE_VISION_FIDUCIALLANDING_TARGET_TYPE_VISION_OTHER"

var _LandingTargetType_index = [...]uint8{0, 32, 64, 99, 131}

func (i LandingTargetType) String() string {
	if i >= LandingTargetType(len(_LandingTargetType_index)-1) {
		return "LandingTargetType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LandingTargetType_name[_LandingTargetType_index[i]:_LandingTargetType_index[i+1]]
}

const _VtolTransitionHeading_name = "VTOL_TRANSITION_HEADING_VEHICLE_DEFAULTVTOL_TRANSITION_HEADING_NEXT_WAYPOINTVTOL_TRANSITION_HEADING_TAKEOFFVTOL_TRANSITION_HEADING_SPECIFIEDVTOL_TRANSITION_HEADING_ANY"

var _VtolTransitionHeading_index = [...]uint8{0, 39, 76, 107, 140, 167}

func (i VtolTransitionHeading) String() string {
	if i >= VtolTransitionHeading(len(_VtolTransitionHeading_index)-1) {
		return "VtolTransitionHeading(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _VtolTransitionHeading_name[_VtolTransitionHeading_index[i]:_VtolTransitionHeading_index[i+1]]
}

const (
	_CameraCapFlags_name_0 = "CAMERA_CAP_FLAGS_CAPTURE_VIDEOCAMERA_CAP_FLAGS_CAPTURE_IMAGE"
	_CameraCapFlags_name_1 = "CAMERA_CAP_FLAGS_HAS_MODES"
	_CameraCapFlags_name_2 = "CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE"
	_CameraCapFlags_name_3 = "CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE"
	_CameraCapFlags_name_4 = "CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE"
	_CameraCapFlags_name_5 = "CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM"
	_CameraCapFlags_name_6 = "CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS"
	_CameraCapFlags_name_7 = "CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM"
)

var (
	_CameraCapFlags_index_0 = [...]uint8{0, 30, 60}
)

func (i CameraCapFlags) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _CameraCapFlags_name_0[_CameraCapFlags_index_0[i]:_CameraCapFlags_index_0[i+1]]
	case i == 4:
		return _CameraCapFlags_name_1
	case i == 8:
		return _CameraCapFlags_name_2
	case i == 16:
		return _CameraCapFlags_name_3
	case i == 32:
		return _CameraCapFlags_name_4
	case i == 64:
		return _CameraCapFlags_name_5
	case i == 128:
		return _CameraCapFlags_name_6
	case i == 256:
		return _CameraCapFlags_name_7
	default:
		return "CameraCapFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _VideoStreamStatusFlags_name = "VIDEO_STREAM_STATUS_FLAGS_RUNNINGVIDEO_STREAM_STATUS_FLAGS_THERMAL"

var _VideoStreamStatusFlags_index = [...]uint8{0, 33, 66}

func (i VideoStreamStatusFlags) String() string {
	i -= 1
	if i >= VideoStreamStatusFlags(len(_VideoStreamStatusFlags_index)-1) {
		return "VideoStreamStatusFlags(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _VideoStreamStatusFlags_name[_VideoStreamStatusFlags_index[i]:_VideoStreamStatusFlags_index[i+1]]
}

const _VideoStreamType_name = "VIDEO_STREAM_TYPE_RTSPVIDEO_STREAM_TYPE_RTPUDPVIDEO_STREAM_TYPE_TCP_MPEGVIDEO_STREAM_TYPE_MPEG_TS_H264"

var _VideoStreamType_index = [...]uint8{0, 22, 46, 72, 102}

func (i VideoStreamType) String() string {
	if i >= VideoStreamType(len(_VideoStreamType_index)-1) {
		return "VideoStreamType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _VideoStreamType_name[_VideoStreamType_index[i]:_VideoStreamType_index[i+1]]
}

const _CameraZoomType_name = "ZOOM_TYPE_STEPZOOM_TYPE_CONTINUOUSZOOM_TYPE_RANGE"

var _CameraZoomType_index = [...]uint8{0, 14, 34, 49}

func (i CameraZoomType) String() string {
	if i >= CameraZoomType(len(_CameraZoomType_index)-1) {
		return "CameraZoomType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CameraZoomType_name[_CameraZoomType_index[i]:_CameraZoomType_index[i+1]]
}

const _SetFocusType_name = "FOCUS_TYPE_STEPFOCUS_TYPE_CONTINUOUSFOCUS_TYPE_RANGE"

var _SetFocusType_index = [...]uint8{0, 15, 36, 52}

func (i SetFocusType) String() string {
	if i >= SetFocusType(len(_SetFocusType_index)-1) {
		return "SetFocusType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SetFocusType_name[_SetFocusType_index[i]:_SetFocusType_index[i+1]]
}

const _ParamAck_name = "PARAM_ACK_ACCEPTEDPARAM_ACK_VALUE_UNSUPPORTEDPARAM_ACK_FAILEDPARAM_ACK_IN_PROGRESS"

var _ParamAck_index = [...]uint8{0, 18, 45, 61, 82}

func (i ParamAck) String() string {
	if i >= ParamAck(len(_ParamAck_index)-1) {
		return "ParamAck(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ParamAck_name[_ParamAck_index[i]:_ParamAck_index[i+1]]
}

const _CameraMode_name = "CAMERA_MODE_IMAGECAMERA_MODE_VIDEOCAMERA_MODE_IMAGE_SURVEY"

var _CameraMode_index = [...]uint8{0, 17, 34, 58}

func (i CameraMode) String() string {
	if i >= CameraMode(len(_CameraMode_index)-1) {
		return "CameraMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CameraMode_name[_CameraMode_index[i]:_CameraMode_index[i+1]]
}

const _MavArmAuthDeniedReason_name = "MAV_ARM_AUTH_DENIED_REASON_GENERICMAV_ARM_AUTH_DENIED_REASON_NONEMAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINTMAV_ARM_AUTH_DENIED_REASON_TIMEOUTMAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USEMAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER"

var _MavArmAuthDeniedReason_index = [...]uint8{0, 34, 65, 108, 142, 184, 222}

func (i MavArmAuthDeniedReason) String() string {
	if i >= MavArmAuthDeniedReason(len(_MavArmAuthDeniedReason_index)-1) {
		return "MavArmAuthDeniedReason(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MavArmAuthDeniedReason_name[_MavArmAuthDeniedReason_index[i]:_MavArmAuthDeniedReason_index[i+1]]
}

const _RcType_name = "RC_TYPE_SPEKTRUM_DSM2RC_TYPE_SPEKTRUM_DSMX"

var _RcType_index = [...]uint8{0, 21, 42}

func (i RcType) String() string {
	if i >= RcType(len(_RcType_index)-1) {
		return "RcType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RcType_name[_RcType_index[i]:_RcType_index[i+1]]
}

const _PositionTargetTypemask_name = "POSITION_TARGET_TYPEMASK_X_IGNOREPOSITION_TARGET_TYPEMASK_Y_IGNOREPOSITION_TARGET_TYPEMASK_Z_IGNOREPOSITION_TARGET_TYPEMASK_VX_IGNOREPOSITION_TARGET_TYPEMASK_VY_IGNOREPOSITION_TARGET_TYPEMASK_VZ_IGNOREPOSITION_TARGET_TYPEMASK_AX_IGNOREPOSITION_TARGET_TYPEMASK_AY_IGNOREPOSITION_TARGET_TYPEMASK_AZ_IGNOREPOSITION_TARGET_TYPEMASK_FORCE_SETPOSITION_TARGET_TYPEMASK_YAW_IGNOREPOSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE"

var _PositionTargetTypemask_map = map[PositionTargetTypemask]string{
	1:    _PositionTargetTypemask_name[0:33],
	2:    _PositionTargetTypemask_name[33:66],
	4:    _PositionTargetTypemask_name[66:99],
	8:    _PositionTargetTypemask_name[99:133],
	16:   _PositionTargetTypemask_name[133:167],
	32:   _PositionTargetTypemask_name[167:201],
	64:   _PositionTargetTypemask_name[201:235],
	128:  _PositionTargetTypemask_name[235:269],
	256:  _PositionTargetTypemask_name[269:303],
	512:  _PositionTargetTypemask_name[303:337],
	1024: _PositionTargetTypemask_name[337:372],
	2048: _PositionTargetTypemask_name[372:412],
}

func (i PositionTargetTypemask) String() string {
	if str, ok := _PositionTargetTypemask_map[i]; ok {
		return str
	}
	return "PositionTargetTypemask(" + strconv.FormatInt(int64(i), 10) + ")"
}

const (
	_UtmFlightState_name_0 = "UTM_FLIGHT_STATE_UNKNOWNUTM_FLIGHT_STATE_GROUNDUTM_FLIGHT_STATE_AIRBORNE"
	_UtmFlightState_name_1 = "UTM_FLIGHT_STATE_EMERGENCY"
	_UtmFlightState_name_2 = "UTM_FLIGHT_STATE_NOCTRL"
)

var (
	_UtmFlightState_index_0 = [...]uint8{0, 24, 47, 72}
)

func (i UtmFlightState) String() string {
	switch {
	case 1 <= i && i <= 3:
		i -= 1
		return _UtmFlightState_name_0[_UtmFlightState_index_0[i]:_UtmFlightState_index_0[i+1]]
	case i == 16:
		return _UtmFlightState_name_1
	case i == 32:
		return _UtmFlightState_name_2
	default:
		return "UtmFlightState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const (
	_UtmDataAvailFlags_name_0 = "UTM_DATA_AVAIL_FLAGS_TIME_VALIDUTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE"
	_UtmDataAvailFlags_name_1 = "UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE"
	_UtmDataAvailFlags_name_2 = "UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE"
	_UtmDataAvailFlags_name_3 = "UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE"
	_UtmDataAvailFlags_name_4 = "UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE"
	_UtmDataAvailFlags_name_5 = "UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE"
	_UtmDataAvailFlags_name_6 = "UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE"
)

var (
	_UtmDataAvailFlags_index_0 = [...]uint8{0, 31, 68}
)

func (i UtmDataAvailFlags) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _UtmDataAvailFlags_name_0[_UtmDataAvailFlags_index_0[i]:_UtmDataAvailFlags_index_0[i+1]]
	case i == 4:
		return _UtmDataAvailFlags_name_1
	case i == 8:
		return _UtmDataAvailFlags_name_2
	case i == 16:
		return _UtmDataAvailFlags_name_3
	case i == 32:
		return _UtmDataAvailFlags_name_4
	case i == 64:
		return _UtmDataAvailFlags_name_5
	case i == 128:
		return _UtmDataAvailFlags_name_6
	default:
		return "UtmDataAvailFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

const _CellularNetworkRadioType_name = "CELLULAR_NETWORK_RADIO_TYPE_NONECELLULAR_NETWORK_RADIO_TYPE_GSMCELLULAR_NETWORK_RADIO_TYPE_CDMACELLULAR_NETWORK_RADIO_TYPE_WCDMACELLULAR_NETWORK_RADIO_TYPE_LTE"

var _CellularNetworkRadioType_index = [...]uint8{0, 32, 63, 95, 128, 159}

func (i CellularNetworkRadioType) String() string {
	if i >= CellularNetworkRadioType(len(_CellularNetworkRadioType_index)-1) {
		return "CellularNetworkRadioType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CellularNetworkRadioType_name[_CellularNetworkRadioType_index[i]:_CellularNetworkRadioType_index[i+1]]
}

const _CellularNetworkStatusFlag_name = "CELLULAR_NETWORK_STATUS_FLAG_ROAMING"

var _CellularNetworkStatusFlag_index = [...]uint8{0, 36}

func (i CellularNetworkStatusFlag) String() string {
	i -= 1
	if i >= CellularNetworkStatusFlag(len(_CellularNetworkStatusFlag_index)-1) {
		return "CellularNetworkStatusFlag(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CellularNetworkStatusFlag_name[_CellularNetworkStatusFlag_index[i]:_CellularNetworkStatusFlag_index[i+1]]
}

const _PrecisionLandMode_name = "PRECISION_LAND_MODE_DISABLEDPRECISION_LAND_MODE_OPPORTUNISTICPRECISION_LAND_MODE_REQUIRED"

var _PrecisionLandMode_index = [...]uint8{0, 28, 61, 89}

func (i PrecisionLandMode) String() string {
	if i >= PrecisionLandMode(len(_PrecisionLandMode_index)-1) {
		return "PrecisionLandMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PrecisionLandMode_name[_PrecisionLandMode_index[i]:_PrecisionLandMode_index[i+1]]
}

const _ParachuteAction_name = "PARACHUTE_DISABLEPARACHUTE_ENABLEPARACHUTE_RELEASE"

var _ParachuteAction_index = [...]uint8{0, 17, 33, 50}

func (i ParachuteAction) String() string {
	if i >= ParachuteAction(len(_ParachuteAction_index)-1) {
		return "ParachuteAction(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ParachuteAction_name[_ParachuteAction_index[i]:_ParachuteAction_index[i+1]]
}
