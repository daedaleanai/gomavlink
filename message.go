package mavlink

import "fmt"

type Protocol int

const (
	V2       Protocol = iota // 0 is default
	V1                       // 1 : fallback to V1
	V2Signed                 // 2 : sign
)

// Message is the interface implemented by the structs generated by mavgen from the XML dialect definitions.
type Message interface {
	ID() int
	CRCExtra() byte
	MarshalV1([]byte) []byte
	MarshalV2([]byte) []byte
	UnmarshalV1([]byte) []byte
	UnmarshalV2([]byte) []byte
}

// A StreamID encodes link/system/component bytes in a single uint.
type StreamID uint32

func Stream(sysId, compId, linkId byte) StreamID {
	return StreamID(sysId)<<16 | StreamID(compId)<<8 | StreamID(linkId)
}
func (s StreamID) SysID() uint8   { return uint8(s >> 16) }
func (s StreamID) CompID() uint8  { return uint8(s >> 8) }
func (s StreamID) LinkID() uint8  { return uint8(s) }
func (s StreamID) String() string { return fmt.Sprintf("(%d.%d.%d)", s.SysID(), s.CompID(), s.LinkID()) }
