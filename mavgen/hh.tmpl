#pragma once

// Generated enums and structures for Mavlink dialect {{.Name}} #{{.Dialect}} version {{.Version}}
// Generated by gomavlink, DO NOT EDIT.

#include <cstdint>

namespace mavlink {
namespace {{lower .Name}} {

{{range .Enums}}
{{- $tpe := underscoreToCamel .Name}}
{{if .Description}}/* {{notabs .Description}} */{{end}}
enum {{$tpe}} {
{{- range $i, $v := .Entries -}}{{if $i}},{{end}}
	{{if $v.Description}}/* {{notabs $v.Description}} */{{end}}
	{{upper $v.Name}} = {{$v.Value}} 
{{- end}}
};
{{end}}

{{range .Messages}}
{{- $tpe := underscoreToCamel .Name}}
{{if .Description}}/* {{notabs .Description}} */{{end}}
struct {{$tpe}} {
{{- range .Fields}}
	/* {{notabs .Description}} */
	{{if .Enum -}} {{underscoreToCamel .Enum}} {{- else -}} {{cscalartype .CType}} {{- end}} {{underscoreToCamel .Name}}
	{{- if goarraysize .CType}}[{{goarraysize .CType}}]{{end}}; 
	{{- if or .Enum .IsExtension}}	//{{end}} {{if .Enum -}}({{.CType}}){{end}} {{if .IsExtension}}EXTENSION{{end}}
{{end}}

	int id() { return {{.ID}}; }
	uint8_t crcextra() { return {{.CRCExtra}}; }
};

{{end}}



{{if .Messages}}
// The Dialect factory function constructs the proper empty message given the message ID.
void* Dialect(int mid) {
	switch (mid) {
{{- range .Messages}}
	case {{.ID}}: return new {{underscoreToCamel .Name}};
{{- end}}
	}
	return 0;
}
{{end}}


} // {{lower .Name}}
} // namespace mavlink
