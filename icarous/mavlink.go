// Generated enums and structures for Mavlink dialect icarous #0 version 0
package icarous

// Generated by gomavlink, DO NOT EDIT.

import (
	"math"

	mavlink "github.com/daedaleanai/gomavlink"
)

//go:generate stringer -output strings.go -type=IcarousTrackBandTypes,IcarousFmsState

type IcarousTrackBandTypes uint32

const (
	ICAROUS_TRACK_BAND_TYPE_NONE IcarousTrackBandTypes = 0

	ICAROUS_TRACK_BAND_TYPE_NEAR IcarousTrackBandTypes = 1

	ICAROUS_TRACK_BAND_TYPE_RECOVERY IcarousTrackBandTypes = 2
)

type IcarousFmsState uint32

const (
	ICAROUS_FMS_STATE_IDLE IcarousFmsState = 0

	ICAROUS_FMS_STATE_TAKEOFF IcarousFmsState = 1

	ICAROUS_FMS_STATE_CLIMB IcarousFmsState = 2

	ICAROUS_FMS_STATE_CRUISE IcarousFmsState = 3

	ICAROUS_FMS_STATE_APPROACH IcarousFmsState = 4

	ICAROUS_FMS_STATE_LAND IcarousFmsState = 5
)

func New(mid int) mavlink.Message {
	switch mid {
	case 42000:
		return &IcarousHeartbeat{}
	case 42001:
		return &IcarousKinematicBands{}
	}
	return nil
}

/* ICAROUS heartbeat */
type IcarousHeartbeat struct {
	/* See the FMS_STATE enum. */
	Status IcarousFmsState // byte

}

func (m *IcarousHeartbeat) ID() int        { return 42000 }
func (m *IcarousHeartbeat) CRCExtra() byte { return 227 }

func (m *IcarousHeartbeat) MarshalV1(buf []byte) []byte {
	buf = marshalByte(buf, byte(m.Status))

	return buf
}

func (m *IcarousHeartbeat) MarshalV2(buf []byte) []byte {
	buf = m.MarshalV1(buf)

	return buf
}

func (m *IcarousHeartbeat) UnmarshalV1(buf []byte) []byte {
	{
		var v byte
		buf, v = unmarshalByte(buf)
		m.Status = IcarousFmsState(v)
	}

	return buf
}

func (m *IcarousHeartbeat) UnmarshalV2(buf []byte) []byte {
	buf = m.UnmarshalV1(buf)

	return buf
}

/* Kinematic multi bands (track) output from Daidalus */
type IcarousKinematicBands struct {
	/* min angle (degrees) */
	Min1 float32

	/* max angle (degrees) */
	Max1 float32

	/* min angle (degrees) */
	Min2 float32

	/* max angle (degrees) */
	Max2 float32

	/* min angle (degrees) */
	Min3 float32

	/* max angle (degrees) */
	Max3 float32

	/* min angle (degrees) */
	Min4 float32

	/* max angle (degrees) */
	Max4 float32

	/* min angle (degrees) */
	Min5 float32

	/* max angle (degrees) */
	Max5 float32

	/* Number of track bands */
	Numbands int8

	/* See the TRACK_BAND_TYPES enum. */
	Type1 IcarousTrackBandTypes // byte

	/* See the TRACK_BAND_TYPES enum. */
	Type2 IcarousTrackBandTypes // byte

	/* See the TRACK_BAND_TYPES enum. */
	Type3 IcarousTrackBandTypes // byte

	/* See the TRACK_BAND_TYPES enum. */
	Type4 IcarousTrackBandTypes // byte

	/* See the TRACK_BAND_TYPES enum. */
	Type5 IcarousTrackBandTypes // byte

}

func (m *IcarousKinematicBands) ID() int        { return 42001 }
func (m *IcarousKinematicBands) CRCExtra() byte { return 239 }

func (m *IcarousKinematicBands) MarshalV1(buf []byte) []byte {
	buf = marshalFloat32(buf, (m.Min1))
	buf = marshalFloat32(buf, (m.Max1))
	buf = marshalFloat32(buf, (m.Min2))
	buf = marshalFloat32(buf, (m.Max2))
	buf = marshalFloat32(buf, (m.Min3))
	buf = marshalFloat32(buf, (m.Max3))
	buf = marshalFloat32(buf, (m.Min4))
	buf = marshalFloat32(buf, (m.Max4))
	buf = marshalFloat32(buf, (m.Min5))
	buf = marshalFloat32(buf, (m.Max5))
	buf = marshalInt8(buf, (m.Numbands))
	buf = marshalByte(buf, byte(m.Type1))
	buf = marshalByte(buf, byte(m.Type2))
	buf = marshalByte(buf, byte(m.Type3))
	buf = marshalByte(buf, byte(m.Type4))
	buf = marshalByte(buf, byte(m.Type5))

	return buf
}

func (m *IcarousKinematicBands) MarshalV2(buf []byte) []byte {
	buf = m.MarshalV1(buf)

	return buf
}

func (m *IcarousKinematicBands) UnmarshalV1(buf []byte) []byte {
	buf, m.Min1 = unmarshalFloat32(buf)

	buf, m.Max1 = unmarshalFloat32(buf)

	buf, m.Min2 = unmarshalFloat32(buf)

	buf, m.Max2 = unmarshalFloat32(buf)

	buf, m.Min3 = unmarshalFloat32(buf)

	buf, m.Max3 = unmarshalFloat32(buf)

	buf, m.Min4 = unmarshalFloat32(buf)

	buf, m.Max4 = unmarshalFloat32(buf)

	buf, m.Min5 = unmarshalFloat32(buf)

	buf, m.Max5 = unmarshalFloat32(buf)

	buf, m.Numbands = unmarshalInt8(buf)

	{
		var v byte
		buf, v = unmarshalByte(buf)
		m.Type1 = IcarousTrackBandTypes(v)
	}

	{
		var v byte
		buf, v = unmarshalByte(buf)
		m.Type2 = IcarousTrackBandTypes(v)
	}

	{
		var v byte
		buf, v = unmarshalByte(buf)
		m.Type3 = IcarousTrackBandTypes(v)
	}

	{
		var v byte
		buf, v = unmarshalByte(buf)
		m.Type4 = IcarousTrackBandTypes(v)
	}

	{
		var v byte
		buf, v = unmarshalByte(buf)
		m.Type5 = IcarousTrackBandTypes(v)
	}

	return buf
}

func (m *IcarousKinematicBands) UnmarshalV2(buf []byte) []byte {
	buf = m.UnmarshalV1(buf)

	return buf
}

// These will be inlined.
func marshalByte(b []byte, v byte) []byte     { return append(b, v) }
func marshalInt8(b []byte, v int8) []byte     { return append(b, byte(v)) }
func marshalInt16(b []byte, v int16) []byte   { return append(b, byte(v), byte(v>>8)) }
func marshalUint16(b []byte, v uint16) []byte { return append(b, byte(v), byte(v>>8)) }
func marshalInt32(b []byte, v int32) []byte {
	return append(b, byte(v), byte(v>>8), byte(v>>16), byte(v>>24))
}
func marshalUint32(b []byte, v uint32) []byte {
	return append(b, byte(v), byte(v>>8), byte(v>>16), byte(v>>24))
}
func marshalInt64(b []byte, v int64) []byte {
	return append(b, byte(v), byte(v>>8), byte(v>>16), byte(v>>24), byte(v>>32), byte(v>>40), byte(v>>48), byte(v>>56))
}
func marshalUint64(b []byte, v uint64) []byte {
	return append(b, byte(v), byte(v>>8), byte(v>>16), byte(v>>24), byte(v>>32), byte(v>>40), byte(v>>48), byte(v>>56))
}
func marshalFloat32(b []byte, v float32) []byte { return marshalUint32(b, math.Float32bits(v)) }
func marshalFloat64(b []byte, v float64) []byte { return marshalUint64(b, math.Float64bits(v)) }

func unmarshalByte(b []byte) ([]byte, byte)     { return b[1:], b[0] }
func unmarshalInt8(b []byte) ([]byte, int8)     { return b[1:], int8(b[0]) }
func unmarshalInt16(b []byte) ([]byte, int16)   { return b[2:], int16(b[0]) | int16(b[1])<<8 }
func unmarshalUint16(b []byte) ([]byte, uint16) { return b[2:], uint16(b[0]) | uint16(b[1])<<8 }
func unmarshalInt32(b []byte) ([]byte, int32) {
	return b[4:], int32(b[0]) | int32(b[1])<<8 | int32(b[2])<<16 | int32(b[3])<<24
}
func unmarshalUint32(b []byte) ([]byte, uint32) {
	return b[4:], uint32(b[0]) | uint32(b[1])<<8 | uint32(b[2])<<16 | uint32(b[3])<<24
}
func unmarshalInt64(b []byte) ([]byte, int64) {
	return b[8:], int64(b[0]) | int64(b[1])<<8 | int64(b[2])<<16 | int64(b[3])<<24 | int64(b[4])<<32 | int64(b[5])<<40 | int64(b[6])<<48 | int64(b[7])<<56
}
func unmarshalUint64(b []byte) ([]byte, uint64) {
	return b[8:], uint64(b[0]) | uint64(b[1])<<8 | uint64(b[2])<<16 | uint64(b[3])<<24 | uint64(b[4])<<32 | uint64(b[5])<<40 | uint64(b[6])<<48 | uint64(b[7])<<56
}
func unmarshalFloat32(b []byte) ([]byte, float32) {
	b, v := unmarshalUint32(b)
	return b, math.Float32frombits(v)
}
func unmarshalFloat64(b []byte) ([]byte, float64) {
	b, v := unmarshalUint64(b)
	return b, math.Float64frombits(v)
}
