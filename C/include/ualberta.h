#pragma once

// Generated enums and structures for Mavlink dialect ualberta #0 version 3
// Generated by gomavlink, DO NOT EDIT.

#include <stddef.h>
#include <stdint.h>

/* Available autopilot modes for ualberta uav */
enum UALBERTA_AUTOPILOT_MODE {
  /* Raw input pulse widts sent to output */
  MODE_MANUAL_DIRECT = 1,
  /* Inputs are normalized using calibration, the converted back to raw pulse
     widths for output */
  MODE_MANUAL_SCALED = 2,
  /*  dfsdfs */
  MODE_AUTO_PID_ATT = 3,
  /*  dfsfds */
  MODE_AUTO_PID_VEL = 4,
  /*  dfsdfsdfs */
  MODE_AUTO_PID_POS = 5
};

/* Navigation filter mode */
enum UALBERTA_NAV_MODE {
  NAV_AHRS_INIT = 1,
  /* AHRS mode */
  NAV_AHRS = 2,
  /* INS/GPS initialization mode */
  NAV_INS_GPS_INIT = 3,
  /* INS/GPS mode */
  NAV_INS_GPS = 4
};

/* Mode currently commanded by pilot */
enum UALBERTA_PILOT_MODE {
  /*  sdf */
  PILOT_MANUAL = 1,
  /*  dfs */
  PILOT_AUTO = 2,
  /*  Rotomotion mode  */
  PILOT_ROTO = 3
};

/* Micro air vehicle / autopilot classes. This identifies the individual model.
 */
enum MAV_AUTOPILOT {
  /* Generic autopilot, full support for everything */
  MAV_AUTOPILOT_GENERIC = 0,
  /* Reserved for future use. */
  MAV_AUTOPILOT_RESERVED = 1,
  /* SLUGS autopilot, http://slugsuav.soe.ucsc.edu */
  MAV_AUTOPILOT_SLUGS = 2,
  /* ArduPilot - Plane/Copter/Rover/Sub/Tracker, http://ardupilot.org */
  MAV_AUTOPILOT_ARDUPILOTMEGA = 3,
  /* OpenPilot, http://openpilot.org */
  MAV_AUTOPILOT_OPENPILOT = 4,
  /* Generic autopilot only supporting simple waypoints */
  MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY = 5,
  /* Generic autopilot supporting waypoints and other simple navigation commands
   */
  MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY = 6,
  /* Generic autopilot supporting the full mission command set */
  MAV_AUTOPILOT_GENERIC_MISSION_FULL = 7,
  /* No valid autopilot, e.g. a GCS or other MAVLink component */
  MAV_AUTOPILOT_INVALID = 8,
  /* PPZ UAV - http://nongnu.org/paparazzi */
  MAV_AUTOPILOT_PPZ = 9,
  /* UAV Dev Board */
  MAV_AUTOPILOT_UDB = 10,
  /* FlexiPilot */
  MAV_AUTOPILOT_FP = 11,
  /* PX4 Autopilot - http://px4.io/ */
  MAV_AUTOPILOT_PX4 = 12,
  /* SMACCMPilot - http://smaccmpilot.org */
  MAV_AUTOPILOT_SMACCMPILOT = 13,
  /* AutoQuad -- http://autoquad.org */
  MAV_AUTOPILOT_AUTOQUAD = 14,
  /* Armazila -- http://armazila.com */
  MAV_AUTOPILOT_ARMAZILA = 15,
  /* Aerob -- http://aerob.ru */
  MAV_AUTOPILOT_AEROB = 16,
  /* ASLUAV autopilot -- http://www.asl.ethz.ch */
  MAV_AUTOPILOT_ASLUAV = 17,
  /* SmartAP Autopilot - http://sky-drones.com */
  MAV_AUTOPILOT_SMARTAP = 18,
  /* AirRails - http://uaventure.com */
  MAV_AUTOPILOT_AIRRAILS = 19
};

/* MAVLINK system type. All components in a system should report this type in
 * their HEARTBEAT. */
enum MAV_TYPE {
  /* Generic micro air vehicle. */
  MAV_TYPE_GENERIC = 0,
  /* Fixed wing aircraft. */
  MAV_TYPE_FIXED_WING = 1,
  /* Quadrotor */
  MAV_TYPE_QUADROTOR = 2,
  /* Coaxial helicopter */
  MAV_TYPE_COAXIAL = 3,
  /* Normal helicopter with tail rotor. */
  MAV_TYPE_HELICOPTER = 4,
  /* Ground installation */
  MAV_TYPE_ANTENNA_TRACKER = 5,
  /* Operator control unit / ground control station */
  MAV_TYPE_GCS = 6,
  /* Airship, controlled */
  MAV_TYPE_AIRSHIP = 7,
  /* Free balloon, uncontrolled */
  MAV_TYPE_FREE_BALLOON = 8,
  /* Rocket */
  MAV_TYPE_ROCKET = 9,
  /* Ground rover */
  MAV_TYPE_GROUND_ROVER = 10,
  /* Surface vessel, boat, ship */
  MAV_TYPE_SURFACE_BOAT = 11,
  /* Submarine */
  MAV_TYPE_SUBMARINE = 12,
  /* Hexarotor */
  MAV_TYPE_HEXAROTOR = 13,
  /* Octorotor */
  MAV_TYPE_OCTOROTOR = 14,
  /* Tricopter */
  MAV_TYPE_TRICOPTER = 15,
  /* Flapping wing */
  MAV_TYPE_FLAPPING_WING = 16,
  /* Kite */
  MAV_TYPE_KITE = 17,
  /* Onboard companion controller */
  MAV_TYPE_ONBOARD_CONTROLLER = 18,
  /* Two-rotor VTOL using control surfaces in vertical operation in addition.
     Tailsitter. */
  MAV_TYPE_VTOL_DUOROTOR = 19,
  /* Quad-rotor VTOL using a V-shaped quad config in vertical operation.
     Tailsitter. */
  MAV_TYPE_VTOL_QUADROTOR = 20,
  /* Tiltrotor VTOL */
  MAV_TYPE_VTOL_TILTROTOR = 21,
  /* VTOL reserved 2 */
  MAV_TYPE_VTOL_RESERVED2 = 22,
  /* VTOL reserved 3 */
  MAV_TYPE_VTOL_RESERVED3 = 23,
  /* VTOL reserved 4 */
  MAV_TYPE_VTOL_RESERVED4 = 24,
  /* VTOL reserved 5 */
  MAV_TYPE_VTOL_RESERVED5 = 25,
  /* Gimbal (standalone) */
  MAV_TYPE_GIMBAL = 26,
  /* ADSB system (standalone) */
  MAV_TYPE_ADSB = 27,
  /* Steerable, nonrigid airfoil */
  MAV_TYPE_PARAFOIL = 28,
  /* Dodecarotor */
  MAV_TYPE_DODECAROTOR = 29,
  /* Camera (standalone) */
  MAV_TYPE_CAMERA = 30,
  /* Charging station */
  MAV_TYPE_CHARGING_STATION = 31,
  /* FLARM collision avoidance system (standalone) */
  MAV_TYPE_FLARM = 32
};

/* These values define the type of firmware release.  These values indicate the
 * first version or release of this type.  For example the first alpha release
 * would be 64, the second would be 65. */
enum FIRMWARE_VERSION_TYPE {
  /* development release */
  FIRMWARE_VERSION_TYPE_DEV = 0,
  /* alpha release */
  FIRMWARE_VERSION_TYPE_ALPHA = 64,
  /* beta release */
  FIRMWARE_VERSION_TYPE_BETA = 128,
  /* release candidate */
  FIRMWARE_VERSION_TYPE_RC = 192,
  /* official stable release */
  FIRMWARE_VERSION_TYPE_OFFICIAL = 255
};

/* Flags to report failure cases over the high latency telemtry. */
enum HL_FAILURE_FLAG {
  /* GPS failure. */
  HL_FAILURE_FLAG_GPS = 1,
  /* Differential pressure sensor failure. */
  HL_FAILURE_FLAG_DIFFERENTIAL_PRESSURE = 2,
  /* Absolute pressure sensor failure. */
  HL_FAILURE_FLAG_ABSOLUTE_PRESSURE = 4,
  /* Accelerometer sensor failure. */
  HL_FAILURE_FLAG_3D_ACCEL = 8,
  /* Gyroscope sensor failure. */
  HL_FAILURE_FLAG_3D_GYRO = 16,
  /* Magnetometer sensor failure. */
  HL_FAILURE_FLAG_3D_MAG = 32,
  /* Terrain subsystem failure. */
  HL_FAILURE_FLAG_TERRAIN = 64,
  /* Battery failure/critical low battery. */
  HL_FAILURE_FLAG_BATTERY = 128,
  /* RC receiver failure/no rc connection. */
  HL_FAILURE_FLAG_RC_RECEIVER = 256,
  /* Offboard link failure. */
  HL_FAILURE_FLAG_OFFBOARD_LINK = 512,
  /* Engine failure. */
  HL_FAILURE_FLAG_ENGINE = 1024,
  /* Geofence violation. */
  HL_FAILURE_FLAG_GEOFENCE = 2048,
  /* Estimator failure, for example measurement rejection or large variances. */
  HL_FAILURE_FLAG_ESTIMATOR = 4096,
  /* Mission failure. */
  HL_FAILURE_FLAG_MISSION = 8192
};

/* These flags encode the MAV mode. */
enum MAV_MODE_FLAG {
  /* 0b10000000 MAV safety set to armed. Motors are enabled / running / can
     start. Ready to fly. Additional note: this flag is to be ignore when sent
     in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall
     be used instead. The flag can still be used to report the armed state. */
  MAV_MODE_FLAG_SAFETY_ARMED = 128,
  /* 0b01000000 remote control input is enabled. */
  MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64,
  /* 0b00100000 hardware in the loop simulation. All motors / actuators are
     blocked, but internal software is full operational. */
  MAV_MODE_FLAG_HIL_ENABLED = 32,
  /* 0b00010000 system stabilizes electronically its attitude (and optionally
     position). It needs however further control inputs to move around. */
  MAV_MODE_FLAG_STABILIZE_ENABLED = 16,
  /* 0b00001000 guided mode enabled, system flies waypoints / mission items. */
  MAV_MODE_FLAG_GUIDED_ENABLED = 8,
  /* 0b00000100 autonomous mode enabled, system finds its own goal positions.
     Guided flag can be set or not, depends on the actual implementation. */
  MAV_MODE_FLAG_AUTO_ENABLED = 4,
  /* 0b00000010 system has a test mode enabled. This flag is intended for
     temporary system tests and should not be used for stable implementations.
   */
  MAV_MODE_FLAG_TEST_ENABLED = 2,
  /* 0b00000001 Reserved for future use. */
  MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1
};

/* These values encode the bit positions of the decode position. These values
 * can be used to read the value of a flag bit by combining the base_mode
 * variable with AND with the flag position value. The result will be either 0
 * or 1, depending on if the flag is set or not. */
enum MAV_MODE_FLAG_DECODE_POSITION {
  /* First bit:  10000000 */
  MAV_MODE_FLAG_DECODE_POSITION_SAFETY = 128,
  /* Second bit: 01000000 */
  MAV_MODE_FLAG_DECODE_POSITION_MANUAL = 64,
  /* Third bit:  00100000 */
  MAV_MODE_FLAG_DECODE_POSITION_HIL = 32,
  /* Fourth bit: 00010000 */
  MAV_MODE_FLAG_DECODE_POSITION_STABILIZE = 16,
  /* Fifth bit:  00001000 */
  MAV_MODE_FLAG_DECODE_POSITION_GUIDED = 8,
  /* Sixth bit:   00000100 */
  MAV_MODE_FLAG_DECODE_POSITION_AUTO = 4,
  /* Seventh bit: 00000010 */
  MAV_MODE_FLAG_DECODE_POSITION_TEST = 2,
  /* Eighth bit: 00000001 */
  MAV_MODE_FLAG_DECODE_POSITION_CUSTOM_MODE = 1
};

/* Actions that may be specified in MAV_CMD_OVERRIDE_GOTO to override mission
 * execution. */
enum MAV_GOTO {
  /* Hold at the current position. */
  MAV_GOTO_DO_HOLD = 0,
  /* Continue with the next item in mission execution. */
  MAV_GOTO_DO_CONTINUE = 1,
  /* Hold at the current position of the system */
  MAV_GOTO_HOLD_AT_CURRENT_POSITION = 2,
  /* Hold at the position specified in the parameters of the DO_HOLD action */
  MAV_GOTO_HOLD_AT_SPECIFIED_POSITION = 3
};

/* These defines are predefined OR-combined mode flags. There is no need to use
 * values from this enum, but it                simplifies the use of the mode
 * flags. Note that manual input is enabled in all modes as a safety override.
 */
enum MAV_MODE {
  /* System is not ready to fly, booting, calibrating, etc. No flag is set. */
  MAV_MODE_PREFLIGHT = 0,
  /* System is allowed to be active, under assisted RC control. */
  MAV_MODE_STABILIZE_DISARMED = 80,
  /* System is allowed to be active, under assisted RC control. */
  MAV_MODE_STABILIZE_ARMED = 208,
  /* System is allowed to be active, under manual (RC) control, no stabilization
   */
  MAV_MODE_MANUAL_DISARMED = 64,
  /* System is allowed to be active, under manual (RC) control, no stabilization
   */
  MAV_MODE_MANUAL_ARMED = 192,
  /* System is allowed to be active, under autonomous control, manual setpoint
   */
  MAV_MODE_GUIDED_DISARMED = 88,
  /* System is allowed to be active, under autonomous control, manual setpoint
   */
  MAV_MODE_GUIDED_ARMED = 216,
  /* System is allowed to be active, under autonomous control and navigation
     (the trajectory is decided onboard and not pre-programmed by waypoints) */
  MAV_MODE_AUTO_DISARMED = 92,
  /* System is allowed to be active, under autonomous control and navigation
     (the trajectory is decided onboard and not pre-programmed by waypoints) */
  MAV_MODE_AUTO_ARMED = 220,
  /* UNDEFINED mode. This solely depends on the autopilot - use with caution,
     intended for developers only. */
  MAV_MODE_TEST_DISARMED = 66,
  /* UNDEFINED mode. This solely depends on the autopilot - use with caution,
     intended for developers only. */
  MAV_MODE_TEST_ARMED = 194
};

enum MAV_STATE {
  /* Uninitialized system, state is unknown. */
  MAV_STATE_UNINIT = 0,
  /* System is booting up. */
  MAV_STATE_BOOT = 1,
  /* System is calibrating and not flight-ready. */
  MAV_STATE_CALIBRATING = 2,
  /* System is grounded and on standby. It can be launched any time. */
  MAV_STATE_STANDBY = 3,
  /* System is active and might be already airborne. Motors are engaged. */
  MAV_STATE_ACTIVE = 4,
  /* System is in a non-normal flight mode. It can however still navigate. */
  MAV_STATE_CRITICAL = 5,
  /* System is in a non-normal flight mode. It lost control over parts or over
     the whole airframe. It is in mayday and going down. */
  MAV_STATE_EMERGENCY = 6,
  /* System just initialized its power-down sequence, will shut down now. */
  MAV_STATE_POWEROFF = 7,
  /* System is terminating itself. */
  MAV_STATE_FLIGHT_TERMINATION = 8
};

/* Component ids (values) for the different types and instances of onboard
 * hardware/software that might make up a MAVLink system (autopilot, cameras,
 * servos, GPS systems, avoidance systems etc.).       Components must use the
 * appropriate ID in their source address when sending messages. Components can
 * also use IDs to determine if they are the intended recipient of an incoming
 * message. The MAV_COMP_ID_ALL value is used to indicate messages that must be
 * processed by all components.       When creating new entries, components that
 * can have multiple instances (e.g. cameras, servos etc.) should be allocated
 * sequential values. An appropriate number of values should be left free after
 * these components to allow the number of instances to be expanded. */
enum MAV_COMPONENT {
  /* Used to broadcast messages to all components of the receiving system.
     Components should attempt to process messages with this component ID and
     forward to components on any other interfaces. */
  MAV_COMP_ID_ALL = 0,
  /* System flight controller component ("autopilot"). Only one autopilot is
     expected in a particular system. */
  MAV_COMP_ID_AUTOPILOT1 = 1,
  /* Camera #1. */
  MAV_COMP_ID_CAMERA = 100,
  /* Camera #2. */
  MAV_COMP_ID_CAMERA2 = 101,
  /* Camera #3. */
  MAV_COMP_ID_CAMERA3 = 102,
  /* Camera #4. */
  MAV_COMP_ID_CAMERA4 = 103,
  /* Camera #5. */
  MAV_COMP_ID_CAMERA5 = 104,
  /* Camera #6. */
  MAV_COMP_ID_CAMERA6 = 105,
  /* Servo #1. */
  MAV_COMP_ID_SERVO1 = 140,
  /* Servo #2. */
  MAV_COMP_ID_SERVO2 = 141,
  /* Servo #3. */
  MAV_COMP_ID_SERVO3 = 142,
  /* Servo #4. */
  MAV_COMP_ID_SERVO4 = 143,
  /* Servo #5. */
  MAV_COMP_ID_SERVO5 = 144,
  /* Servo #6. */
  MAV_COMP_ID_SERVO6 = 145,
  /* Servo #7. */
  MAV_COMP_ID_SERVO7 = 146,
  /* Servo #8. */
  MAV_COMP_ID_SERVO8 = 147,
  /* Servo #9. */
  MAV_COMP_ID_SERVO9 = 148,
  /* Servo #10. */
  MAV_COMP_ID_SERVO10 = 149,
  /* Servo #11. */
  MAV_COMP_ID_SERVO11 = 150,
  /* Servo #12. */
  MAV_COMP_ID_SERVO12 = 151,
  /* Servo #13. */
  MAV_COMP_ID_SERVO13 = 152,
  /* Servo #14. */
  MAV_COMP_ID_SERVO14 = 153,
  /* Gimbal component. */
  MAV_COMP_ID_GIMBAL = 154,
  /* Logging component. */
  MAV_COMP_ID_LOG = 155,
  /* Automatic Dependent Surveillance-Broadcast (ADS-B) component. */
  MAV_COMP_ID_ADSB = 156,
  /* On Screen Display (OSD) devices for video links. */
  MAV_COMP_ID_OSD = 157,
  /* Generic autopilot peripheral component ID. Meant for devices that do not
     implement the parameter microservice. */
  MAV_COMP_ID_PERIPHERAL = 158,
  /* Gimbal ID for QX1. */
  MAV_COMP_ID_QX1_GIMBAL = 159,
  /* FLARM collision alert component. */
  MAV_COMP_ID_FLARM = 160,
  /* Component that can generate/supply a mission flight plan (e.g. GCS or
     developer API). */
  MAV_COMP_ID_MISSIONPLANNER = 190,
  /* Component that finds an optimal path between points based on a certain
     constraint (e.g. minimum snap, shortest path, cost, etc.). */
  MAV_COMP_ID_PATHPLANNER = 195,
  /* Component that plans a collision free path between two points. */
  MAV_COMP_ID_OBSTACLE_AVOIDANCE = 196,
  /* Component that provides position estimates using VIO techniques. */
  MAV_COMP_ID_VISUAL_INERTIAL_ODOMETRY = 197,
  /* Inertial Measurement Unit (IMU) #1. */
  MAV_COMP_ID_IMU = 200,
  /* Inertial Measurement Unit (IMU) #2. */
  MAV_COMP_ID_IMU_2 = 201,
  /* Inertial Measurement Unit (IMU) #3. */
  MAV_COMP_ID_IMU_3 = 202,
  /* GPS #1. */
  MAV_COMP_ID_GPS = 220,
  /* GPS #2. */
  MAV_COMP_ID_GPS2 = 221,
  /* Component to bridge MAVLink to UDP (i.e. from a UART). */
  MAV_COMP_ID_UDP_BRIDGE = 240,
  /* Component to bridge to UART (i.e. from UDP). */
  MAV_COMP_ID_UART_BRIDGE = 241,
  /* Component for handling system messages (e.g. to ARM, takeoff, etc.). */
  MAV_COMP_ID_SYSTEM_CONTROL = 250
};

/* These encode the sensors whose status is sent as part of the SYS_STATUS
 * message. */
enum MAV_SYS_STATUS_SENSOR {
  /* 0x01 3D gyro */
  MAV_SYS_STATUS_SENSOR_3D_GYRO = 1,
  /* 0x02 3D accelerometer */
  MAV_SYS_STATUS_SENSOR_3D_ACCEL = 2,
  /* 0x04 3D magnetometer */
  MAV_SYS_STATUS_SENSOR_3D_MAG = 4,
  /* 0x08 absolute pressure */
  MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE = 8,
  /* 0x10 differential pressure */
  MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE = 16,
  /* 0x20 GPS */
  MAV_SYS_STATUS_SENSOR_GPS = 32,
  /* 0x40 optical flow */
  MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW = 64,
  /* 0x80 computer vision position */
  MAV_SYS_STATUS_SENSOR_VISION_POSITION = 128,
  /* 0x100 laser based position */
  MAV_SYS_STATUS_SENSOR_LASER_POSITION = 256,
  /* 0x200 external ground truth (Vicon or Leica) */
  MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH = 512,
  /* 0x400 3D angular rate control */
  MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL = 1024,
  /* 0x800 attitude stabilization */
  MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION = 2048,
  /* 0x1000 yaw position */
  MAV_SYS_STATUS_SENSOR_YAW_POSITION = 4096,
  /* 0x2000 z/altitude control */
  MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL = 8192,
  /* 0x4000 x/y position control */
  MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL = 16384,
  /* 0x8000 motor outputs / control */
  MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS = 32768,
  /* 0x10000 rc receiver */
  MAV_SYS_STATUS_SENSOR_RC_RECEIVER = 65536,
  /* 0x20000 2nd 3D gyro */
  MAV_SYS_STATUS_SENSOR_3D_GYRO2 = 131072,
  /* 0x40000 2nd 3D accelerometer */
  MAV_SYS_STATUS_SENSOR_3D_ACCEL2 = 262144,
  /* 0x80000 2nd 3D magnetometer */
  MAV_SYS_STATUS_SENSOR_3D_MAG2 = 524288,
  /* 0x100000 geofence */
  MAV_SYS_STATUS_GEOFENCE = 1048576,
  /* 0x200000 AHRS subsystem health */
  MAV_SYS_STATUS_AHRS = 2097152,
  /* 0x400000 Terrain subsystem health */
  MAV_SYS_STATUS_TERRAIN = 4194304,
  /* 0x800000 Motors are reversed */
  MAV_SYS_STATUS_REVERSE_MOTOR = 8388608,
  /* 0x1000000 Logging */
  MAV_SYS_STATUS_LOGGING = 16777216,
  /* 0x2000000 Battery */
  MAV_SYS_STATUS_SENSOR_BATTERY = 33554432,
  /* 0x4000000 Proximity */
  MAV_SYS_STATUS_SENSOR_PROXIMITY = 67108864,
  /* 0x8000000 Satellite Communication  */
  MAV_SYS_STATUS_SENSOR_SATCOM = 134217728
};

enum MAV_FRAME {
  /* Global (WGS84) coordinate frame + MSL altitude. First value / x: latitude,
     second value / y: longitude, third value / z: positive altitude over mean
     sea level (MSL). */
  MAV_FRAME_GLOBAL = 0,
  /* Local coordinate frame, Z-down (x: north, y: east, z: down). */
  MAV_FRAME_LOCAL_NED = 1,
  /* NOT a coordinate frame, indicates a mission command. */
  MAV_FRAME_MISSION = 2,
  /* Global (WGS84) coordinate frame + altitude relative to the home position.
     First value / x: latitude, second value / y: longitude, third value / z:
     positive altitude with 0 being at the altitude of the home location. */
  MAV_FRAME_GLOBAL_RELATIVE_ALT = 3,
  /* Local coordinate frame, Z-up (x: east, y: north, z: up). */
  MAV_FRAME_LOCAL_ENU = 4,
  /* Global (WGS84) coordinate frame (scaled) + MSL altitude. First value / x:
     latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7,
     third value / z: positive altitude over mean sea level (MSL). */
  MAV_FRAME_GLOBAL_INT = 5,
  /* Global (WGS84) coordinate frame (scaled) + altitude relative to the home
     position. First value / x: latitude in degrees*10e-7, second value / y:
     longitude in degrees*10e-7, third value / z: positive altitude with 0 being
     at the altitude of the home location. */
  MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6,
  /* Offset to the current local frame. Anything expressed in this frame should
     be added to the current local frame position. */
  MAV_FRAME_LOCAL_OFFSET_NED = 7,
  /* Setpoint in body NED frame. This makes sense if all position control is
     externalized - e.g. useful to command 2 m/s^2 acceleration to the right. */
  MAV_FRAME_BODY_NED = 8,
  /* Offset in body NED frame. This makes sense if adding setpoints to the
     current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2
     acceleration to the east. */
  MAV_FRAME_BODY_OFFSET_NED = 9,
  /* Global (WGS84) coordinate frame with AGL altitude (at the waypoint
     coordinate). First value / x: latitude in degrees, second value / y:
     longitude in degrees, third value / z: positive altitude in meters with 0
     being at ground level in terrain model. */
  MAV_FRAME_GLOBAL_TERRAIN_ALT = 10,
  /* Global (WGS84) coordinate frame (scaled) with AGL altitude (at the waypoint
     coordinate). First value / x: latitude in degrees*10e-7, second value / y:
     longitude in degrees*10e-7, third value / z: positive altitude in meters
     with 0 being at ground level in terrain model. */
  MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11,
  /* Body fixed frame of reference, Z-down (x: forward, y: right, z: down). */
  MAV_FRAME_BODY_FRD = 12,
  /* Body fixed frame of reference, Z-up (x: forward, y: left, z: up). */
  MAV_FRAME_BODY_FLU = 13,
  /* Odometry local coordinate frame of data given by a motion capture system,
     Z-down (x: north, y: east, z: down). */
  MAV_FRAME_MOCAP_NED = 14,
  /* Odometry local coordinate frame of data given by a motion capture system,
     Z-up (x: east, y: north, z: up). */
  MAV_FRAME_MOCAP_ENU = 15,
  /* Odometry local coordinate frame of data given by a vision estimation
     system, Z-down (x: north, y: east, z: down). */
  MAV_FRAME_VISION_NED = 16,
  /* Odometry local coordinate frame of data given by a vision estimation
     system, Z-up (x: east, y: north, z: up). */
  MAV_FRAME_VISION_ENU = 17,
  /* Odometry local coordinate frame of data given by an estimator running
     onboard the vehicle, Z-down (x: north, y: east, z: down). */
  MAV_FRAME_ESTIM_NED = 18,
  /* Odometry local coordinate frame of data given by an estimator running
     onboard the vehicle, Z-up (x: east, y: noth, z: up). */
  MAV_FRAME_ESTIM_ENU = 19
};

enum MAVLINK_DATA_STREAM_TYPE {
  MAVLINK_DATA_STREAM_IMG_JPEG = 1,
  MAVLINK_DATA_STREAM_IMG_BMP = 2,
  MAVLINK_DATA_STREAM_IMG_RAW8U = 3,
  MAVLINK_DATA_STREAM_IMG_RAW32U = 4,
  MAVLINK_DATA_STREAM_IMG_PGM = 5,
  MAVLINK_DATA_STREAM_IMG_PNG = 6
};

enum FENCE_ACTION {
  /* Disable fenced mode */
  FENCE_ACTION_NONE = 0,
  /* Switched to guided mode to return point (fence point 0) */
  FENCE_ACTION_GUIDED = 1,
  /* Report fence breach, but don't take action */
  FENCE_ACTION_REPORT = 2,
  /* Switched to guided mode to return point (fence point 0) with manual
     throttle control */
  FENCE_ACTION_GUIDED_THR_PASS = 3,
  /* Switch to RTL (return to launch) mode and head for the return point. */
  FENCE_ACTION_RTL = 4
};

enum FENCE_BREACH {
  /* No last fence breach */
  FENCE_BREACH_NONE = 0,
  /* Breached minimum altitude */
  FENCE_BREACH_MINALT = 1,
  /* Breached maximum altitude */
  FENCE_BREACH_MAXALT = 2,
  /* Breached fence boundary */
  FENCE_BREACH_BOUNDARY = 3
};

/* Enumeration of possible mount operation modes */
enum MAV_MOUNT_MODE {
  /* Load and keep safe position (Roll,Pitch,Yaw) from permant memory and stop
     stabilization */
  MAV_MOUNT_MODE_RETRACT = 0,
  /* Load and keep neutral position (Roll,Pitch,Yaw) from permanent memory. */
  MAV_MOUNT_MODE_NEUTRAL = 1,
  /* Load neutral position and start MAVLink Roll,Pitch,Yaw control with
     stabilization */
  MAV_MOUNT_MODE_MAVLINK_TARGETING = 2,
  /* Load neutral position and start RC Roll,Pitch,Yaw control with
     stabilization */
  MAV_MOUNT_MODE_RC_TARGETING = 3,
  /* Load neutral position and start to point to Lat,Lon,Alt */
  MAV_MOUNT_MODE_GPS_POINT = 4
};

/* Generalized UAVCAN node health */
enum UAVCAN_NODE_HEALTH {
  /* The node is functioning properly. */
  UAVCAN_NODE_HEALTH_OK = 0,
  /* A critical parameter went out of range or the node has encountered a minor
     failure. */
  UAVCAN_NODE_HEALTH_WARNING = 1,
  /* The node has encountered a major failure. */
  UAVCAN_NODE_HEALTH_ERROR = 2,
  /* The node has suffered a fatal malfunction. */
  UAVCAN_NODE_HEALTH_CRITICAL = 3
};

/* Generalized UAVCAN node mode */
enum UAVCAN_NODE_MODE {
  /* The node is performing its primary functions. */
  UAVCAN_NODE_MODE_OPERATIONAL = 0,
  /* The node is initializing; this mode is entered immediately after startup.
   */
  UAVCAN_NODE_MODE_INITIALIZATION = 1,
  /* The node is under maintenance. */
  UAVCAN_NODE_MODE_MAINTENANCE = 2,
  /* The node is in the process of updating its software. */
  UAVCAN_NODE_MODE_SOFTWARE_UPDATE = 3,
  /* The node is no longer available online. */
  UAVCAN_NODE_MODE_OFFLINE = 7
};

/* Flags to indicate the status of camera storage. */
enum STORAGE_STATUS {
  /* Storage is missing (no microSD card loaded for example.) */
  STORAGE_STATUS_EMPTY = 0,
  /* Storage present but unformatted. */
  STORAGE_STATUS_UNFORMATTED = 1,
  /* Storage present and ready. */
  STORAGE_STATUS_READY = 2,
  /* Camera does not supply storage status information. Capacity information in
     STORAGE_INFORMATION fields will be ignored. */
  STORAGE_STATUS_NOT_SUPPORTED = 3
};

/* Commands to be executed by the MAV. They can be executed on user request, or
 * as part of a mission script. If the action is used in a mission, the
 * parameter mapping to the waypoint/mission message is as follows: Param 1,
 * Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command
 * list is similar what ARINC 424 is for commercial aircraft: A data format how
 * to interpret waypoint/mission data. See
 * https://mavlink.io/en/guide/xml_schema.html#MAV_CMD for information about the
 * structure of the MAV_CMD entries */
enum MAV_CMD {
  /* Navigate to waypoint. */
  MAV_CMD_NAV_WAYPOINT = 16,
  /* Loiter around this waypoint an unlimited amount of time */
  MAV_CMD_NAV_LOITER_UNLIM = 17,
  /* Loiter around this waypoint for X turns */
  MAV_CMD_NAV_LOITER_TURNS = 18,
  /* Loiter around this waypoint for X seconds */
  MAV_CMD_NAV_LOITER_TIME = 19,
  /* Return to launch location */
  MAV_CMD_NAV_RETURN_TO_LAUNCH = 20,
  /* Land at location. */
  MAV_CMD_NAV_LAND = 21,
  /* Takeoff from ground / hand */
  MAV_CMD_NAV_TAKEOFF = 22,
  /* Land at local position (local frame only) */
  MAV_CMD_NAV_LAND_LOCAL = 23,
  /* Takeoff from local position (local frame only) */
  MAV_CMD_NAV_TAKEOFF_LOCAL = 24,
  /* Vehicle following, i.e. this waypoint represents the position of a moving
     vehicle */
  MAV_CMD_NAV_FOLLOW = 25,
  /* Continue on the current course and climb/descend to specified altitude.
     When the altitude is reached continue to the next command (i.e., don't
     proceed to the next command until the desired altitude is reached. */
  MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT = 30,
  /* Begin loiter at the specified Latitude and Longitude.  If Lat=Lon=0, then
     loiter at the current position.  Don't consider the navigation command
     complete (don't leave loiter) until the altitude has been reached.
     Additionally, if the Heading Required parameter is non-zero the  aircraft
     will not leave the loiter until heading toward the next waypoint. */
  MAV_CMD_NAV_LOITER_TO_ALT = 31,
  /* Being following a target */
  MAV_CMD_DO_FOLLOW = 32,
  /* Reposition the MAV after a follow target command has been sent */
  MAV_CMD_DO_FOLLOW_REPOSITION = 33,
  /* Start orbiting on the circumference of a circle defined by the parameters.
     Setting any value NaN results in using defaults. */
  MAV_CMD_DO_ORBIT = 34,
  /* Sets the region of interest (ROI) for a sensor set or the vehicle itself.
     This can then be used by the vehicles control system to control the vehicle
     attitude and the attitude of various sensors such as cameras. */
  MAV_CMD_NAV_ROI = 80,
  /* Control autonomous path planning on the MAV. */
  MAV_CMD_NAV_PATHPLANNING = 81,
  /* Navigate to waypoint using a spline path. */
  MAV_CMD_NAV_SPLINE_WAYPOINT = 82,
  /* Takeoff from ground using VTOL mode, and transition to forward flight with
     specified heading. */
  MAV_CMD_NAV_VTOL_TAKEOFF = 84,
  /* Land using VTOL mode */
  MAV_CMD_NAV_VTOL_LAND = 85,
  /* hand control over to an external controller */
  MAV_CMD_NAV_GUIDED_ENABLE = 92,
  /* Delay the next navigation command a number of seconds or until a specified
     time */
  MAV_CMD_NAV_DELAY = 93,
  /* Descend and place payload. Vehicle moves to specified location, descends
     until it detects a hanging payload has reached the ground, and then
     releases the payload. If ground is not detected before the reaching the
     maximum descent value (param1), the command will complete without releasing
     the payload. */
  MAV_CMD_NAV_PAYLOAD_PLACE = 94,
  /* NOP - This command is only used to mark the upper limit of the NAV/ACTION
     commands in the enumeration */
  MAV_CMD_NAV_LAST = 95,
  /* Delay mission state machine. */
  MAV_CMD_CONDITION_DELAY = 112,
  /* Ascend/descend at rate.  Delay mission state machine until desired altitude
     reached. */
  MAV_CMD_CONDITION_CHANGE_ALT = 113,
  /* Delay mission state machine until within desired distance of next NAV
     point. */
  MAV_CMD_CONDITION_DISTANCE = 114,
  /* Reach a certain target angle. */
  MAV_CMD_CONDITION_YAW = 115,
  /* NOP - This command is only used to mark the upper limit of the CONDITION
     commands in the enumeration */
  MAV_CMD_CONDITION_LAST = 159,
  /* Set system mode. */
  MAV_CMD_DO_SET_MODE = 176,
  /* Jump to the desired command in the mission list.  Repeat this action only
     the specified number of times */
  MAV_CMD_DO_JUMP = 177,
  /* Change speed and/or throttle set points. */
  MAV_CMD_DO_CHANGE_SPEED = 178,
  /* Changes the home location either to the current location or a specified
     location. */
  MAV_CMD_DO_SET_HOME = 179,
  /* Set a system parameter.  Caution!  Use of this command requires knowledge
     of the numeric enumeration value of the parameter. */
  MAV_CMD_DO_SET_PARAMETER = 180,
  /* Set a relay to a condition. */
  MAV_CMD_DO_SET_RELAY = 181,
  /* Cycle a relay on and off for a desired number of cycles with a desired
     period. */
  MAV_CMD_DO_REPEAT_RELAY = 182,
  /* Set a servo to a desired PWM value. */
  MAV_CMD_DO_SET_SERVO = 183,
  /* Cycle a between its nominal setting and a desired PWM for a desired number
     of cycles with a desired period. */
  MAV_CMD_DO_REPEAT_SERVO = 184,
  /* Terminate flight immediately */
  MAV_CMD_DO_FLIGHTTERMINATION = 185,
  /* Change altitude set point. */
  MAV_CMD_DO_CHANGE_ALTITUDE = 186,
  /* Mission command to perform a landing. This is used as a marker in a mission
     to tell the autopilot where a sequence of mission items that represents a
     landing starts. It may also be sent via a COMMAND_LONG to trigger a
     landing, in which case the nearest (geographically) landing sequence in the
     mission will be used. The Latitude/Longitude is optional, and may be set to
     0 if not needed. If specified then it will be used to help find the closest
     landing sequence. */
  MAV_CMD_DO_LAND_START = 189,
  /* Mission command to perform a landing from a rally point. */
  MAV_CMD_DO_RALLY_LAND = 190,
  /* Mission command to safely abort an autonomous landing. */
  MAV_CMD_DO_GO_AROUND = 191,
  /* Reposition the vehicle to a specific WGS84 global position. */
  MAV_CMD_DO_REPOSITION = 192,
  /* If in a GPS controlled position mode, hold the current position or
     continue. */
  MAV_CMD_DO_PAUSE_CONTINUE = 193,
  /* Set moving direction to forward or reverse. */
  MAV_CMD_DO_SET_REVERSE = 194,
  /* Sets the region of interest (ROI) to a location. This can then be used by
     the vehicles control system to control the vehicle attitude and the
     attitude of various sensors such as cameras. */
  MAV_CMD_DO_SET_ROI_LOCATION = 195,
  /* Sets the region of interest (ROI) to be toward next waypoint, with optional
     pitch/roll/yaw offset. This can then be used by the vehicles control system
     to control the vehicle attitude and the attitude of various sensors such as
     cameras. */
  MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET = 196,
  /* Cancels any previous ROI command returning the vehicle/sensors to default
     flight characteristics. This can then be used by the vehicles control
     system to control the vehicle attitude and the attitude of various sensors
     such as cameras. */
  MAV_CMD_DO_SET_ROI_NONE = 197,
  /* Control onboard camera system. */
  MAV_CMD_DO_CONTROL_VIDEO = 200,
  /* Sets the region of interest (ROI) for a sensor set or the vehicle itself.
     This can then be used by the vehicles control system to control the vehicle
     attitude and the attitude of various sensors such as cameras. */
  MAV_CMD_DO_SET_ROI = 201,
  /* Configure digital camera. This is a fallback message for systems that have
     not yet implemented PARAM_EXT_XXX messages and camera definition files (see
     https://mavlink.io/en/services/camera_def.html ). */
  MAV_CMD_DO_DIGICAM_CONFIGURE = 202,
  /* Control digital camera. This is a fallback message for systems that have
     not yet implemented PARAM_EXT_XXX messages and camera definition files (see
     https://mavlink.io/en/services/camera_def.html ). */
  MAV_CMD_DO_DIGICAM_CONTROL = 203,
  /* Mission command to configure a camera or antenna mount */
  MAV_CMD_DO_MOUNT_CONFIGURE = 204,
  /* Mission command to control a camera or antenna mount */
  MAV_CMD_DO_MOUNT_CONTROL = 205,
  /* Mission command to set camera trigger distance for this flight. The camera
     is triggered each time this distance is exceeded. This command can also be
     used to set the shutter integration time for the camera. */
  MAV_CMD_DO_SET_CAM_TRIGG_DIST = 206,
  /* Mission command to enable the geofence */
  MAV_CMD_DO_FENCE_ENABLE = 207,
  /* Mission command to trigger a parachute */
  MAV_CMD_DO_PARACHUTE = 208,
  /* Mission command to perform motor test. */
  MAV_CMD_DO_MOTOR_TEST = 209,
  /* Change to/from inverted flight. */
  MAV_CMD_DO_INVERTED_FLIGHT = 210,
  /* Sets a desired vehicle turn angle and speed change. */
  MAV_CMD_NAV_SET_YAW_SPEED = 213,
  /* Mission command to set camera trigger interval for this flight. If
     triggering is enabled, the camera is triggered each time this interval
     expires. This command can also be used to set the shutter integration time
     for the camera. */
  MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL = 214,
  /* Mission command to control a camera or antenna mount, using a quaternion as
     reference. */
  MAV_CMD_DO_MOUNT_CONTROL_QUAT = 220,
  /* set id of master controller */
  MAV_CMD_DO_GUIDED_MASTER = 221,
  /* Set limits for external control */
  MAV_CMD_DO_GUIDED_LIMITS = 222,
  /* Control vehicle engine. This is interpreted by the vehicles engine
     controller to change the target engine state. It is intended for vehicles
     with internal combustion engines */
  MAV_CMD_DO_ENGINE_CONTROL = 223,
  /* Set the mission item with sequence number seq as current item. This means
     that the MAV will continue to this mission item on the shortest path (not
     following the mission items in-between). */
  MAV_CMD_DO_SET_MISSION_CURRENT = 224,
  /* NOP - This command is only used to mark the upper limit of the DO commands
     in the enumeration */
  MAV_CMD_DO_LAST = 240,
  /* Trigger calibration. This command will be only accepted if in pre-flight
     mode. Except for Temperature Calibration, only one sensor should be set in
     a single message and all others should be zero. */
  MAV_CMD_PREFLIGHT_CALIBRATION = 241,
  /* Set sensor offsets. This command will be only accepted if in pre-flight
     mode. */
  MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242,
  /* Trigger UAVCAN config. This command will be only accepted if in pre-flight
     mode. */
  MAV_CMD_PREFLIGHT_UAVCAN = 243,
  /* Request storage of different parameter values and logs. This command will
     be only accepted if in pre-flight mode. */
  MAV_CMD_PREFLIGHT_STORAGE = 245,
  /* Request the reboot or shutdown of system components. */
  MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246,
  /* Override current mission with command to pause mission, pause mission and
     move to position, continue/resume mission. When param 1 indicates that the
     mission is paused (MAV_GOTO_DO_HOLD), param 2 defines whether it holds in
     place or moves to another position. */
  MAV_CMD_OVERRIDE_GOTO = 252,
  /* start running a mission */
  MAV_CMD_MISSION_START = 300,
  /* Arms / Disarms a component */
  MAV_CMD_COMPONENT_ARM_DISARM = 400,
  /* Request the home position from the vehicle. */
  MAV_CMD_GET_HOME_POSITION = 410,
  /* Starts receiver pairing. */
  MAV_CMD_START_RX_PAIR = 500,
  /* Request the interval between messages for a particular MAVLink message ID
   */
  MAV_CMD_GET_MESSAGE_INTERVAL = 510,
  /* Set the interval between messages for a particular MAVLink message ID. This
     interface replaces REQUEST_DATA_STREAM */
  MAV_CMD_SET_MESSAGE_INTERVAL = 511,
  /* Request the target system(s) emit a single instance of a specified message
     (i.e. a "one-shot" version of MAV_CMD_SET_MESSAGE_INTERVAL). */
  MAV_CMD_REQUEST_MESSAGE = 512,
  /* Request MAVLink protocol version compatibility */
  MAV_CMD_REQUEST_PROTOCOL_VERSION = 519,
  /* Request autopilot capabilities. The receiver should ACK the command and
     then emit its capabilities in an AUTOPILOT_VERSION message */
  MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES = 520,
  /* Request camera information (CAMERA_INFORMATION). */
  MAV_CMD_REQUEST_CAMERA_INFORMATION = 521,
  /* Request camera settings (CAMERA_SETTINGS). */
  MAV_CMD_REQUEST_CAMERA_SETTINGS = 522,
  /* Request storage information (STORAGE_INFORMATION). Use the command's
     target_component to target a specific component's storage. */
  MAV_CMD_REQUEST_STORAGE_INFORMATION = 525,
  /* Format a storage medium. Once format is complete, a STORAGE_INFORMATION
     message is sent. Use the command's target_component to target a specific
     component's storage. */
  MAV_CMD_STORAGE_FORMAT = 526,
  /* Request camera capture status (CAMERA_CAPTURE_STATUS) */
  MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS = 527,
  /* Request flight information (FLIGHT_INFORMATION) */
  MAV_CMD_REQUEST_FLIGHT_INFORMATION = 528,
  /* Reset all camera settings to Factory Default */
  MAV_CMD_RESET_CAMERA_SETTINGS = 529,
  /* Set camera running mode. Use NaN for reserved values. GCS will send a
     MAV_CMD_REQUEST_VIDEO_STREAM_STATUS command after a mode change if the
     camera supports video streaming. */
  MAV_CMD_SET_CAMERA_MODE = 530,
  /* Set camera zoom. Camera must respond with a CAMERA_SETTINGS message (on
     success). Use NaN for reserved values. */
  MAV_CMD_SET_CAMERA_ZOOM = 531,
  /* Set camera focus. Camera must respond with a CAMERA_SETTINGS message (on
     success). Use NaN for reserved values. */
  MAV_CMD_SET_CAMERA_FOCUS = 532,
  /* Tagged jump target. Can be jumped to with MAV_CMD_DO_JUMP_TAG. */
  MAV_CMD_JUMP_TAG = 600,
  /* Jump to the matching tag in the mission list. Repeat this action for the
     specified number of times. A mission should contain a single matching tag
     for each jump. If this is not the case then a jump to a missing tag should
     complete the mission, and a jump where there are multiple matching tags
     should always select the one with the lowest mission sequence number. */
  MAV_CMD_DO_JUMP_TAG = 601,
  /* Start image capture sequence. Sends CAMERA_IMAGE_CAPTURED after each
     capture. Use NaN for reserved values. */
  MAV_CMD_IMAGE_START_CAPTURE = 2000,
  /* Stop image capture sequence Use NaN for reserved values. */
  MAV_CMD_IMAGE_STOP_CAPTURE = 2001,
  /* Re-request a CAMERA_IMAGE_CAPTURE message. Use NaN for reserved values. */
  MAV_CMD_REQUEST_CAMERA_IMAGE_CAPTURE = 2002,
  /* Enable or disable on-board camera triggering system. */
  MAV_CMD_DO_TRIGGER_CONTROL = 2003,
  /* Starts video capture (recording). Use NaN for reserved values. */
  MAV_CMD_VIDEO_START_CAPTURE = 2500,
  /* Stop the current video capture (recording). Use NaN for reserved values. */
  MAV_CMD_VIDEO_STOP_CAPTURE = 2501,
  /* Start video streaming */
  MAV_CMD_VIDEO_START_STREAMING = 2502,
  /* Stop the given video stream */
  MAV_CMD_VIDEO_STOP_STREAMING = 2503,
  /* Request video stream information (VIDEO_STREAM_INFORMATION) */
  MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION = 2504,
  /* Request video stream status (VIDEO_STREAM_STATUS) */
  MAV_CMD_REQUEST_VIDEO_STREAM_STATUS = 2505,
  /* Request to start streaming logging data over MAVLink (see also LOGGING_DATA
     message) */
  MAV_CMD_LOGGING_START = 2510,
  /* Request to stop streaming log data over MAVLink */
  MAV_CMD_LOGGING_STOP = 2511,
  MAV_CMD_AIRFRAME_CONFIGURATION = 2520,
  /* Request to start/stop transmitting over the high latency telemetry */
  MAV_CMD_CONTROL_HIGH_LATENCY = 2600,
  /* Create a panorama at the current position */
  MAV_CMD_PANORAMA_CREATE = 2800,
  /* Request VTOL transition */
  MAV_CMD_DO_VTOL_TRANSITION = 3000,
  /* Request authorization to arm the vehicle to a external entity, the arm
     authorizer is responsible to request all data that is needs from the
     vehicle before authorize or deny the request. If approved the progress of
     command_ack message should be set with period of time that this
     authorization is valid in seconds or in case it was denied it should be set
     with one of the reasons in ARM_AUTH_DENIED_REASON.          */
  MAV_CMD_ARM_AUTHORIZATION_REQUEST = 3001,
  /* This command sets the submode to standard guided when vehicle is in guided
     mode. The vehicle holds position and altitude and the user can input the
     desired velocities along all three axes.                    */
  MAV_CMD_SET_GUIDED_SUBMODE_STANDARD = 4000,
  /* This command sets submode circle when vehicle is in guided mode. Vehicle
     flies along a circle facing the center of the circle. The user can input
     the velocity along the circle and change the radius. If no input is given
     the vehicle will hold position.                    */
  MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE = 4001,
  /* Delay mission state machine until gate has been reached. */
  MAV_CMD_CONDITION_GATE = 4501,
  /* Fence return point. There can only be one fence return point.          */
  MAV_CMD_NAV_FENCE_RETURN_POINT = 5000,
  /* Fence vertex for an inclusion polygon (the polygon must not be
     self-intersecting). The vehicle must stay within this area. Minimum of 3
     vertices required.          */
  MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION = 5001,
  /* Fence vertex for an exclusion polygon (the polygon must not be
     self-intersecting). The vehicle must stay outside this area. Minimum of 3
     vertices required.          */
  MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION = 5002,
  /* Circular fence area. The vehicle must stay inside this area.          */
  MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION = 5003,
  /* Circular fence area. The vehicle must stay outside this area.          */
  MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION = 5004,
  /* Rally point. You can have multiple rally points defined.          */
  MAV_CMD_NAV_RALLY_POINT = 5100,
  /* Commands the vehicle to respond with a sequence of messages
     UAVCAN_NODE_INFO, one message per every UAVCAN node that is online. Note
     that some of the response messages can be lost, which the receiver can
     detect easily by checking whether every received UAVCAN_NODE_STATUS has a
     matching message UAVCAN_NODE_INFO received earlier; if not, this command
     should be sent again in order to request re-transmission of the node
     information messages. */
  MAV_CMD_UAVCAN_GET_NODE_INFO = 5200,
  /* Deploy payload on a Lat / Lon / Alt position. This includes the navigation
     to reach the required release position and velocity. */
  MAV_CMD_PAYLOAD_PREPARE_DEPLOY = 30001,
  /* Control the payload deployment. */
  MAV_CMD_PAYLOAD_CONTROL_DEPLOY = 30002,
  /* User defined waypoint item. Ground Station will show the Vehicle as flying
     through this item. */
  MAV_CMD_WAYPOINT_USER_1 = 31000,
  /* User defined waypoint item. Ground Station will show the Vehicle as flying
     through this item. */
  MAV_CMD_WAYPOINT_USER_2 = 31001,
  /* User defined waypoint item. Ground Station will show the Vehicle as flying
     through this item. */
  MAV_CMD_WAYPOINT_USER_3 = 31002,
  /* User defined waypoint item. Ground Station will show the Vehicle as flying
     through this item. */
  MAV_CMD_WAYPOINT_USER_4 = 31003,
  /* User defined waypoint item. Ground Station will show the Vehicle as flying
     through this item. */
  MAV_CMD_WAYPOINT_USER_5 = 31004,
  /* User defined spatial item. Ground Station will not show the Vehicle as
     flying through this item. Example: ROI item. */
  MAV_CMD_SPATIAL_USER_1 = 31005,
  /* User defined spatial item. Ground Station will not show the Vehicle as
     flying through this item. Example: ROI item. */
  MAV_CMD_SPATIAL_USER_2 = 31006,
  /* User defined spatial item. Ground Station will not show the Vehicle as
     flying through this item. Example: ROI item. */
  MAV_CMD_SPATIAL_USER_3 = 31007,
  /* User defined spatial item. Ground Station will not show the Vehicle as
     flying through this item. Example: ROI item. */
  MAV_CMD_SPATIAL_USER_4 = 31008,
  /* User defined spatial item. Ground Station will not show the Vehicle as
     flying through this item. Example: ROI item. */
  MAV_CMD_SPATIAL_USER_5 = 31009,
  /* User defined command. Ground Station will not show the Vehicle as flying
     through this item. Example: MAV_CMD_DO_SET_PARAMETER item. */
  MAV_CMD_USER_1 = 31010,
  /* User defined command. Ground Station will not show the Vehicle as flying
     through this item. Example: MAV_CMD_DO_SET_PARAMETER item. */
  MAV_CMD_USER_2 = 31011,
  /* User defined command. Ground Station will not show the Vehicle as flying
     through this item. Example: MAV_CMD_DO_SET_PARAMETER item. */
  MAV_CMD_USER_3 = 31012,
  /* User defined command. Ground Station will not show the Vehicle as flying
     through this item. Example: MAV_CMD_DO_SET_PARAMETER item. */
  MAV_CMD_USER_4 = 31013,
  /* User defined command. Ground Station will not show the Vehicle as flying
     through this item. Example: MAV_CMD_DO_SET_PARAMETER item. */
  MAV_CMD_USER_5 = 31014
};

/* A data stream is not a fixed set of messages, but rather a
 * recommendation to the autopilot software. Individual autopilots may or may
 * not obey      the recommended messages. */
enum MAV_DATA_STREAM {
  /* Enable all data streams */
  MAV_DATA_STREAM_ALL = 0,
  /* Enable IMU_RAW, GPS_RAW, GPS_STATUS packets. */
  MAV_DATA_STREAM_RAW_SENSORS = 1,
  /* Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS */
  MAV_DATA_STREAM_EXTENDED_STATUS = 2,
  /* Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW */
  MAV_DATA_STREAM_RC_CHANNELS = 3,
  /* Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT,
     NAV_CONTROLLER_OUTPUT. */
  MAV_DATA_STREAM_RAW_CONTROLLER = 4,
  /* Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages. */
  MAV_DATA_STREAM_POSITION = 6,
  /* Dependent on the autopilot */
  MAV_DATA_STREAM_EXTRA1 = 10,
  /* Dependent on the autopilot */
  MAV_DATA_STREAM_EXTRA2 = 11,
  /* Dependent on the autopilot */
  MAV_DATA_STREAM_EXTRA3 = 12
};

/* The ROI (region of interest) for the vehicle. This can be                 be
 * used by the vehicle for camera/vehicle attitude alignment (see
 * MAV_CMD_NAV_ROI). */
enum MAV_ROI {
  /* No region of interest. */
  MAV_ROI_NONE = 0,
  /* Point toward next waypoint, with optional pitch/roll/yaw offset. */
  MAV_ROI_WPNEXT = 1,
  /* Point toward given waypoint. */
  MAV_ROI_WPINDEX = 2,
  /* Point toward fixed location. */
  MAV_ROI_LOCATION = 3,
  /* Point toward of given id. */
  MAV_ROI_TARGET = 4
};

/* ACK / NACK / ERROR values as a result of MAV_CMDs and for mission item
 * transmission. */
enum MAV_CMD_ACK {
  /* Command / mission item is ok. */
  MAV_CMD_ACK_OK = 1,
  /* Generic error message if none of the other reasons fails or if no detailed
     error reporting is implemented. */
  MAV_CMD_ACK_ERR_FAIL = 2,
  /* The system is refusing to accept this command from this source /
     communication partner. */
  MAV_CMD_ACK_ERR_ACCESS_DENIED = 3,
  /* Command or mission item is not supported, other commands would be accepted.
   */
  MAV_CMD_ACK_ERR_NOT_SUPPORTED = 4,
  /* The coordinate frame of this command / mission item is not supported. */
  MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5,
  /* The coordinate frame of this command is ok, but he coordinate values exceed
     the safety limits of this system. This is a generic error, please use the
     more specific error messages below if possible. */
  MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 6,
  /* The X or latitude value is out of range. */
  MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 7,
  /* The Y or longitude value is out of range. */
  MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 8,
  /* The Z or altitude value is out of range. */
  MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 9
};

/* Specifies the datatype of a MAVLink parameter. */
enum MAV_PARAM_TYPE {
  /* 8-bit unsigned integer */
  MAV_PARAM_TYPE_UINT8 = 1,
  /* 8-bit signed integer */
  MAV_PARAM_TYPE_INT8 = 2,
  /* 16-bit unsigned integer */
  MAV_PARAM_TYPE_UINT16 = 3,
  /* 16-bit signed integer */
  MAV_PARAM_TYPE_INT16 = 4,
  /* 32-bit unsigned integer */
  MAV_PARAM_TYPE_UINT32 = 5,
  /* 32-bit signed integer */
  MAV_PARAM_TYPE_INT32 = 6,
  /* 64-bit unsigned integer */
  MAV_PARAM_TYPE_UINT64 = 7,
  /* 64-bit signed integer */
  MAV_PARAM_TYPE_INT64 = 8,
  /* 32-bit floating-point */
  MAV_PARAM_TYPE_REAL32 = 9,
  /* 64-bit floating-point */
  MAV_PARAM_TYPE_REAL64 = 10
};

/* Specifies the datatype of a MAVLink extended parameter. */
enum MAV_PARAM_EXT_TYPE {
  /* 8-bit unsigned integer */
  MAV_PARAM_EXT_TYPE_UINT8 = 1,
  /* 8-bit signed integer */
  MAV_PARAM_EXT_TYPE_INT8 = 2,
  /* 16-bit unsigned integer */
  MAV_PARAM_EXT_TYPE_UINT16 = 3,
  /* 16-bit signed integer */
  MAV_PARAM_EXT_TYPE_INT16 = 4,
  /* 32-bit unsigned integer */
  MAV_PARAM_EXT_TYPE_UINT32 = 5,
  /* 32-bit signed integer */
  MAV_PARAM_EXT_TYPE_INT32 = 6,
  /* 64-bit unsigned integer */
  MAV_PARAM_EXT_TYPE_UINT64 = 7,
  /* 64-bit signed integer */
  MAV_PARAM_EXT_TYPE_INT64 = 8,
  /* 32-bit floating-point */
  MAV_PARAM_EXT_TYPE_REAL32 = 9,
  /* 64-bit floating-point */
  MAV_PARAM_EXT_TYPE_REAL64 = 10,
  /* Custom Type */
  MAV_PARAM_EXT_TYPE_CUSTOM = 11
};

/* result from a mavlink command */
enum MAV_RESULT {
  /* Command ACCEPTED and EXECUTED */
  MAV_RESULT_ACCEPTED = 0,
  /* Command TEMPORARY REJECTED/DENIED */
  MAV_RESULT_TEMPORARILY_REJECTED = 1,
  /* Command PERMANENTLY DENIED */
  MAV_RESULT_DENIED = 2,
  /* Command UNKNOWN/UNSUPPORTED */
  MAV_RESULT_UNSUPPORTED = 3,
  /* Command executed, but failed */
  MAV_RESULT_FAILED = 4,
  /* WIP: Command being executed */
  MAV_RESULT_IN_PROGRESS = 5
};

/* Result of mission operation (in a MISSION_ACK message). */
enum MAV_MISSION_RESULT {
  /* mission accepted OK */
  MAV_MISSION_ACCEPTED = 0,
  /* Generic error / not accepting mission commands at all right now. */
  MAV_MISSION_ERROR = 1,
  /* Coordinate frame is not supported. */
  MAV_MISSION_UNSUPPORTED_FRAME = 2,
  /* Command is not supported. */
  MAV_MISSION_UNSUPPORTED = 3,
  /* Mission item exceeds storage space. */
  MAV_MISSION_NO_SPACE = 4,
  /* One of the parameters has an invalid value. */
  MAV_MISSION_INVALID = 5,
  /* param1 has an invalid value. */
  MAV_MISSION_INVALID_PARAM1 = 6,
  /* param2 has an invalid value. */
  MAV_MISSION_INVALID_PARAM2 = 7,
  /* param3 has an invalid value. */
  MAV_MISSION_INVALID_PARAM3 = 8,
  /* param4 has an invalid value. */
  MAV_MISSION_INVALID_PARAM4 = 9,
  /* x / param5 has an invalid value. */
  MAV_MISSION_INVALID_PARAM5_X = 10,
  /* y / param6 has an invalid value. */
  MAV_MISSION_INVALID_PARAM6_Y = 11,
  /* z / param7 has an invalid value. */
  MAV_MISSION_INVALID_PARAM7 = 12,
  /* Mission item received out of sequence */
  MAV_MISSION_INVALID_SEQUENCE = 13,
  /* Not accepting any mission commands from this communication partner. */
  MAV_MISSION_DENIED = 14,
  /* Current mission operation cancelled (e.g. mission upload, mission
     download). */
  MAV_MISSION_OPERATION_CANCELLED = 15
};

/* Indicates the severity level, generally used for status messages to indicate
 * their relative urgency. Based on RFC-5424 using expanded definitions at:
 * http://www.kiwisyslog.com/kb/info:-syslog-message-levels/. */
enum MAV_SEVERITY {
  /* System is unusable. This is a "panic" condition. */
  MAV_SEVERITY_EMERGENCY = 0,
  /* Action should be taken immediately. Indicates error in non-critical
     systems. */
  MAV_SEVERITY_ALERT = 1,
  /* Action must be taken immediately. Indicates failure in a primary system. */
  MAV_SEVERITY_CRITICAL = 2,
  /* Indicates an error in secondary/redundant systems. */
  MAV_SEVERITY_ERROR = 3,
  /* Indicates about a possible future error if this is not resolved within a
     given timeframe. Example would be a low battery warning. */
  MAV_SEVERITY_WARNING = 4,
  /* An unusual event has occurred, though not an error condition. This should
     be investigated for the root cause. */
  MAV_SEVERITY_NOTICE = 5,
  /* Normal operational messages. Useful for logging. No action is required for
     these messages. */
  MAV_SEVERITY_INFO = 6,
  /* Useful non-operational messages that can assist in debugging. These should
     not occur during normal operation. */
  MAV_SEVERITY_DEBUG = 7
};

/* Power supply status flags (bitmask) */
enum MAV_POWER_STATUS {
  /* main brick power supply valid */
  MAV_POWER_STATUS_BRICK_VALID = 1,
  /* main servo power supply valid for FMU */
  MAV_POWER_STATUS_SERVO_VALID = 2,
  /* USB power is connected */
  MAV_POWER_STATUS_USB_CONNECTED = 4,
  /* peripheral supply is in over-current state */
  MAV_POWER_STATUS_PERIPH_OVERCURRENT = 8,
  /* hi-power peripheral supply is in over-current state */
  MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT = 16,
  /* Power status has changed since boot */
  MAV_POWER_STATUS_CHANGED = 32
};

/* SERIAL_CONTROL device types */
enum SERIAL_CONTROL_DEV {
  /* First telemetry port */
  SERIAL_CONTROL_DEV_TELEM1 = 0,
  /* Second telemetry port */
  SERIAL_CONTROL_DEV_TELEM2 = 1,
  /* First GPS port */
  SERIAL_CONTROL_DEV_GPS1 = 2,
  /* Second GPS port */
  SERIAL_CONTROL_DEV_GPS2 = 3,
  /* system shell */
  SERIAL_CONTROL_DEV_SHELL = 10
};

/* SERIAL_CONTROL flags (bitmask) */
enum SERIAL_CONTROL_FLAG {
  /* Set if this is a reply */
  SERIAL_CONTROL_FLAG_REPLY = 1,
  /* Set if the sender wants the receiver to send a response as another
     SERIAL_CONTROL message */
  SERIAL_CONTROL_FLAG_RESPOND = 2,
  /* Set if access to the serial port should be removed from whatever driver is
     currently using it, giving exclusive access to the SERIAL_CONTROL protocol.
     The port can be handed back by sending a request without this flag set */
  SERIAL_CONTROL_FLAG_EXCLUSIVE = 4,
  /* Block on writes to the serial port */
  SERIAL_CONTROL_FLAG_BLOCKING = 8,
  /* Send multiple replies until port is drained */
  SERIAL_CONTROL_FLAG_MULTI = 16
};

/* Enumeration of distance sensor types */
enum MAV_DISTANCE_SENSOR {
  /* Laser rangefinder, e.g. LightWare SF02/F or PulsedLight units */
  MAV_DISTANCE_SENSOR_LASER = 0,
  /* Ultrasound rangefinder, e.g. MaxBotix units */
  MAV_DISTANCE_SENSOR_ULTRASOUND = 1,
  /* Infrared rangefinder, e.g. Sharp units */
  MAV_DISTANCE_SENSOR_INFRARED = 2,
  /* Radar type, e.g. uLanding units */
  MAV_DISTANCE_SENSOR_RADAR = 3,
  /* Broken or unknown type, e.g. analog units */
  MAV_DISTANCE_SENSOR_UNKNOWN = 4
};

/* Enumeration of sensor orientation, according to its rotations */
enum MAV_SENSOR_ORIENTATION {
  /* Roll: 0, Pitch: 0, Yaw: 0 */
  MAV_SENSOR_ROTATION_NONE = 0,
  /* Roll: 0, Pitch: 0, Yaw: 45 */
  MAV_SENSOR_ROTATION_YAW_45 = 1,
  /* Roll: 0, Pitch: 0, Yaw: 90 */
  MAV_SENSOR_ROTATION_YAW_90 = 2,
  /* Roll: 0, Pitch: 0, Yaw: 135 */
  MAV_SENSOR_ROTATION_YAW_135 = 3,
  /* Roll: 0, Pitch: 0, Yaw: 180 */
  MAV_SENSOR_ROTATION_YAW_180 = 4,
  /* Roll: 0, Pitch: 0, Yaw: 225 */
  MAV_SENSOR_ROTATION_YAW_225 = 5,
  /* Roll: 0, Pitch: 0, Yaw: 270 */
  MAV_SENSOR_ROTATION_YAW_270 = 6,
  /* Roll: 0, Pitch: 0, Yaw: 315 */
  MAV_SENSOR_ROTATION_YAW_315 = 7,
  /* Roll: 180, Pitch: 0, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_180 = 8,
  /* Roll: 180, Pitch: 0, Yaw: 45 */
  MAV_SENSOR_ROTATION_ROLL_180_YAW_45 = 9,
  /* Roll: 180, Pitch: 0, Yaw: 90 */
  MAV_SENSOR_ROTATION_ROLL_180_YAW_90 = 10,
  /* Roll: 180, Pitch: 0, Yaw: 135 */
  MAV_SENSOR_ROTATION_ROLL_180_YAW_135 = 11,
  /* Roll: 0, Pitch: 180, Yaw: 0 */
  MAV_SENSOR_ROTATION_PITCH_180 = 12,
  /* Roll: 180, Pitch: 0, Yaw: 225 */
  MAV_SENSOR_ROTATION_ROLL_180_YAW_225 = 13,
  /* Roll: 180, Pitch: 0, Yaw: 270 */
  MAV_SENSOR_ROTATION_ROLL_180_YAW_270 = 14,
  /* Roll: 180, Pitch: 0, Yaw: 315 */
  MAV_SENSOR_ROTATION_ROLL_180_YAW_315 = 15,
  /* Roll: 90, Pitch: 0, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_90 = 16,
  /* Roll: 90, Pitch: 0, Yaw: 45 */
  MAV_SENSOR_ROTATION_ROLL_90_YAW_45 = 17,
  /* Roll: 90, Pitch: 0, Yaw: 90 */
  MAV_SENSOR_ROTATION_ROLL_90_YAW_90 = 18,
  /* Roll: 90, Pitch: 0, Yaw: 135 */
  MAV_SENSOR_ROTATION_ROLL_90_YAW_135 = 19,
  /* Roll: 270, Pitch: 0, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_270 = 20,
  /* Roll: 270, Pitch: 0, Yaw: 45 */
  MAV_SENSOR_ROTATION_ROLL_270_YAW_45 = 21,
  /* Roll: 270, Pitch: 0, Yaw: 90 */
  MAV_SENSOR_ROTATION_ROLL_270_YAW_90 = 22,
  /* Roll: 270, Pitch: 0, Yaw: 135 */
  MAV_SENSOR_ROTATION_ROLL_270_YAW_135 = 23,
  /* Roll: 0, Pitch: 90, Yaw: 0 */
  MAV_SENSOR_ROTATION_PITCH_90 = 24,
  /* Roll: 0, Pitch: 270, Yaw: 0 */
  MAV_SENSOR_ROTATION_PITCH_270 = 25,
  /* Roll: 0, Pitch: 180, Yaw: 90 */
  MAV_SENSOR_ROTATION_PITCH_180_YAW_90 = 26,
  /* Roll: 0, Pitch: 180, Yaw: 270 */
  MAV_SENSOR_ROTATION_PITCH_180_YAW_270 = 27,
  /* Roll: 90, Pitch: 90, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_90 = 28,
  /* Roll: 180, Pitch: 90, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_180_PITCH_90 = 29,
  /* Roll: 270, Pitch: 90, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_270_PITCH_90 = 30,
  /* Roll: 90, Pitch: 180, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_180 = 31,
  /* Roll: 270, Pitch: 180, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_270_PITCH_180 = 32,
  /* Roll: 90, Pitch: 270, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_270 = 33,
  /* Roll: 180, Pitch: 270, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_180_PITCH_270 = 34,
  /* Roll: 270, Pitch: 270, Yaw: 0 */
  MAV_SENSOR_ROTATION_ROLL_270_PITCH_270 = 35,
  /* Roll: 90, Pitch: 180, Yaw: 90 */
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90 = 36,
  /* Roll: 90, Pitch: 0, Yaw: 270 */
  MAV_SENSOR_ROTATION_ROLL_90_YAW_270 = 37,
  /* Roll: 90, Pitch: 68, Yaw: 293 */
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_68_YAW_293 = 38,
  /* Pitch: 315 */
  MAV_SENSOR_ROTATION_PITCH_315 = 39,
  /* Roll: 90, Pitch: 315 */
  MAV_SENSOR_ROTATION_ROLL_90_PITCH_315 = 40,
  /* Custom orientation */
  MAV_SENSOR_ROTATION_CUSTOM = 100
};

/* Bitmask of (optional) autopilot capabilities (64 bit). If a bit is set, the
 * autopilot supports this capability. */
enum MAV_PROTOCOL_CAPABILITY {
  /* Autopilot supports MISSION float message type. */
  MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT = 1,
  /* Autopilot supports the new param float message type. */
  MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT = 2,
  /* Autopilot supports MISSION_INT scaled integer message type. */
  MAV_PROTOCOL_CAPABILITY_MISSION_INT = 4,
  /* Autopilot supports COMMAND_INT scaled integer message type. */
  MAV_PROTOCOL_CAPABILITY_COMMAND_INT = 8,
  /* Autopilot supports the new param union message type. */
  MAV_PROTOCOL_CAPABILITY_PARAM_UNION = 16,
  /* Autopilot supports the new FILE_TRANSFER_PROTOCOL message type. */
  MAV_PROTOCOL_CAPABILITY_FTP = 32,
  /* Autopilot supports commanding attitude offboard. */
  MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET = 64,
  /* Autopilot supports commanding position and velocity targets in local NED
     frame. */
  MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED = 128,
  /* Autopilot supports commanding position and velocity targets in global
     scaled integers. */
  MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT = 256,
  /* Autopilot supports terrain protocol / data handling. */
  MAV_PROTOCOL_CAPABILITY_TERRAIN = 512,
  /* Autopilot supports direct actuator control. */
  MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET = 1024,
  /* Autopilot supports the flight termination command. */
  MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION = 2048,
  /* Autopilot supports onboard compass calibration. */
  MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION = 4096,
  /* Autopilot supports MAVLink version 2. */
  MAV_PROTOCOL_CAPABILITY_MAVLINK2 = 8192,
  /* Autopilot supports mission fence protocol. */
  MAV_PROTOCOL_CAPABILITY_MISSION_FENCE = 16384,
  /* Autopilot supports mission rally point protocol. */
  MAV_PROTOCOL_CAPABILITY_MISSION_RALLY = 32768,
  /* Autopilot supports the flight information protocol. */
  MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION = 65536
};

/* Type of mission items being requested/sent in mission protocol. */
enum MAV_MISSION_TYPE {
  /* Items are mission commands for main mission. */
  MAV_MISSION_TYPE_MISSION = 0,
  /* Specifies GeoFence area(s). Items are MAV_CMD_NAV_FENCE_ GeoFence items. */
  MAV_MISSION_TYPE_FENCE = 1,
  /* Specifies the rally points for the vehicle. Rally points are alternative
     RTL points. Items are MAV_CMD_NAV_RALLY_POINT rally point items. */
  MAV_MISSION_TYPE_RALLY = 2,
  /* Only used in MISSION_CLEAR_ALL to clear all mission types. */
  MAV_MISSION_TYPE_ALL = 255
};

/* Enumeration of estimator types */
enum MAV_ESTIMATOR_TYPE {
  /* This is a naive estimator without any real covariance feedback. */
  MAV_ESTIMATOR_TYPE_NAIVE = 1,
  /* Computer vision based estimate. Might be up to scale. */
  MAV_ESTIMATOR_TYPE_VISION = 2,
  /* Visual-inertial estimate. */
  MAV_ESTIMATOR_TYPE_VIO = 3,
  /* Plain GPS estimate. */
  MAV_ESTIMATOR_TYPE_GPS = 4,
  /* Estimator integrating GPS and inertial sensing. */
  MAV_ESTIMATOR_TYPE_GPS_INS = 5
};

/* Enumeration of battery types */
enum MAV_BATTERY_TYPE {
  /* Not specified. */
  MAV_BATTERY_TYPE_UNKNOWN = 0,
  /* Lithium polymer battery */
  MAV_BATTERY_TYPE_LIPO = 1,
  /* Lithium-iron-phosphate battery */
  MAV_BATTERY_TYPE_LIFE = 2,
  /* Lithium-ION battery */
  MAV_BATTERY_TYPE_LION = 3,
  /* Nickel metal hydride battery */
  MAV_BATTERY_TYPE_NIMH = 4
};

/* Enumeration of battery functions */
enum MAV_BATTERY_FUNCTION {
  /* Battery function is unknown */
  MAV_BATTERY_FUNCTION_UNKNOWN = 0,
  /* Battery supports all flight systems */
  MAV_BATTERY_FUNCTION_ALL = 1,
  /* Battery for the propulsion system */
  MAV_BATTERY_FUNCTION_PROPULSION = 2,
  /* Avionics battery */
  MAV_BATTERY_FUNCTION_AVIONICS = 3,
  /* Payload battery */
  MAV_BATTERY_TYPE_PAYLOAD = 4
};

/* Enumeration for battery charge states. */
enum MAV_BATTERY_CHARGE_STATE {
  /* Low battery state is not provided */
  MAV_BATTERY_CHARGE_STATE_UNDEFINED = 0,
  /* Battery is not in low state. Normal operation. */
  MAV_BATTERY_CHARGE_STATE_OK = 1,
  /* Battery state is low, warn and monitor close. */
  MAV_BATTERY_CHARGE_STATE_LOW = 2,
  /* Battery state is critical, return or abort immediately. */
  MAV_BATTERY_CHARGE_STATE_CRITICAL = 3,
  /* Battery state is too low for ordinary abort sequence. Perform fastest
     possible emergency stop to prevent damage. */
  MAV_BATTERY_CHARGE_STATE_EMERGENCY = 4,
  /* Battery failed, damage unavoidable. */
  MAV_BATTERY_CHARGE_STATE_FAILED = 5,
  /* Battery is diagnosed to be defective or an error occurred, usage is
     discouraged / prohibited. */
  MAV_BATTERY_CHARGE_STATE_UNHEALTHY = 6,
  /* Battery is charging. */
  MAV_BATTERY_CHARGE_STATE_CHARGING = 7
};

/* Smart battery supply status/fault flags (bitmask) for health indication. */
enum MAV_SMART_BATTERY_FAULT {
  /* Battery has deep discharged. */
  MAV_SMART_BATTERY_FAULT_DEEP_DISCHARGE = 1,
  /* Voltage spikes. */
  MAV_SMART_BATTERY_FAULT_SPIKES = 2,
  /* Single cell has failed. */
  MAV_SMART_BATTERY_FAULT_SINGLE_CELL_FAIL = 4,
  /* Over-current fault. */
  MAV_SMART_BATTERY_FAULT_OVER_CURRENT = 8,
  /* Over-temperature fault. */
  MAV_SMART_BATTERY_FAULT_OVER_TEMPERATURE = 16,
  /* Under-temperature fault. */
  MAV_SMART_BATTERY_FAULT_UNDER_TEMPERATURE = 32
};

/* Enumeration of VTOL states */
enum MAV_VTOL_STATE {
  /* MAV is not configured as VTOL */
  MAV_VTOL_STATE_UNDEFINED = 0,
  /* VTOL is in transition from multicopter to fixed-wing */
  MAV_VTOL_STATE_TRANSITION_TO_FW = 1,
  /* VTOL is in transition from fixed-wing to multicopter */
  MAV_VTOL_STATE_TRANSITION_TO_MC = 2,
  /* VTOL is in multicopter state */
  MAV_VTOL_STATE_MC = 3,
  /* VTOL is in fixed-wing state */
  MAV_VTOL_STATE_FW = 4
};

/* Enumeration of landed detector states */
enum MAV_LANDED_STATE {
  /* MAV landed state is unknown */
  MAV_LANDED_STATE_UNDEFINED = 0,
  /* MAV is landed (on ground) */
  MAV_LANDED_STATE_ON_GROUND = 1,
  /* MAV is in air */
  MAV_LANDED_STATE_IN_AIR = 2,
  /* MAV currently taking off */
  MAV_LANDED_STATE_TAKEOFF = 3,
  /* MAV currently landing */
  MAV_LANDED_STATE_LANDING = 4
};

/* Enumeration of the ADSB altimeter types */
enum ADSB_ALTITUDE_TYPE {
  /* Altitude reported from a Baro source using QNH reference */
  ADSB_ALTITUDE_TYPE_PRESSURE_QNH = 0,
  /* Altitude reported from a GNSS source */
  ADSB_ALTITUDE_TYPE_GEOMETRIC = 1
};

/* ADSB classification for the type of vehicle emitting the transponder signal
 */
enum ADSB_EMITTER_TYPE {
  ADSB_EMITTER_TYPE_NO_INFO = 0,
  ADSB_EMITTER_TYPE_LIGHT = 1,
  ADSB_EMITTER_TYPE_SMALL = 2,
  ADSB_EMITTER_TYPE_LARGE = 3,
  ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE = 4,
  ADSB_EMITTER_TYPE_HEAVY = 5,
  ADSB_EMITTER_TYPE_HIGHLY_MANUV = 6,
  ADSB_EMITTER_TYPE_ROTOCRAFT = 7,
  ADSB_EMITTER_TYPE_UNASSIGNED = 8,
  ADSB_EMITTER_TYPE_GLIDER = 9,
  ADSB_EMITTER_TYPE_LIGHTER_AIR = 10,
  ADSB_EMITTER_TYPE_PARACHUTE = 11,
  ADSB_EMITTER_TYPE_ULTRA_LIGHT = 12,
  ADSB_EMITTER_TYPE_UNASSIGNED2 = 13,
  ADSB_EMITTER_TYPE_UAV = 14,
  ADSB_EMITTER_TYPE_SPACE = 15,
  ADSB_EMITTER_TYPE_UNASSGINED3 = 16,
  ADSB_EMITTER_TYPE_EMERGENCY_SURFACE = 17,
  ADSB_EMITTER_TYPE_SERVICE_SURFACE = 18,
  ADSB_EMITTER_TYPE_POINT_OBSTACLE = 19
};

/* These flags indicate status such as data validity of each data source. Set =
 * data valid */
enum ADSB_FLAGS {
  ADSB_FLAGS_VALID_COORDS = 1,
  ADSB_FLAGS_VALID_ALTITUDE = 2,
  ADSB_FLAGS_VALID_HEADING = 4,
  ADSB_FLAGS_VALID_VELOCITY = 8,
  ADSB_FLAGS_VALID_CALLSIGN = 16,
  ADSB_FLAGS_VALID_SQUAWK = 32,
  ADSB_FLAGS_SIMULATED = 64
};

/* Bitmap of options for the MAV_CMD_DO_REPOSITION */
enum MAV_DO_REPOSITION_FLAGS {
  /* The aircraft should immediately transition into guided. This should not be
     set for follow me applications */
  MAV_DO_REPOSITION_FLAGS_CHANGE_MODE = 1
};

/* Flags in EKF_STATUS message */
enum ESTIMATOR_STATUS_FLAGS {
  /* True if the attitude estimate is good */
  ESTIMATOR_ATTITUDE = 1,
  /* True if the horizontal velocity estimate is good */
  ESTIMATOR_VELOCITY_HORIZ = 2,
  /* True if the  vertical velocity estimate is good */
  ESTIMATOR_VELOCITY_VERT = 4,
  /* True if the horizontal position (relative) estimate is good */
  ESTIMATOR_POS_HORIZ_REL = 8,
  /* True if the horizontal position (absolute) estimate is good */
  ESTIMATOR_POS_HORIZ_ABS = 16,
  /* True if the vertical position (absolute) estimate is good */
  ESTIMATOR_POS_VERT_ABS = 32,
  /* True if the vertical position (above ground) estimate is good */
  ESTIMATOR_POS_VERT_AGL = 64,
  /* True if the EKF is in a constant position mode and is not using external
     measurements (eg GPS or optical flow) */
  ESTIMATOR_CONST_POS_MODE = 128,
  /* True if the EKF has sufficient data to enter a mode that will provide a
     (relative) position estimate */
  ESTIMATOR_PRED_POS_HORIZ_REL = 256,
  /* True if the EKF has sufficient data to enter a mode that will provide a
     (absolute) position estimate */
  ESTIMATOR_PRED_POS_HORIZ_ABS = 512,
  /* True if the EKF has detected a GPS glitch */
  ESTIMATOR_GPS_GLITCH = 1024,
  /* True if the EKF has detected bad accelerometer data */
  ESTIMATOR_ACCEL_ERROR = 2048
};

enum MOTOR_TEST_ORDER {
  /* default autopilot motor test method */
  MOTOR_TEST_ORDER_DEFAULT = 0,
  /* motor numbers are specified as their index in a predefined vehicle-specific
     sequence */
  MOTOR_TEST_ORDER_SEQUENCE = 1,
  /* motor numbers are specified as the output as labeled on the board */
  MOTOR_TEST_ORDER_BOARD = 2
};

enum MOTOR_TEST_THROTTLE_TYPE {
  /* throttle as a percentage from 0 ~ 100 */
  MOTOR_TEST_THROTTLE_PERCENT = 0,
  /* throttle as an absolute PWM value (normally in range of 1000~2000) */
  MOTOR_TEST_THROTTLE_PWM = 1,
  /* throttle pass-through from pilot's transmitter */
  MOTOR_TEST_THROTTLE_PILOT = 2,
  /* per-motor compass calibration test */
  MOTOR_TEST_COMPASS_CAL = 3
};

enum GPS_INPUT_IGNORE_FLAGS {
  /* ignore altitude field */
  GPS_INPUT_IGNORE_FLAG_ALT = 1,
  /* ignore hdop field */
  GPS_INPUT_IGNORE_FLAG_HDOP = 2,
  /* ignore vdop field */
  GPS_INPUT_IGNORE_FLAG_VDOP = 4,
  /* ignore horizontal velocity field (vn and ve) */
  GPS_INPUT_IGNORE_FLAG_VEL_HORIZ = 8,
  /* ignore vertical velocity field (vd) */
  GPS_INPUT_IGNORE_FLAG_VEL_VERT = 16,
  /* ignore speed accuracy field */
  GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY = 32,
  /* ignore horizontal accuracy field */
  GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY = 64,
  /* ignore vertical accuracy field */
  GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY = 128
};

/* Possible actions an aircraft can take to avoid a collision. */
enum MAV_COLLISION_ACTION {
  /* Ignore any potential collisions */
  MAV_COLLISION_ACTION_NONE = 0,
  /* Report potential collision */
  MAV_COLLISION_ACTION_REPORT = 1,
  /* Ascend or Descend to avoid threat */
  MAV_COLLISION_ACTION_ASCEND_OR_DESCEND = 2,
  /* Move horizontally to avoid threat */
  MAV_COLLISION_ACTION_MOVE_HORIZONTALLY = 3,
  /* Aircraft to move perpendicular to the collision's velocity vector */
  MAV_COLLISION_ACTION_MOVE_PERPENDICULAR = 4,
  /* Aircraft to fly directly back to its launch point */
  MAV_COLLISION_ACTION_RTL = 5,
  /* Aircraft to stop in place */
  MAV_COLLISION_ACTION_HOVER = 6
};

/* Aircraft-rated danger from this threat. */
enum MAV_COLLISION_THREAT_LEVEL {
  /* Not a threat */
  MAV_COLLISION_THREAT_LEVEL_NONE = 0,
  /* Craft is mildly concerned about this threat */
  MAV_COLLISION_THREAT_LEVEL_LOW = 1,
  /* Craft is panicking, and may take actions to avoid threat */
  MAV_COLLISION_THREAT_LEVEL_HIGH = 2
};

/* Source of information about this collision. */
enum MAV_COLLISION_SRC {
  /* ID field references ADSB_VEHICLE packets */
  MAV_COLLISION_SRC_ADSB = 0,
  /* ID field references MAVLink SRC ID */
  MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT = 1
};

/* Type of GPS fix */
enum GPS_FIX_TYPE {
  /* No GPS connected */
  GPS_FIX_TYPE_NO_GPS = 0,
  /* No position information, GPS is connected */
  GPS_FIX_TYPE_NO_FIX = 1,
  /* 2D position */
  GPS_FIX_TYPE_2D_FIX = 2,
  /* 3D position */
  GPS_FIX_TYPE_3D_FIX = 3,
  /* DGPS/SBAS aided 3D position */
  GPS_FIX_TYPE_DGPS = 4,
  /* RTK float, 3D position */
  GPS_FIX_TYPE_RTK_FLOAT = 5,
  /* RTK Fixed, 3D position */
  GPS_FIX_TYPE_RTK_FIXED = 6,
  /* Static fixed, typically used for base stations */
  GPS_FIX_TYPE_STATIC = 7,
  /* PPP, 3D position. */
  GPS_FIX_TYPE_PPP = 8
};

/* RTK GPS baseline coordinate system, used for RTK corrections */
enum RTK_BASELINE_COORDINATE_SYSTEM {
  /* Earth-centered, Earth-fixed */
  RTK_BASELINE_COORDINATE_SYSTEM_ECEF = 0,
  /* North, East, Down */
  RTK_BASELINE_COORDINATE_SYSTEM_NED = 1
};

/* Type of landing target */
enum LANDING_TARGET_TYPE {
  /* Landing target signaled by light beacon (ex: IR-LOCK) */
  LANDING_TARGET_TYPE_LIGHT_BEACON = 0,
  /* Landing target signaled by radio beacon (ex: ILS, NDB) */
  LANDING_TARGET_TYPE_RADIO_BEACON = 1,
  /* Landing target represented by a fiducial marker (ex: ARTag) */
  LANDING_TARGET_TYPE_VISION_FIDUCIAL = 2,
  /* Landing target represented by a pre-defined visual shape/feature (ex:
     X-marker, H-marker, square) */
  LANDING_TARGET_TYPE_VISION_OTHER = 3
};

/* Direction of VTOL transition */
enum VTOL_TRANSITION_HEADING {
  /* Respect the heading configuration of the vehicle. */
  VTOL_TRANSITION_HEADING_VEHICLE_DEFAULT = 0,
  /* Use the heading pointing towards the next waypoint. */
  VTOL_TRANSITION_HEADING_NEXT_WAYPOINT = 1,
  /* Use the heading on takeoff (while sitting on the ground). */
  VTOL_TRANSITION_HEADING_TAKEOFF = 2,
  /* Use the specified heading in parameter 4. */
  VTOL_TRANSITION_HEADING_SPECIFIED = 3,
  /* Use the current heading when reaching takeoff altitude (potentially facing
     the wind when weather-vaning is active). */
  VTOL_TRANSITION_HEADING_ANY = 4
};

/* Camera capability flags (Bitmap) */
enum CAMERA_CAP_FLAGS {
  /* Camera is able to record video */
  CAMERA_CAP_FLAGS_CAPTURE_VIDEO = 1,
  /* Camera is able to capture images */
  CAMERA_CAP_FLAGS_CAPTURE_IMAGE = 2,
  /* Camera has separate Video and Image/Photo modes (MAV_CMD_SET_CAMERA_MODE)
   */
  CAMERA_CAP_FLAGS_HAS_MODES = 4,
  /* Camera can capture images while in video mode */
  CAMERA_CAP_FLAGS_CAN_CAPTURE_IMAGE_IN_VIDEO_MODE = 8,
  /* Camera can capture videos while in Photo/Image mode */
  CAMERA_CAP_FLAGS_CAN_CAPTURE_VIDEO_IN_IMAGE_MODE = 16,
  /* Camera has image survey mode (MAV_CMD_SET_CAMERA_MODE) */
  CAMERA_CAP_FLAGS_HAS_IMAGE_SURVEY_MODE = 32,
  /* Camera has basic zoom control (MAV_CMD_SET_CAMERA_ZOOM) */
  CAMERA_CAP_FLAGS_HAS_BASIC_ZOOM = 64,
  /* Camera has basic focus control (MAV_CMD_SET_CAMERA_FOCUS) */
  CAMERA_CAP_FLAGS_HAS_BASIC_FOCUS = 128,
  /* Camera has video streaming capabilities (use
     MAV_CMD_REQUEST_VIDEO_STREAM_INFORMATION for video streaming info) */
  CAMERA_CAP_FLAGS_HAS_VIDEO_STREAM = 256
};

/* Stream status flags (Bitmap) */
enum VIDEO_STREAM_STATUS_FLAGS {
  /* Stream is active (running) */
  VIDEO_STREAM_STATUS_FLAGS_RUNNING = 1,
  /* Stream is thermal imaging */
  VIDEO_STREAM_STATUS_FLAGS_THERMAL = 2
};

/* Video stream types */
enum VIDEO_STREAM_TYPE {
  /* Stream is RTSP */
  VIDEO_STREAM_TYPE_RTSP = 0,
  /* Stream is RTP UDP (URI gives the port number) */
  VIDEO_STREAM_TYPE_RTPUDP = 1,
  /* Stream is MPEG on TCP */
  VIDEO_STREAM_TYPE_TCP_MPEG = 2,
  /* Stream is h.264 on MPEG TS (URI gives the port number) */
  VIDEO_STREAM_TYPE_MPEG_TS_H264 = 3
};

/* Zoom types for MAV_CMD_SET_CAMERA_ZOOM */
enum CAMERA_ZOOM_TYPE {
  /* Zoom one step increment (-1 for wide, 1 for tele) */
  ZOOM_TYPE_STEP = 0,
  /* Continuous zoom up/down until stopped (-1 for wide, 1 for tele, 0 to stop
     zooming) */
  ZOOM_TYPE_CONTINUOUS = 1,
  /* Zoom value as proportion of full camera range (a value between 0.0 and
     100.0) */
  ZOOM_TYPE_RANGE = 2
};

/* Focus types for MAV_CMD_SET_CAMERA_FOCUS */
enum SET_FOCUS_TYPE {
  /* Focus one step increment (-1 for focusing in, 1 for focusing out towards
     infinity). */
  FOCUS_TYPE_STEP = 0,
  /* Continuous focus up/down until stopped (-1 for focusing in, 1 for focusing
     out towards infinity, 0 to stop focusing) */
  FOCUS_TYPE_CONTINUOUS = 1,
  /* Zoom value as proportion of full camera range (a value between 0.0 and
     100.0) */
  FOCUS_TYPE_RANGE = 2
};

/* Result from a PARAM_EXT_SET message. */
enum PARAM_ACK {
  /* Parameter value ACCEPTED and SET */
  PARAM_ACK_ACCEPTED = 0,
  /* Parameter value UNKNOWN/UNSUPPORTED */
  PARAM_ACK_VALUE_UNSUPPORTED = 1,
  /* Parameter failed to set */
  PARAM_ACK_FAILED = 2,
  /* Parameter value received but not yet validated or set. A subsequent
     PARAM_EXT_ACK will follow once operation is completed with the actual
     result. These are for parameters that may take longer to set. Instead of
     waiting for an ACK and potentially timing out, you will immediately receive
     this response to let you know it was received. */
  PARAM_ACK_IN_PROGRESS = 3
};

/* Camera Modes. */
enum CAMERA_MODE {
  /* Camera is in image/photo capture mode. */
  CAMERA_MODE_IMAGE = 0,
  /* Camera is in video capture mode. */
  CAMERA_MODE_VIDEO = 1,
  /* Camera is in image survey capture mode. It allows for camera controller to
     do specific settings for surveys. */
  CAMERA_MODE_IMAGE_SURVEY = 2
};

enum MAV_ARM_AUTH_DENIED_REASON {
  /* Not a specific reason */
  MAV_ARM_AUTH_DENIED_REASON_GENERIC = 0,
  /* Authorizer will send the error as string to GCS */
  MAV_ARM_AUTH_DENIED_REASON_NONE = 1,
  /* At least one waypoint have a invalid value */
  MAV_ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT = 2,
  /* Timeout in the authorizer process(in case it depends on network) */
  MAV_ARM_AUTH_DENIED_REASON_TIMEOUT = 3,
  /* Airspace of the mission in use by another vehicle, second result parameter
     can have the waypoint id that caused it to be denied. */
  MAV_ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE = 4,
  /* Weather is not good to fly */
  MAV_ARM_AUTH_DENIED_REASON_BAD_WEATHER = 5
};

/* RC type */
enum RC_TYPE {
  /* Spektrum DSM2 */
  RC_TYPE_SPEKTRUM_DSM2 = 0,
  /* Spektrum DSMX */
  RC_TYPE_SPEKTRUM_DSMX = 1
};

/* Bitmap to indicate which dimensions should be ignored by the vehicle: a value
 * of 0b0000000000000000 or 0b0000001000000000 indicates that none of the
 * setpoint dimensions should be ignored. If bit 9 is set the floats afx afy afz
 * should be interpreted as force instead of acceleration. */
enum POSITION_TARGET_TYPEMASK {
  /* Ignore position x */
  POSITION_TARGET_TYPEMASK_X_IGNORE = 1,
  /* Ignore position y */
  POSITION_TARGET_TYPEMASK_Y_IGNORE = 2,
  /* Ignore position z */
  POSITION_TARGET_TYPEMASK_Z_IGNORE = 4,
  /* Ignore velocity x */
  POSITION_TARGET_TYPEMASK_VX_IGNORE = 8,
  /* Ignore velocity y */
  POSITION_TARGET_TYPEMASK_VY_IGNORE = 16,
  /* Ignore velocity z */
  POSITION_TARGET_TYPEMASK_VZ_IGNORE = 32,
  /* Ignore acceleration x */
  POSITION_TARGET_TYPEMASK_AX_IGNORE = 64,
  /* Ignore acceleration y */
  POSITION_TARGET_TYPEMASK_AY_IGNORE = 128,
  /* Ignore acceleration z */
  POSITION_TARGET_TYPEMASK_AZ_IGNORE = 256,
  /* Use force instead of acceleration */
  POSITION_TARGET_TYPEMASK_FORCE_SET = 512,
  /* Ignore yaw */
  POSITION_TARGET_TYPEMASK_YAW_IGNORE = 1024,
  /* Ignore yaw rate */
  POSITION_TARGET_TYPEMASK_YAW_RATE_IGNORE = 2048
};

/* Airborne status of UAS. */
enum UTM_FLIGHT_STATE {
  /* The flight state can't be determined. */
  UTM_FLIGHT_STATE_UNKNOWN = 1,
  /* UAS on ground. */
  UTM_FLIGHT_STATE_GROUND = 2,
  /* UAS airborne. */
  UTM_FLIGHT_STATE_AIRBORNE = 3,
  /* UAS is in an emergency flight state. */
  UTM_FLIGHT_STATE_EMERGENCY = 16,
  /* UAS has no active controls. */
  UTM_FLIGHT_STATE_NOCTRL = 32
};

/* Flags for the global position report. */
enum UTM_DATA_AVAIL_FLAGS {
  /* The field time contains valid data. */
  UTM_DATA_AVAIL_FLAGS_TIME_VALID = 1,
  /* The field uas_id contains valid data. */
  UTM_DATA_AVAIL_FLAGS_UAS_ID_AVAILABLE = 2,
  /* The fields lat, lon and h_acc contain valid data. */
  UTM_DATA_AVAIL_FLAGS_POSITION_AVAILABLE = 4,
  /* The fields alt and v_acc contain valid data. */
  UTM_DATA_AVAIL_FLAGS_ALTITUDE_AVAILABLE = 8,
  /* The field relative_alt contains valid data. */
  UTM_DATA_AVAIL_FLAGS_RELATIVE_ALTITUDE_AVAILABLE = 16,
  /* The fields vx and vy contain valid data. */
  UTM_DATA_AVAIL_FLAGS_HORIZONTAL_VELO_AVAILABLE = 32,
  /* The field vz contains valid data. */
  UTM_DATA_AVAIL_FLAGS_VERTICAL_VELO_AVAILABLE = 64,
  /* The fields next_lat, next_lon and next_alt contain valid data. */
  UTM_DATA_AVAIL_FLAGS_NEXT_WAYPOINT_AVAILABLE = 128
};

/* Cellular network radio type */
enum CELLULAR_NETWORK_RADIO_TYPE {
  CELLULAR_NETWORK_RADIO_TYPE_NONE = 0,
  CELLULAR_NETWORK_RADIO_TYPE_GSM = 1,
  CELLULAR_NETWORK_RADIO_TYPE_CDMA = 2,
  CELLULAR_NETWORK_RADIO_TYPE_WCDMA = 3,
  CELLULAR_NETWORK_RADIO_TYPE_LTE = 4
};

/* These flags encode the cellular network status */
enum CELLULAR_NETWORK_STATUS_FLAG {
  /* Roaming is active */
  CELLULAR_NETWORK_STATUS_FLAG_ROAMING = 1
};

/* Precision land modes (used in MAV_CMD_NAV_LAND). */
enum PRECISION_LAND_MODE {
  /* Normal (non-precision) landing. */
  PRECISION_LAND_MODE_DISABLED = 0,
  /* Use precision landing if beacon detected when land command accepted,
     otherwise land normally. */
  PRECISION_LAND_MODE_OPPORTUNISTIC = 1,
  /* Use precision landing, searching for beacon if not found when land command
     accepted (land normally if beacon cannot be found). */
  PRECISION_LAND_MODE_REQUIRED = 2
};

enum PARACHUTE_ACTION {
  /* Disable parachute release. */
  PARACHUTE_DISABLE = 0,
  /* Enable parachute release. */
  PARACHUTE_ENABLE = 1,
  /* Release parachute. */
  PARACHUTE_RELEASE = 2
};

// This enum is used to switch the anonymous union in ualberta_message.
enum UALBERTA_MESSAGE {
  UALBERTA_MESSAGE_HEARTBEAT = 0,
  UALBERTA_MESSAGE_SYS_STATUS = 1,
  UALBERTA_MESSAGE_SYSTEM_TIME = 2,
  UALBERTA_MESSAGE_PING = 4,
  UALBERTA_MESSAGE_CHANGE_OPERATOR_CONTROL = 5,
  UALBERTA_MESSAGE_CHANGE_OPERATOR_CONTROL_ACK = 6,
  UALBERTA_MESSAGE_AUTH_KEY = 7,
  UALBERTA_MESSAGE_LINK_NODE_STATUS = 8,
  UALBERTA_MESSAGE_SET_MODE = 11,
  UALBERTA_MESSAGE_PARAM_REQUEST_READ = 20,
  UALBERTA_MESSAGE_PARAM_REQUEST_LIST = 21,
  UALBERTA_MESSAGE_PARAM_VALUE = 22,
  UALBERTA_MESSAGE_PARAM_SET = 23,
  UALBERTA_MESSAGE_GPS_RAW_INT = 24,
  UALBERTA_MESSAGE_GPS_STATUS = 25,
  UALBERTA_MESSAGE_SCALED_IMU = 26,
  UALBERTA_MESSAGE_RAW_IMU = 27,
  UALBERTA_MESSAGE_RAW_PRESSURE = 28,
  UALBERTA_MESSAGE_SCALED_PRESSURE = 29,
  UALBERTA_MESSAGE_ATTITUDE = 30,
  UALBERTA_MESSAGE_ATTITUDE_QUATERNION = 31,
  UALBERTA_MESSAGE_LOCAL_POSITION_NED = 32,
  UALBERTA_MESSAGE_GLOBAL_POSITION_INT = 33,
  UALBERTA_MESSAGE_RC_CHANNELS_SCALED = 34,
  UALBERTA_MESSAGE_RC_CHANNELS_RAW = 35,
  UALBERTA_MESSAGE_SERVO_OUTPUT_RAW = 36,
  UALBERTA_MESSAGE_MISSION_REQUEST_PARTIAL_LIST = 37,
  UALBERTA_MESSAGE_MISSION_WRITE_PARTIAL_LIST = 38,
  UALBERTA_MESSAGE_MISSION_ITEM = 39,
  UALBERTA_MESSAGE_MISSION_REQUEST = 40,
  UALBERTA_MESSAGE_MISSION_SET_CURRENT = 41,
  UALBERTA_MESSAGE_MISSION_CURRENT = 42,
  UALBERTA_MESSAGE_MISSION_REQUEST_LIST = 43,
  UALBERTA_MESSAGE_MISSION_COUNT = 44,
  UALBERTA_MESSAGE_MISSION_CLEAR_ALL = 45,
  UALBERTA_MESSAGE_MISSION_ITEM_REACHED = 46,
  UALBERTA_MESSAGE_MISSION_ACK = 47,
  UALBERTA_MESSAGE_SET_GPS_GLOBAL_ORIGIN = 48,
  UALBERTA_MESSAGE_GPS_GLOBAL_ORIGIN = 49,
  UALBERTA_MESSAGE_PARAM_MAP_RC = 50,
  UALBERTA_MESSAGE_MISSION_REQUEST_INT = 51,
  UALBERTA_MESSAGE_MISSION_CHANGED = 52,
  UALBERTA_MESSAGE_SAFETY_SET_ALLOWED_AREA = 54,
  UALBERTA_MESSAGE_SAFETY_ALLOWED_AREA = 55,
  UALBERTA_MESSAGE_ATTITUDE_QUATERNION_COV = 61,
  UALBERTA_MESSAGE_NAV_CONTROLLER_OUTPUT = 62,
  UALBERTA_MESSAGE_GLOBAL_POSITION_INT_COV = 63,
  UALBERTA_MESSAGE_LOCAL_POSITION_NED_COV = 64,
  UALBERTA_MESSAGE_RC_CHANNELS = 65,
  UALBERTA_MESSAGE_REQUEST_DATA_STREAM = 66,
  UALBERTA_MESSAGE_DATA_STREAM = 67,
  UALBERTA_MESSAGE_MANUAL_CONTROL = 69,
  UALBERTA_MESSAGE_RC_CHANNELS_OVERRIDE = 70,
  UALBERTA_MESSAGE_MISSION_ITEM_INT = 73,
  UALBERTA_MESSAGE_VFR_HUD = 74,
  UALBERTA_MESSAGE_COMMAND_INT = 75,
  UALBERTA_MESSAGE_COMMAND_LONG = 76,
  UALBERTA_MESSAGE_COMMAND_ACK = 77,
  UALBERTA_MESSAGE_MANUAL_SETPOINT = 81,
  UALBERTA_MESSAGE_SET_ATTITUDE_TARGET = 82,
  UALBERTA_MESSAGE_ATTITUDE_TARGET = 83,
  UALBERTA_MESSAGE_SET_POSITION_TARGET_LOCAL_NED = 84,
  UALBERTA_MESSAGE_POSITION_TARGET_LOCAL_NED = 85,
  UALBERTA_MESSAGE_SET_POSITION_TARGET_GLOBAL_INT = 86,
  UALBERTA_MESSAGE_POSITION_TARGET_GLOBAL_INT = 87,
  UALBERTA_MESSAGE_LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET = 89,
  UALBERTA_MESSAGE_HIL_STATE = 90,
  UALBERTA_MESSAGE_HIL_CONTROLS = 91,
  UALBERTA_MESSAGE_HIL_RC_INPUTS_RAW = 92,
  UALBERTA_MESSAGE_HIL_ACTUATOR_CONTROLS = 93,
  UALBERTA_MESSAGE_OPTICAL_FLOW = 100,
  UALBERTA_MESSAGE_GLOBAL_VISION_POSITION_ESTIMATE = 101,
  UALBERTA_MESSAGE_VISION_POSITION_ESTIMATE = 102,
  UALBERTA_MESSAGE_VISION_SPEED_ESTIMATE = 103,
  UALBERTA_MESSAGE_VICON_POSITION_ESTIMATE = 104,
  UALBERTA_MESSAGE_HIGHRES_IMU = 105,
  UALBERTA_MESSAGE_OPTICAL_FLOW_RAD = 106,
  UALBERTA_MESSAGE_HIL_SENSOR = 107,
  UALBERTA_MESSAGE_SIM_STATE = 108,
  UALBERTA_MESSAGE_RADIO_STATUS = 109,
  UALBERTA_MESSAGE_FILE_TRANSFER_PROTOCOL = 110,
  UALBERTA_MESSAGE_TIMESYNC = 111,
  UALBERTA_MESSAGE_CAMERA_TRIGGER = 112,
  UALBERTA_MESSAGE_HIL_GPS = 113,
  UALBERTA_MESSAGE_HIL_OPTICAL_FLOW = 114,
  UALBERTA_MESSAGE_HIL_STATE_QUATERNION = 115,
  UALBERTA_MESSAGE_SCALED_IMU2 = 116,
  UALBERTA_MESSAGE_LOG_REQUEST_LIST = 117,
  UALBERTA_MESSAGE_LOG_ENTRY = 118,
  UALBERTA_MESSAGE_LOG_REQUEST_DATA = 119,
  UALBERTA_MESSAGE_LOG_DATA = 120,
  UALBERTA_MESSAGE_LOG_ERASE = 121,
  UALBERTA_MESSAGE_LOG_REQUEST_END = 122,
  UALBERTA_MESSAGE_GPS_INJECT_DATA = 123,
  UALBERTA_MESSAGE_GPS2_RAW = 124,
  UALBERTA_MESSAGE_POWER_STATUS = 125,
  UALBERTA_MESSAGE_SERIAL_CONTROL = 126,
  UALBERTA_MESSAGE_GPS_RTK = 127,
  UALBERTA_MESSAGE_GPS2_RTK = 128,
  UALBERTA_MESSAGE_SCALED_IMU3 = 129,
  UALBERTA_MESSAGE_DATA_TRANSMISSION_HANDSHAKE = 130,
  UALBERTA_MESSAGE_ENCAPSULATED_DATA = 131,
  UALBERTA_MESSAGE_DISTANCE_SENSOR = 132,
  UALBERTA_MESSAGE_TERRAIN_REQUEST = 133,
  UALBERTA_MESSAGE_TERRAIN_DATA = 134,
  UALBERTA_MESSAGE_TERRAIN_CHECK = 135,
  UALBERTA_MESSAGE_TERRAIN_REPORT = 136,
  UALBERTA_MESSAGE_SCALED_PRESSURE2 = 137,
  UALBERTA_MESSAGE_ATT_POS_MOCAP = 138,
  UALBERTA_MESSAGE_SET_ACTUATOR_CONTROL_TARGET = 139,
  UALBERTA_MESSAGE_ACTUATOR_CONTROL_TARGET = 140,
  UALBERTA_MESSAGE_ALTITUDE = 141,
  UALBERTA_MESSAGE_RESOURCE_REQUEST = 142,
  UALBERTA_MESSAGE_SCALED_PRESSURE3 = 143,
  UALBERTA_MESSAGE_FOLLOW_TARGET = 144,
  UALBERTA_MESSAGE_CONTROL_SYSTEM_STATE = 146,
  UALBERTA_MESSAGE_BATTERY_STATUS = 147,
  UALBERTA_MESSAGE_AUTOPILOT_VERSION = 148,
  UALBERTA_MESSAGE_LANDING_TARGET = 149,
  UALBERTA_MESSAGE_NAV_FILTER_BIAS = 220,
  UALBERTA_MESSAGE_RADIO_CALIBRATION = 221,
  UALBERTA_MESSAGE_UALBERTA_SYS_STATUS = 222,
  UALBERTA_MESSAGE_ESTIMATOR_STATUS = 230,
  UALBERTA_MESSAGE_WIND_COV = 231,
  UALBERTA_MESSAGE_GPS_INPUT = 232,
  UALBERTA_MESSAGE_GPS_RTCM_DATA = 233,
  UALBERTA_MESSAGE_HIGH_LATENCY = 234,
  UALBERTA_MESSAGE_HIGH_LATENCY2 = 235,
  UALBERTA_MESSAGE_VIBRATION = 241,
  UALBERTA_MESSAGE_HOME_POSITION = 242,
  UALBERTA_MESSAGE_SET_HOME_POSITION = 243,
  UALBERTA_MESSAGE_MESSAGE_INTERVAL = 244,
  UALBERTA_MESSAGE_EXTENDED_SYS_STATE = 245,
  UALBERTA_MESSAGE_ADSB_VEHICLE = 246,
  UALBERTA_MESSAGE_COLLISION = 247,
  UALBERTA_MESSAGE_V2_EXTENSION = 248,
  UALBERTA_MESSAGE_MEMORY_VECT = 249,
  UALBERTA_MESSAGE_DEBUG_VECT = 250,
  UALBERTA_MESSAGE_NAMED_VALUE_FLOAT = 251,
  UALBERTA_MESSAGE_NAMED_VALUE_INT = 252,
  UALBERTA_MESSAGE_STATUSTEXT = 253,
  UALBERTA_MESSAGE_DEBUG = 254,
  UALBERTA_MESSAGE_SETUP_SIGNING = 256,
  UALBERTA_MESSAGE_BUTTON_CHANGE = 257,
  UALBERTA_MESSAGE_PLAY_TUNE = 258,
  UALBERTA_MESSAGE_CAMERA_INFORMATION = 259,
  UALBERTA_MESSAGE_CAMERA_SETTINGS = 260,
  UALBERTA_MESSAGE_STORAGE_INFORMATION = 261,
  UALBERTA_MESSAGE_CAMERA_CAPTURE_STATUS = 262,
  UALBERTA_MESSAGE_CAMERA_IMAGE_CAPTURED = 263,
  UALBERTA_MESSAGE_FLIGHT_INFORMATION = 264,
  UALBERTA_MESSAGE_MOUNT_ORIENTATION = 265,
  UALBERTA_MESSAGE_LOGGING_DATA = 266,
  UALBERTA_MESSAGE_LOGGING_DATA_ACKED = 267,
  UALBERTA_MESSAGE_LOGGING_ACK = 268,
  UALBERTA_MESSAGE_VIDEO_STREAM_INFORMATION = 269,
  UALBERTA_MESSAGE_VIDEO_STREAM_STATUS = 270,
  UALBERTA_MESSAGE_WIFI_CONFIG_AP = 299,
  UALBERTA_MESSAGE_PROTOCOL_VERSION = 300,
  UALBERTA_MESSAGE_UAVCAN_NODE_STATUS = 310,
  UALBERTA_MESSAGE_UAVCAN_NODE_INFO = 311,
  UALBERTA_MESSAGE_PARAM_EXT_REQUEST_READ = 320,
  UALBERTA_MESSAGE_PARAM_EXT_REQUEST_LIST = 321,
  UALBERTA_MESSAGE_PARAM_EXT_VALUE = 322,
  UALBERTA_MESSAGE_PARAM_EXT_SET = 323,
  UALBERTA_MESSAGE_PARAM_EXT_ACK = 324,
  UALBERTA_MESSAGE_OBSTACLE_DISTANCE = 330,
  UALBERTA_MESSAGE_ODOMETRY = 331,
  UALBERTA_MESSAGE_TRAJECTORY_REPRESENTATION_WAYPOINTS = 332,
  UALBERTA_MESSAGE_TRAJECTORY_REPRESENTATION_BEZIER = 333,
  UALBERTA_MESSAGE_CELLULAR_STATUS = 334,
  UALBERTA_MESSAGE_ISBD_LINK_STATUS = 335,
  UALBERTA_MESSAGE_UTM_GLOBAL_POSITION = 340,
  UALBERTA_MESSAGE_DEBUG_FLOAT_ARRAY = 350,
  UALBERTA_MESSAGE_ORBIT_EXECUTION_STATUS = 360,
  UALBERTA_MESSAGE_STATUSTEXT_LONG = 365,
  UALBERTA_MESSAGE_SMART_BATTERY_INFO = 370,
  UALBERTA_MESSAGE_SMART_BATTERY_STATUS = 371,
  UALBERTA_MESSAGE_ACTUATOR_OUTPUT_STATUS = 375,
  UALBERTA_MESSAGE_TIME_ESTIMATE_TO_TARGET = 380,
  UALBERTA_MESSAGE_WHEEL_DISTANCE = 9000
};

// A message contains the information encoded in a mavlink v1 or v2 frame
// header, plus the frame payload. It can always be serialized into maximally
// 280 bytes.
struct ualberta_message {
  // bytes consumed when deserializing, or needed when serializing.
  // This is the sum of header (v1/v2) + payload lengths, set by _serialize or
  // _deserialize functions.
  size_t len;
  // if non zero, the crc was bad on deserializing.  ignored when serializing.
  uint16_t crc;

  // System, Component and Link IDs
  uint8_t sys_id;
  uint8_t comp_id;
  uint8_t link_id; // only used on signed V2

  // These only used for signed V2 messages, should be zero otherwise.
  uint64_t timestamp; //  10 microsecond units since 1st January 2015 GMT (unix
                      //  time 1420070400)
  uint64_t signature;

  // Lower 8 bits of seqNr are used to set the seq byte on serialized messages.
  // On deserialized messages, used to update seqDropped (ignored for
  // serialization). The sequence number is supposed to be unique per stream
  // (sys/comp/link), so the caller must manage that explicitly if these change.
  uint64_t seq_nr;
  uint32_t seq_dropped;

  // msg_id determines which of the union members is set.
  enum UALBERTA_MESSAGE msg_id;
  union {
    /* The heartbeat message shows that a system or component is present and
     * responding. The type and autopilot fields (along with the message
     * component id), allow the receiving system to treat further messages from
     * this system appropriately (e.g. by laying out the user interface based on
     * the autopilot). This microservice is documented at
     * https://mavlink.io/en/services/heartbeat.html */
    struct {
      uint32_t
          custom_mode; /* A bitfield for use for autopilot-specific flags */
      enum MAV_TYPE
          type; /* (uint8_t) Type of the system (quadrotor, helicopter, etc.).
                   Components use the same type as their associated system. */
      enum MAV_AUTOPILOT autopilot; /* (uint8_t) Autopilot type / class. */
      enum MAV_MODE_FLAG base_mode; /* (uint8_t) System mode bitmap. */
      enum MAV_STATE system_status; /* (uint8_t) System status flag. */
      uint8_t mavlink_version; /* MAVLink version, not writable by user, gets
                                  added by protocol because of magic data type:
                                  uint8_t_mavlink_version */
    } heartbeat;

    /* The general system state. If the system is following the MAVLink
     * standard, the system state is mainly defined by three orthogonal
     * states/modes: The system mode, which is either LOCKED (motors shut down
     * and locked), MANUAL (system under RC control), GUIDED (system with
     * autonomous position control, position setpoint controlled manually) or
     * AUTO (system guided by path/waypoint planner). The NAV_MODE defined the
     * current flight state: LIFTOFF (often an open-loop maneuver), LANDING,
     * WAYPOINTS or VECTOR. This represents the internal navigation state
     * machine. The system status shows whether the system is currently active
     * or not and if an emergency occurred. During the CRITICAL and EMERGENCY
     * states the MAV is still considered to be active, but should start
     * emergency procedures autonomously. After a failure occurred it should
     * first move from active to critical to allow manual intervention and then
     * move to emergency after a certain timeout. */
    struct {
      enum MAV_SYS_STATUS_SENSOR
          onboard_control_sensors_present; /* (uint32_t) Bitmap showing which
                                              onboard controllers and sensors
                                              are present. Value of 0: not
                                              present. Value of 1: present. */
      enum MAV_SYS_STATUS_SENSOR
          onboard_control_sensors_enabled; /* (uint32_t) Bitmap showing which
                                              onboard controllers and sensors
                                              are enabled:  Value of 0: not
                                              enabled. Value of 1: enabled. */
      enum MAV_SYS_STATUS_SENSOR
          onboard_control_sensors_health; /* (uint32_t) Bitmap showing which
                                             onboard controllers and sensors
                                             have an error (or are operational).
                                             Value of 0: error. Value of 1:
                                             healthy. */
      uint16_t load; /* Maximum usage in percent of the mainloop time. Values:
                        [0-1000] - should always be below 1000 */
      uint16_t voltage_battery; /* Battery voltage */
      int16_t current_battery;  /* Battery current, -1: autopilot does not
                                   measure the current */
      uint16_t drop_rate_comm;  /* Communication drop rate, (UART, I2C, SPI,
                                   CAN), dropped packets on all links (packets
                                   that were corrupted on reception on the MAV)
                                 */
      uint16_t errors_comm;     /* Communication errors (UART, I2C, SPI, CAN),
                                   dropped packets on all links (packets that were
                                   corrupted on reception on the MAV) */
      uint16_t errors_count1;   /* Autopilot-specific errors */
      uint16_t errors_count2;   /* Autopilot-specific errors */
      uint16_t errors_count3;   /* Autopilot-specific errors */
      uint16_t errors_count4;   /* Autopilot-specific errors */
      int8_t battery_remaining; /* Remaining battery energy, -1: autopilot
                                   estimate the remaining battery */
    } sys_status;

    /* The system time is the time of the master clock, typically the computer
     * clock of the main onboard computer. */
    struct {
      uint64_t time_unix_usec; /* Timestamp (UNIX epoch time). */
      uint32_t time_boot_ms;   /* Timestamp (time since system boot). */
    } system_time;

    /* A ping message either requesting or responding to a ping. This allows to
     * measure the system latencies, including serial port, radio modem and UDP
     * connections. The ping microservice is documented at
     * https://mavlink.io/en/services/ping.html */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint32_t seq;  /* PING sequence */
      uint8_t
          target_system; /* 0: request ping from all receiving systems. If
                            greater than 0: message is a ping response and
                            number is the system id of the requesting system */
      uint8_t target_component; /* 0: request ping from all receiving
                                   components. If greater than 0: message is a
                                   ping response and number is the component id
                                   of the requesting component. */
    } ping;

    /* Request to control this MAV */
    struct {
      uint8_t target_system;   /* System the GCS requests control for */
      uint8_t control_request; /* 0: request control of this MAV, 1: Release
                                  control of this MAV */
      uint8_t version;         /* 0: key as plaintext, 1-255: future, different
                                  hashing/encryption variants. The GCS should in general
                                  use the safest mode possible initially and then
                                  gradually move down the encryption level if it gets a
                                  NACK message indicating an encryption mismatch. */
      char
          passkey
              [25]; /* Password / Key, depending on version plaintext or
                       encrypted. 25 or less characters, NULL terminated. The
                       characters may involve A-Z, a-z, 0-9, and "!?,.-" */
    } change_operator_control;

    /* Accept / deny control of this MAV */
    struct {
      uint8_t gcs_system_id;   /* ID of the GCS this message  */
      uint8_t control_request; /* 0: request control of this MAV, 1: Release
                                  control of this MAV */
      uint8_t
          ack; /* 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey
                  encryption method, 3: NACK: Already under control */
    } change_operator_control_ack;

    /* Emit an encrypted signature / key identifying this system. PLEASE NOTE:
     * This protocol has been kept simple, so transmitting the key requires an
     * encrypted channel for true safety. */
    struct {
      char key[32]; /* key */
    } auth_key;

    /* Status generated in each node in the communication chain and injected
     * into MAVLink stream. */
    struct {
      uint64_t timestamp;         /* Timestamp (time since system boot). */
      uint32_t tx_rate;           /* Transmit rate */
      uint32_t rx_rate;           /* Receive rate */
      uint32_t messages_sent;     /* Messages sent */
      uint32_t messages_received; /* Messages received (estimated from counting
                                     seq) */
      uint32_t messages_lost; /* Messages lost (estimated from counting seq) */
      uint16_t rx_parse_err;  /* Number of bytes that could not be parsed
                                 correctly. */
      uint16_t tx_overflows;  /* Transmit buffer overflows. This number wraps
                                 around as it reaches UINT16_MAX */
      uint16_t rx_overflows;  /* Receive buffer overflows. This number wraps
                                 around as it reaches UINT16_MAX */
      uint8_t tx_buf;         /* Remaining free transmit buffer space */
      uint8_t rx_buf;         /* Remaining free receive buffer space */
    } link_node_status;

    /* Set the system mode, as defined by enum MAV_MODE. There is no target
     * component id as the mode is by definition for the overall aircraft, not
     * only for one component. */
    struct {
      uint32_t custom_mode;  /* The new autopilot-specific mode. This field can
                                be ignored by an autopilot. */
      uint8_t target_system; /* The system setting the mode */
      enum MAV_MODE base_mode; /* (uint8_t) The new base mode. */
    } set_mode;

    /* Request to read the onboard parameter with the param_id string id.
     * Onboard parameters are stored as key[const char*] -> value[float]. This
     * allows to send a parameter to any other component (such as the GCS)
     * without the need of previous knowledge of possible parameter names. Thus
     * the same GCS can store different parameters for different autopilots. See
     * also https://mavlink.io/en/services/parameter.html for a full
     * documentation of QGroundControl and IMU code. */
    struct {
      int16_t
          param_index; /* Parameter index. Send -1 to use the param ID field as
                          identifier (else the param id will be ignored) */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      char param_id[16]; /* Onboard parameter id, terminated by NULL if the
                            length is less than 16 human-readable chars and
                            WITHOUT null termination (NULL) byte if the length
                            is exactly 16 chars - applications have to provide
                            16+1 bytes storage if the ID is stored as string */
    } param_request_read;

    /* Request all parameters of this component. After this request, all
     * parameters are emitted. The parameter microservice is documented at
     * https://mavlink.io/en/services/parameter.html */
    struct {
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
    } param_request_list;

    /* Emit the value of a onboard parameter. The inclusion of param_count and
     * param_index in the message allows the recipient to keep track of received
     * parameters and allows him to re-request missing parameters after a loss
     * or timeout. The parameter microservice is documented at
     * https://mavlink.io/en/services/parameter.html */
    struct {
      float param_value;    /* Onboard parameter value */
      uint16_t param_count; /* Total number of onboard parameters */
      uint16_t param_index; /* Index of this onboard parameter */
      char param_id[16];    /* Onboard parameter id, terminated by NULL if the
                               length is less than 16 human-readable chars and
                               WITHOUT null termination (NULL) byte if the length
                               is exactly 16 chars - applications have to provide
                               16+1 bytes storage if the ID is stored as string */
      enum MAV_PARAM_TYPE param_type; /* (uint8_t) Onboard parameter type. */
    } param_value;

    /* Set a parameter value (write new value to permanent storage). IMPORTANT:
     * The receiving component should acknowledge the new parameter value by
     * sending a PARAM_VALUE message to all communication partners. This will
     * also ensure that multiple GCS all have an up-to-date list of all
     * parameters. If the sending GCS did not receive a PARAM_VALUE message
     * within its timeout time, it should re-send the PARAM_SET message. The
     * parameter microservice is documented at
     * https://mavlink.io/en/services/parameter.html */
    struct {
      float param_value;        /* Onboard parameter value */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      char param_id[16]; /* Onboard parameter id, terminated by NULL if the
                            length is less than 16 human-readable chars and
                            WITHOUT null termination (NULL) byte if the length
                            is exactly 16 chars - applications have to provide
                            16+1 bytes storage if the ID is stored as string */
      enum MAV_PARAM_TYPE param_type; /* (uint8_t) Onboard parameter type. */
    } param_set;

    /* The global position, as returned by the Global Positioning System (GPS).
     * This is                 NOT the global position estimate of the system,
     * but rather a RAW sensor value. See message GLOBAL_POSITION for the global
     * position estimate. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      int32_t lat;   /* Latitude (WGS84, EGM96 ellipsoid) */
      int32_t lon;   /* Longitude (WGS84, EGM96 ellipsoid) */
      int32_t alt;   /* Altitude (MSL). Positive for up. Note that virtually all
                        GPS modules provide the MSL altitude in addition to the
                        WGS84 altitude. */
      uint16_t eph;  /* GPS HDOP horizontal dilution of position (unitless). If
                        unknown, set to: UINT16_MAX */
      uint16_t epv;  /* GPS VDOP vertical dilution of position (unitless). If
                        unknown, set to: UINT16_MAX */
      uint16_t vel;  /* GPS ground speed. If unknown, set to: UINT16_MAX */
      uint16_t cog;  /* Course over ground (NOT heading, but direction of
                        movement) in degrees * 100, 0.0..359.99 degrees. If
                        unknown, set to: UINT16_MAX */
      enum GPS_FIX_TYPE fix_type; /* (uint8_t) GPS fix type. */
      uint8_t satellites_visible; /* Number of satellites visible. If unknown,
                                     set to 255 */
      int32_t alt_ellipsoid;      /* EXTENSION Altitude (above WGS84, EGM96
                                     ellipsoid). Positive for up. */
      uint32_t h_acc;   /* EXTENSION Position uncertainty. Positive for up. */
      uint32_t v_acc;   /* EXTENSION Altitude uncertainty. Positive for up. */
      uint32_t vel_acc; /* EXTENSION Speed uncertainty. Positive for up. */
      uint32_t hdg_acc; /* EXTENSION Heading / track uncertainty */
    } gps_raw_int;

    /* The positioning status, as reported by GPS. This message is intended to
     * display status information about each satellite visible to the receiver.
     * See message GLOBAL_POSITION for the global position estimate. This
     * message can contain information for up to 20 satellites. */
    struct {
      uint8_t satellites_visible;      /* Number of satellites visible */
      uint8_t satellite_prn[20];       /* Global satellite ID */
      uint8_t satellite_used[20];      /* 0: Satellite not used, 1: used for
                                          localization */
      uint8_t satellite_elevation[20]; /* Elevation (0: right on top of
                                          receiver, 90: on the horizon) of
                                          satellite */
      uint8_t satellite_azimuth[20];   /* Direction of satellite, 0: 0 deg, 255:
                                          360 deg. */
      uint8_t satellite_snr[20];       /* Signal to noise ratio of satellite */
    } gps_status;

    /* The RAW IMU readings for the usual 9DOF sensor setup. This message should
     * contain the scaled values to the described units */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      int16_t xacc;          /* X acceleration */
      int16_t yacc;          /* Y acceleration */
      int16_t zacc;          /* Z acceleration */
      int16_t xgyro;         /* Angular speed around X axis */
      int16_t ygyro;         /* Angular speed around Y axis */
      int16_t zgyro;         /* Angular speed around Z axis */
      int16_t xmag;          /* X Magnetic field */
      int16_t ymag;          /* Y Magnetic field */
      int16_t zmag;          /* Z Magnetic field */
    } scaled_imu;

    /* The RAW IMU readings for the usual 9DOF sensor setup. This message should
     * always contain the true raw values without any scaling to allow data
     * capture and system debugging. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      int16_t xacc;  /* X acceleration (raw) */
      int16_t yacc;  /* Y acceleration (raw) */
      int16_t zacc;  /* Z acceleration (raw) */
      int16_t xgyro; /* Angular speed around X axis (raw) */
      int16_t ygyro; /* Angular speed around Y axis (raw) */
      int16_t zgyro; /* Angular speed around Z axis (raw) */
      int16_t xmag;  /* X Magnetic field (raw) */
      int16_t ymag;  /* Y Magnetic field (raw) */
      int16_t zmag;  /* Z Magnetic field (raw) */
    } raw_imu;

    /* The RAW pressure readings for the typical setup of one absolute pressure
     * and one differential pressure sensor. The sensor values should be the
     * raw, UNSCALED ADC values. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      int16_t press_abs;   /* Absolute pressure (raw) */
      int16_t press_diff1; /* Differential pressure 1 (raw, 0 if nonexistent) */
      int16_t press_diff2; /* Differential pressure 2 (raw, 0 if nonexistent) */
      int16_t temperature; /* Raw Temperature measurement (raw) */
    } raw_pressure;

    /* The pressure readings for the typical setup of one absolute and
     * differential pressure sensor. The units are as specified in each field.
     */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float press_abs;       /* Absolute pressure */
      float press_diff;      /* Differential pressure 1 */
      int16_t temperature;   /* Temperature */
    } scaled_pressure;

    /* The attitude in the aeronautical frame (right-handed, Z-down, X-front,
     * Y-right). */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float roll;            /* Roll angle (-pi..+pi) */
      float pitch;           /* Pitch angle (-pi..+pi) */
      float yaw;             /* Yaw angle (-pi..+pi) */
      float rollspeed;       /* Roll angular speed */
      float pitchspeed;      /* Pitch angular speed */
      float yawspeed;        /* Yaw angular speed */
    } attitude;

    /* The attitude in the aeronautical frame (right-handed, Z-down, X-front,
     * Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a
     * zero rotation would be expressed as (1 0 0 0). */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float q1;         /* Quaternion component 1, w (1 in null-rotation) */
      float q2;         /* Quaternion component 2, x (0 in null-rotation) */
      float q3;         /* Quaternion component 3, y (0 in null-rotation) */
      float q4;         /* Quaternion component 4, z (0 in null-rotation) */
      float rollspeed;  /* Roll angular speed */
      float pitchspeed; /* Pitch angular speed */
      float yawspeed;   /* Yaw angular speed */
    } attitude_quaternion;

    /* The filtered local position (e.g. fused computer vision and
     * accelerometers). Coordinate frame is right-handed, Z-axis down
     * (aeronautical frame, NED / north-east-down convention) */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float x;               /* X Position */
      float y;               /* Y Position */
      float z;               /* Z Position */
      float vx;              /* X Speed */
      float vy;              /* Y Speed */
      float vz;              /* Z Speed */
    } local_position_ned;

    /* The filtered global position (e.g. fused GPS and accelerometers). The
     * position is in GPS-frame (right-handed, Z-up). It                is
     * designed as scaled integer message since the resolution of float is not
     * sufficient. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      int32_t lat;           /* Latitude, expressed */
      int32_t lon;           /* Longitude, expressed */
      int32_t alt; /* Altitude (MSL). Note that virtually all GPS modules
                      provide both WGS84 and MSL. */
      int32_t relative_alt; /* Altitude above ground */
      int16_t vx;           /* Ground X Speed (Latitude, positive north) */
      int16_t vy;           /* Ground Y Speed (Longitude, positive east) */
      int16_t vz;           /* Ground Z Speed (Altitude, positive down) */
      uint16_t hdg; /* Vehicle heading (yaw angle), 0.0..359.99 degrees. If
                       unknown, set to: UINT16_MAX */
    } global_position_int;

    /* The scaled values of the RC channels received: (-100%) -10000, (0%) 0,
     * (100%) 10000. Channels that are inactive should be set to UINT16_MAX. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      int16_t chan1_scaled;  /* RC channel 1 value scaled. */
      int16_t chan2_scaled;  /* RC channel 2 value scaled. */
      int16_t chan3_scaled;  /* RC channel 3 value scaled. */
      int16_t chan4_scaled;  /* RC channel 4 value scaled. */
      int16_t chan5_scaled;  /* RC channel 5 value scaled. */
      int16_t chan6_scaled;  /* RC channel 6 value scaled. */
      int16_t chan7_scaled;  /* RC channel 7 value scaled. */
      int16_t chan8_scaled;  /* RC channel 8 value scaled. */
      uint8_t port; /* Servo output port (set of 8 outputs = 1 port). Flight
                       stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
                     */
      uint8_t rssi; /* Receive signal strength indicator in device-dependent
                       units/scale. Values: [0-254], 255: invalid/unknown. */
    } rc_channels_scaled;

    /* The RAW values of the RC channels received. The standard PPM modulation
     * is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. A value of
     * UINT16_MAX implies the channel is unused. Individual
     * receivers/transmitters might violate this specification. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      uint16_t chan1_raw;    /* RC channel 1 value. */
      uint16_t chan2_raw;    /* RC channel 2 value. */
      uint16_t chan3_raw;    /* RC channel 3 value. */
      uint16_t chan4_raw;    /* RC channel 4 value. */
      uint16_t chan5_raw;    /* RC channel 5 value. */
      uint16_t chan6_raw;    /* RC channel 6 value. */
      uint16_t chan7_raw;    /* RC channel 7 value. */
      uint16_t chan8_raw;    /* RC channel 8 value. */
      uint8_t port; /* Servo output port (set of 8 outputs = 1 port). Flight
                       stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
                     */
      uint8_t rssi; /* Receive signal strength indicator in device-dependent
                       units/scale. Values: [0-254], 255: invalid/unknown. */
    } rc_channels_raw;

    /* The RAW values of the servo outputs (for RC input from the remote, use
     * the RC_CHANNELS messages). The standard PPM modulation is as follows:
     * 1000 microseconds: 0%, 2000 microseconds: 100%. */
    struct {
      uint32_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint16_t servo1_raw; /* Servo output 1 value */
      uint16_t servo2_raw; /* Servo output 2 value */
      uint16_t servo3_raw; /* Servo output 3 value */
      uint16_t servo4_raw; /* Servo output 4 value */
      uint16_t servo5_raw; /* Servo output 5 value */
      uint16_t servo6_raw; /* Servo output 6 value */
      uint16_t servo7_raw; /* Servo output 7 value */
      uint16_t servo8_raw; /* Servo output 8 value */
      uint8_t port; /* Servo output port (set of 8 outputs = 1 port). Flight
                       stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.
                     */
      uint16_t servo9_raw;  /* EXTENSION Servo output 9 value */
      uint16_t servo10_raw; /* EXTENSION Servo output 10 value */
      uint16_t servo11_raw; /* EXTENSION Servo output 11 value */
      uint16_t servo12_raw; /* EXTENSION Servo output 12 value */
      uint16_t servo13_raw; /* EXTENSION Servo output 13 value */
      uint16_t servo14_raw; /* EXTENSION Servo output 14 value */
      uint16_t servo15_raw; /* EXTENSION Servo output 15 value */
      uint16_t servo16_raw; /* EXTENSION Servo output 16 value */
    } servo_output_raw;

    /* Request a partial list of mission items from the system/component.
     * https://mavlink.io/en/services/mission.html. If start and end index are
     * the same, just send one waypoint. */
    struct {
      int16_t start_index;   /* Start index */
      int16_t end_index;     /* End index, -1 by default (-1: send list to end).
                                Else a valid index of the list */
      uint8_t target_system; /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_request_partial_list;

    /* This message is sent to the MAV to write a partial list. If start index
     * == end index, only one item will be transmitted / updated. If the start
     * index is NOT 0 and above the current list size, this request should be
     * REJECTED! */
    struct {
      int16_t start_index;   /* Start index. Must be smaller / equal to the
                                largest index of the current onboard list. */
      int16_t end_index;     /* End index, equal or greater than start index. */
      uint8_t target_system; /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_write_partial_list;

    /* Message encoding a mission item. This message is emitted to announce
     * the presence of a mission item and to set a mission item on the system.
     * The mission item can be either in x, y, z meters (type: LOCAL) or x:lat,
     * y:lon, z:altitude. Local frame is Z-down, right handed (NED), global
     * frame is Z-up, right handed (ENU). See also
     * https://mavlink.io/en/services/mission.html. */
    struct {
      float param1; /* PARAM1, see MAV_CMD enum */
      float param2; /* PARAM2, see MAV_CMD enum */
      float param3; /* PARAM3, see MAV_CMD enum */
      float param4; /* PARAM4, see MAV_CMD enum */
      float x;      /* PARAM5 / local: X coordinate, global: latitude */
      float y;      /* PARAM6 / local: Y coordinate, global: longitude */
      float z; /* PARAM7 / local: Z coordinate, global: altitude (relative or
                  absolute, depending on frame). */
      uint16_t seq; /* Sequence */
      enum MAV_CMD
          command; /* (uint16_t) The scheduled action for the waypoint. */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_FRAME
          frame;       /* (uint8_t) The coordinate system of the waypoint. */
      uint8_t current; /* false:0, true:1 */
      uint8_t autocontinue; /* Autocontinue to next waypoint */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_item;

    /* Request the information of the mission item with the sequence number seq.
     * The response of the system to this message should be a MISSION_ITEM
     * message. https://mavlink.io/en/services/mission.html */
    struct {
      uint16_t seq;             /* Sequence */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_request;

    /* Set the mission item with sequence number seq as current item. This means
     * that the MAV will continue to this mission item on the shortest path (not
     * following the mission items in-between). */
    struct {
      uint16_t seq;             /* Sequence */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
    } mission_set_current;

    /* Message that announces the sequence number of the current active mission
     * item. The MAV will fly towards this mission item. */
    struct {
      uint16_t seq; /* Sequence */
    } mission_current;

    /* Request the overall list of mission items from the system/component. */
    struct {
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_request_list;

    /* This message is emitted as response to MISSION_REQUEST_LIST by the MAV
     * and to initiate a write transaction. The GCS can then request the
     * individual mission item based on the knowledge of the total number of
     * waypoints. */
    struct {
      uint16_t count;           /* Number of mission items in the sequence */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_count;

    /* Delete all mission items at once. */
    struct {
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_clear_all;

    /* A certain mission item has been reached. The system will either hold this
     * position (or circle on the orbit) or (if the autocontinue on the WP was
     * set) continue to the next waypoint. */
    struct {
      uint16_t seq; /* Sequence */
    } mission_item_reached;

    /* Acknowledgment message during waypoint handling. The type field states if
     * this message is a positive ack (type=0) or if an error happened
     * (type=non-zero). */
    struct {
      uint8_t target_system;        /* System ID */
      uint8_t target_component;     /* Component ID */
      enum MAV_MISSION_RESULT type; /* (uint8_t) Mission result. */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_ack;

    /* As local waypoints exist, the global waypoint reference allows to
     * transform between the local coordinate frame and the global (GPS)
     * coordinate frame. This can be necessary when e.g. in- and outdoor
     * settings are connected and the MAV should move from in- to outdoor. */
    struct {
      int32_t latitude;      /* Latitude (WGS84) */
      int32_t longitude;     /* Longitude (WGS84) */
      int32_t altitude;      /* Altitude (MSL). Positive for up. */
      uint8_t target_system; /* System ID */
      uint64_t
          time_usec; /* EXTENSION Timestamp (UNIX Epoch time or time since
                        system boot). The receiving end can infer timestamp
                        format (since 1.1.1970 or since system boot) by checking
                        for the magnitude the number. */
    } set_gps_global_origin;

    /* Once the MAV sets a new GPS-Local correspondence, this message announces
     * the origin (0,0,0) position */
    struct {
      int32_t latitude;  /* Latitude (WGS84) */
      int32_t longitude; /* Longitude (WGS84) */
      int32_t altitude;  /* Altitude (MSL). Positive for up. */
      uint64_t
          time_usec; /* EXTENSION Timestamp (UNIX Epoch time or time since
                        system boot). The receiving end can infer timestamp
                        format (since 1.1.1970 or since system boot) by checking
                        for the magnitude the number. */
    } gps_global_origin;

    /* Bind a RC channel to a parameter. The parameter should change according
     * to the RC channel value. */
    struct {
      float param_value0; /* Initial parameter value */
      float scale; /* Scale, maps the RC range [-1, 1] to a parameter value */
      float param_value_min; /* Minimum param value. The protocol does not
                                define if this overwrites an onboard minimum
                                value. (Depends on implementation) */
      float param_value_max; /* Maximum param value. The protocol does not
                                define if this overwrites an onboard maximum
                                value. (Depends on implementation) */
      int16_t
          param_index; /* Parameter index. Send -1 to use the param ID field as
                          identifier (else the param id will be ignored), send
                          -2 to disable any existing map for this
                          rc_channel_index. */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      char param_id[16]; /* Onboard parameter id, terminated by NULL if the
                            length is less than 16 human-readable chars and
                            WITHOUT null termination (NULL) byte if the length
                            is exactly 16 chars - applications have to provide
                            16+1 bytes storage if the ID is stored as string */
      uint8_t parameter_rc_channel_index; /* Index of parameter RC channel. Not
                                             equal to the RC channel id.
                                             Typically corresponds to a
                                             potentiometer-knob on the RC. */
    } param_map_rc;

    /* Request the information of the mission item with the sequence number seq.
     * The response of the system to this message should be a MISSION_ITEM_INT
     * message. https://mavlink.io/en/services/mission.html */
    struct {
      uint16_t seq;             /* Sequence */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_request_int;

    /* A broadcast message to notify any ground station or SDK if a mission,
     * geofence or safe points have changed on the vehicle. */
    struct {
      int16_t
          start_index; /* Start index for partial mission change (-1 for all
                          items). */
      int16_t
          end_index; /* End index of a partial mission change. -1 is a synonym
                        for the last mission item (i.e. selects all items from
                        start_index). Ignore field if start_index=-1. */
      uint8_t origin_sysid; /* System ID of the author of the new mission. */
      enum MAV_COMPONENT origin_compid;   /* (uint8_t) Compnent ID of the author
                                             of the new mission. */
      enum MAV_MISSION_TYPE mission_type; /* (uint8_t) Mission type. */
    } mission_changed;

    /* Set a safety zone (volume), which is defined by two corners of a cube.
     * This message can be used to tell the MAV which setpoints/waypoints to
     * accept and which to reject. Safety areas are often enforced by national
     * or competition regulations. */
    struct {
      float p1x;                /* x position 1 / Latitude 1 */
      float p1y;                /* y position 1 / Longitude 1 */
      float p1z;                /* z position 1 / Altitude 1 */
      float p2x;                /* x position 2 / Latitude 2 */
      float p2y;                /* y position 2 / Longitude 2 */
      float p2z;                /* z position 2 / Altitude 2 */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_FRAME
          frame; /* (uint8_t) Coordinate frame. Can be either global, GPS,
                    right-handed with Z axis up or local, right handed, Z axis
                    down. */
    } safety_set_allowed_area;

    /* Read out the safety zone the MAV currently assumes. */
    struct {
      float p1x; /* x position 1 / Latitude 1 */
      float p1y; /* y position 1 / Longitude 1 */
      float p1z; /* z position 1 / Altitude 1 */
      float p2x; /* x position 2 / Latitude 2 */
      float p2y; /* y position 2 / Longitude 2 */
      float p2z; /* z position 2 / Altitude 2 */
      enum MAV_FRAME
          frame; /* (uint8_t) Coordinate frame. Can be either global, GPS,
                    right-handed with Z axis up or local, right handed, Z axis
                    down. */
    } safety_allowed_area;

    /* The attitude in the aeronautical frame (right-handed, Z-down, X-front,
     * Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a
     * zero rotation would be expressed as (1 0 0 0). */
    struct {
      uint64_t
          time_usec;   /* Timestamp (UNIX Epoch time or time since system boot).
                          The receiving end can infer timestamp format
                          (since 1.1.1970 or since system boot) by checking for
                          the magnitude the number. */
      float q[4];      /* Quaternion components, w, x, y, z (1 0 0 0 is the
                          null-rotation) */
      float rollspeed; /* Roll angular speed */
      float pitchspeed; /* Pitch angular speed */
      float yawspeed;   /* Yaw angular speed */
      float
          covariance[9]; /* Row-major representation of a 3x3 attitude
                            covariance matrix (states: roll, pitch, yaw; first
                            three entries are the first ROW, next three entries
                            are the second row, etc.). If unknown, assign NaN
                            value to first element in the array. */
    } attitude_quaternion_cov;

    /* The state of the fixed wing navigation and position controller. */
    struct {
      float nav_roll;         /* Current desired roll */
      float nav_pitch;        /* Current desired pitch */
      float alt_error;        /* Current altitude error */
      float aspd_error;       /* Current airspeed error */
      float xtrack_error;     /* Current crosstrack error on x-y plane */
      int16_t nav_bearing;    /* Current desired heading */
      int16_t target_bearing; /* Bearing to current waypoint/target */
      uint16_t wp_dist;       /* Distance to active waypoint */
    } nav_controller_output;

    /* The filtered global position (e.g. fused GPS and accelerometers). The
     * position is in GPS-frame (right-handed, Z-up). It  is designed as scaled
     * integer message since the resolution of float is not sufficient. NOTE:
     * This message is intended for onboard networks / companion computers and
     * higher-bandwidth links and optimized for accuracy and completeness.
     * Please use the GLOBAL_POSITION_INT message for a minimal subset. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      int32_t lat;   /* Latitude */
      int32_t lon;   /* Longitude */
      int32_t alt;   /* Altitude in meters above MSL */
      int32_t relative_alt; /* Altitude above ground */
      float vx;             /* Ground X Speed (Latitude) */
      float vy;             /* Ground Y Speed (Longitude) */
      float vz;             /* Ground Z Speed (Altitude) */
      float
          covariance[36]; /* Row-major representation of a 6x6 position and
                             velocity 6x6 cross-covariance matrix (states: lat,
                             lon, alt, vx, vy, vz; first six entries are the
                             first ROW, next six entries are the second row,
                             etc.). If unknown, assign NaN value to first
                             element in the array. */
      enum MAV_ESTIMATOR_TYPE estimator_type; /* (uint8_t) Class id of the
                                                 estimator this estimate
                                                 originated from. */
    } global_position_int_cov;

    /* The filtered local position (e.g. fused computer vision and
     * accelerometers). Coordinate frame is right-handed, Z-axis down
     * (aeronautical frame, NED / north-east-down convention) */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float x;       /* X Position */
      float y;       /* Y Position */
      float z;       /* Z Position */
      float vx;      /* X Speed */
      float vy;      /* Y Speed */
      float vz;      /* Z Speed */
      float ax;      /* X Acceleration */
      float ay;      /* Y Acceleration */
      float az;      /* Z Acceleration */
      float covariance[45]; /* Row-major representation of position, velocity
                               and acceleration 9x9 cross-covariance matrix
                               upper right triangle (states: x, y, z, vx, vy,
                               vz, ax, ay, az; first nine entries are the first
                               ROW, next eight entries are the second row,
                               etc.). If unknown, assign NaN value to first
                               element in the array. */
      enum MAV_ESTIMATOR_TYPE estimator_type; /* (uint8_t) Class id of the
                                                 estimator this estimate
                                                 originated from. */
    } local_position_ned_cov;

    /* The PPM values of the RC channels received. The standard PPM modulation
     * is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.  A value
     * of UINT16_MAX implies the channel is unused. Individual
     * receivers/transmitters might violate this specification. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      uint16_t chan1_raw;    /* RC channel 1 value. */
      uint16_t chan2_raw;    /* RC channel 2 value. */
      uint16_t chan3_raw;    /* RC channel 3 value. */
      uint16_t chan4_raw;    /* RC channel 4 value. */
      uint16_t chan5_raw;    /* RC channel 5 value. */
      uint16_t chan6_raw;    /* RC channel 6 value. */
      uint16_t chan7_raw;    /* RC channel 7 value. */
      uint16_t chan8_raw;    /* RC channel 8 value. */
      uint16_t chan9_raw;    /* RC channel 9 value. */
      uint16_t chan10_raw;   /* RC channel 10 value. */
      uint16_t chan11_raw;   /* RC channel 11 value. */
      uint16_t chan12_raw;   /* RC channel 12 value. */
      uint16_t chan13_raw;   /* RC channel 13 value. */
      uint16_t chan14_raw;   /* RC channel 14 value. */
      uint16_t chan15_raw;   /* RC channel 15 value. */
      uint16_t chan16_raw;   /* RC channel 16 value. */
      uint16_t chan17_raw;   /* RC channel 17 value. */
      uint16_t chan18_raw;   /* RC channel 18 value. */
      uint8_t
          chancount; /* Total number of RC channels being received. This can be
                        larger than 18, indicating that more channels are
                        available but not given in this message. This value
                        should be 0 when no RC channels are available. */
      uint8_t rssi;  /* Receive signal strength indicator in device-dependent
                        units/scale. Values: [0-254], 255: invalid/unknown. */
    } rc_channels;

    /* Request a data stream. */
    struct {
      uint16_t req_message_rate; /* The requested message rate */
      uint8_t
          target_system; /* The target requested to send the message stream. */
      uint8_t target_component; /* The target requested to send the message
                                   stream. */
      uint8_t req_stream_id;    /* The ID of the requested data stream */
      uint8_t start_stop;       /* 1 to start sending, 0 to stop sending. */
    } request_data_stream;

    /* Data stream status information. */
    struct {
      uint16_t message_rate; /* The message rate */
      uint8_t stream_id;     /* The ID of the requested data stream */
      uint8_t on_off;        /* 1 stream is enabled, 0 stream is stopped. */
    } data_stream;

    /* This message provides an API for manually controlling the vehicle using
     * standard joystick axes nomenclature, along with a joystick-like input
     * device. Unused axes can be disabled an buttons are also transmit as
     * boolean values of their  */
    struct {
      int16_t x; /* X-axis, normalized to the range [-1000,1000]. A value of
                    INT16_MAX indicates that this axis is invalid. Generally
                    corresponds to forward(1000)-backward(-1000) movement on a
                    joystick and the pitch of a vehicle. */
      int16_t y; /* Y-axis, normalized to the range [-1000,1000]. A value of
                    INT16_MAX indicates that this axis is invalid. Generally
                    corresponds to left(-1000)-right(1000) movement on a
                    joystick and the roll of a vehicle. */
      int16_t
          z;     /* Z-axis, normalized to the range [-1000,1000]. A value of
                    INT16_MAX indicates that this axis is invalid. Generally
                    corresponds to a separate slider movement with maximum being
                    1000 and minimum being -1000 on a joystick and the thrust of a
                    vehicle. Positive values are positive thrust, negative values
                    are negative thrust. */
      int16_t r; /* R-axis, normalized to the range [-1000,1000]. A value of
                    INT16_MAX indicates that this axis is invalid. Generally
                    corresponds to a twisting of the joystick, with
                    counter-clockwise being 1000 and clockwise being -1000, and
                    the yaw of a vehicle. */
      uint16_t buttons; /* A bitfield corresponding to the joystick buttons'
                           current state, 1 for pressed, 0 for released. The
                           lowest bit corresponds to Button 1. */
      uint8_t target;   /* The system to be controlled. */
    } manual_control;

    /* The RAW values of the RC channels sent to the MAV to override info
     * received from the RC radio. A value of UINT16_MAX means no change to that
     * channel. A value of 0 means control of that channel should be released
     * back to the RC radio. The standard PPM modulation is as follows: 1000
     * microseconds: 0%, 2000 microseconds: 100%. Individual
     * receivers/transmitters might violate this specification. */
    struct {
      uint16_t
          chan1_raw; /* RC channel 1 value. A value of UINT16_MAX means to
                        ignore this field. */
      uint16_t
          chan2_raw; /* RC channel 2 value. A value of UINT16_MAX means to
                        ignore this field. */
      uint16_t
          chan3_raw; /* RC channel 3 value. A value of UINT16_MAX means to
                        ignore this field. */
      uint16_t
          chan4_raw; /* RC channel 4 value. A value of UINT16_MAX means to
                        ignore this field. */
      uint16_t
          chan5_raw; /* RC channel 5 value. A value of UINT16_MAX means to
                        ignore this field. */
      uint16_t
          chan6_raw; /* RC channel 6 value. A value of UINT16_MAX means to
                        ignore this field. */
      uint16_t
          chan7_raw; /* RC channel 7 value. A value of UINT16_MAX means to
                        ignore this field. */
      uint16_t
          chan8_raw; /* RC channel 8 value. A value of UINT16_MAX means to
                        ignore this field. */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      uint16_t chan9_raw;       /* EXTENSION RC channel 9 value. A value of 0 or
                                   UINT16_MAX means to ignore this field. */
      uint16_t chan10_raw; /* EXTENSION RC channel 10 value. A value of 0 or
                              UINT16_MAX means to ignore this field. */
      uint16_t chan11_raw; /* EXTENSION RC channel 11 value. A value of 0 or
                              UINT16_MAX means to ignore this field. */
      uint16_t chan12_raw; /* EXTENSION RC channel 12 value. A value of 0 or
                              UINT16_MAX means to ignore this field. */
      uint16_t chan13_raw; /* EXTENSION RC channel 13 value. A value of 0 or
                              UINT16_MAX means to ignore this field. */
      uint16_t chan14_raw; /* EXTENSION RC channel 14 value. A value of 0 or
                              UINT16_MAX means to ignore this field. */
      uint16_t chan15_raw; /* EXTENSION RC channel 15 value. A value of 0 or
                              UINT16_MAX means to ignore this field. */
      uint16_t chan16_raw; /* EXTENSION RC channel 16 value. A value of 0 or
                              UINT16_MAX means to ignore this field. */
      uint16_t chan17_raw; /* EXTENSION RC channel 17 value. A value of 0 or
                              UINT16_MAX means to ignore this field. */
      uint16_t chan18_raw; /* EXTENSION RC channel 18 value. A value of 0 or
                              UINT16_MAX means to ignore this field. */
    } rc_channels_override;

    /* Message encoding a mission item. This message is emitted to announce
     * the presence of a mission item and to set a mission item on the system.
     * The mission item can be either in x, y, z meters (type: LOCAL) or x:lat,
     * y:lon, z:altitude. Local frame is Z-down, right handed (NED), global
     * frame is Z-up, right handed (ENU). See also
     * https://mavlink.io/en/services/mission.html. */
    struct {
      float param1; /* PARAM1, see MAV_CMD enum */
      float param2; /* PARAM2, see MAV_CMD enum */
      float param3; /* PARAM3, see MAV_CMD enum */
      float param4; /* PARAM4, see MAV_CMD enum */
      int32_t
          x; /* PARAM5 / local: x position in meters * 1e4, global: latitude in
                degrees * 10^7 */
      int32_t y; /* PARAM6 / y position: local: x position in meters * 1e4,
                    global: longitude in degrees *10^7 */
      float z;   /* PARAM7 / z position: global: altitude in meters (relative or
                    absolute, depending on frame. */
      uint16_t
          seq; /* Waypoint ID (sequence number). Starts at zero. Increases
                  monotonically for each waypoint, no gaps in the sequence
                  (0,1,2,3,4). */
      enum MAV_CMD
          command; /* (uint16_t) The scheduled action for the waypoint. */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_FRAME
          frame;       /* (uint8_t) The coordinate system of the waypoint. */
      uint8_t current; /* false:0, true:1 */
      uint8_t autocontinue; /* Autocontinue to next waypoint */
      enum MAV_MISSION_TYPE
          mission_type; /* (uint8_t) EXTENSION Mission type. */
    } mission_item_int;

    /* Metrics typically displayed on a HUD for fixed wing aircraft. */
    struct {
      float airspeed;    /* Current indicated airspeed (IAS). */
      float groundspeed; /* Current ground speed. */
      float alt;         /* Current altitude (MSL). */
      float climb;       /* Current climb rate. */
      int16_t heading; /* Current heading in compass units (0-360, 0=north). */
      uint16_t throttle; /* Current throttle setting (0 to 100). */
    } vfr_hud;

    /* Message encoding a command with parameters as scaled integers. Scaling
     * depends on the actual command value. The command microservice is
     * documented at https://mavlink.io/en/services/command.html */
    struct {
      float param1; /* PARAM1, see MAV_CMD enum */
      float param2; /* PARAM2, see MAV_CMD enum */
      float param3; /* PARAM3, see MAV_CMD enum */
      float param4; /* PARAM4, see MAV_CMD enum */
      int32_t
          x; /* PARAM5 / local: x position in meters * 1e4, global: latitude in
                degrees * 10^7 */
      int32_t y; /* PARAM6 / local: y position in meters * 1e4, global:
                    longitude in degrees * 10^7 */
      float z;   /* PARAM7 / z position: global: altitude in meters (relative or
                    absolute, depending on frame). */
      enum MAV_CMD
          command; /* (uint16_t) The scheduled action for the mission item. */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      enum MAV_FRAME
          frame;       /* (uint8_t) The coordinate system of the COMMAND. */
      uint8_t current; /* false:0, true:1 */
      uint8_t autocontinue; /* autocontinue to next wp */
    } command_int;

    /* Send a command with up to seven parameters to the MAV. The command
     * microservice is documented at https://mavlink.io/en/services/command.html
     */
    struct {
      float param1;          /* Parameter 1 (for the specific command). */
      float param2;          /* Parameter 2 (for the specific command). */
      float param3;          /* Parameter 3 (for the specific command). */
      float param4;          /* Parameter 4 (for the specific command). */
      float param5;          /* Parameter 5 (for the specific command). */
      float param6;          /* Parameter 6 (for the specific command). */
      float param7;          /* Parameter 7 (for the specific command). */
      enum MAV_CMD command;  /* (uint16_t) Command ID (of command to send). */
      uint8_t target_system; /* System which should execute the command */
      uint8_t target_component; /* Component which should execute the command, 0
                                   for all components */
      uint8_t confirmation;     /* 0: First transmission of this command. 1-255:
                                   Confirmation transmissions (e.g. for kill
                                   command) */
    } command_long;

    /* Report status of a command. Includes feedback whether the command was
     * executed. The command microservice is documented at
     * https://mavlink.io/en/services/command.html */
    struct {
      enum MAV_CMD
          command; /* (uint16_t) Command ID (of acknowledged command). */
      enum MAV_RESULT result; /* (uint8_t) Result of command. */
      int32_t result_param2;  /* EXTENSION WIP: Additional parameter of the
                                 result, example: which parameter of
                                 MAV_CMD_NAV_WAYPOINT caused it to be denied. */
      uint8_t
          progress; /* EXTENSION WIP: Also used as result_param1, it can be set
                       with a enum containing the errors reasons of why the
                       command was denied or the progress percentage or 255 if
                       unknown the progress when result is
                       MAV_RESULT_IN_PROGRESS. */
      uint8_t target_system; /* EXTENSION WIP: System which requested the
                                command to be executed */
      uint8_t
          target_component; /* EXTENSION WIP: Component which requested the
                               command to be executed */
    } command_ack;

    /* Setpoint in roll, pitch, yaw and thrust from the operator */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float roll;            /* Desired roll rate */
      float pitch;           /* Desired pitch rate */
      float yaw;             /* Desired yaw rate */
      float thrust;          /* Collective thrust, normalized to 0 .. 1 */
      uint8_t mode_switch;   /* Flight mode switch position, 0.. 255 */
      uint8_t
          manual_override_switch; /* Override mode switch position, 0.. 255 */
    } manual_setpoint;

    /* Sets a desired vehicle attitude. Used by an external controller to
     * command the vehicle (manual controller or other system). */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float q[4]; /* Attitude quaternion (w, x, y, z order, zero-rotation is 1,
                     0, 0, 0) */
      float body_roll_rate;  /* Body roll rate */
      float body_pitch_rate; /* Body pitch rate */
      float body_yaw_rate;   /* Body yaw rate */
      float thrust; /* Collective thrust, normalized to 0 .. 1 (-1 .. 1 for
                       vehicles capable of reverse trust) */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      uint8_t type_mask;        /* Mappings: If any of these bits are set, the
                                   corresponding input should be ignored: bit 1: body
                                   roll rate, bit 2: body pitch rate, bit 3: body yaw
                                   rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8:
                                   attitude */
    } set_attitude_target;

    /* Reports the current commanded attitude of the vehicle as specified by the
     * autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET
     * message if the vehicle is being controlled this way. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float q[4]; /* Attitude quaternion (w, x, y, z order, zero-rotation is 1,
                     0, 0, 0) */
      float body_roll_rate;  /* Body roll rate */
      float body_pitch_rate; /* Body pitch rate */
      float body_yaw_rate;   /* Body yaw rate */
      float thrust;      /* Collective thrust, normalized to 0 .. 1 (-1 .. 1 for
                            vehicles capable of reverse trust) */
      uint8_t type_mask; /* Mappings: If any of these bits are set, the
                            corresponding input should be ignored: bit 1: body
                            roll rate, bit 2: body pitch rate, bit 3: body yaw
                            rate. bit 4-bit 7: reserved, bit 8: attitude */
    } attitude_target;

    /* Sets a desired vehicle position in a local north-east-down coordinate
     * frame. Used by an external controller to command the vehicle (manual
     * controller or other system). */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float x;               /* X Position in NED frame */
      float y;               /* Y Position in NED frame */
      float z; /* Z Position in NED frame (note, altitude is negative in NED) */
      float vx;  /* X velocity in NED frame */
      float vy;  /* Y velocity in NED frame */
      float vz;  /* Z velocity in NED frame */
      float afx; /* X acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float afy; /* Y acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float afz; /* Z acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float yaw; /* yaw setpoint */
      float yaw_rate;                          /* yaw rate setpoint */
      enum POSITION_TARGET_TYPEMASK type_mask; /* (uint16_t) Bitmap to indicate
                                                  which dimensions should be
                                                  ignored by the vehicle. */
      uint8_t target_system;                   /* System ID */
      uint8_t target_component;                /* Component ID */
      enum MAV_FRAME coordinate_frame;         /* (uint8_t) Valid options are:
                                                  MAV_FRAME_LOCAL_NED = 1,
                                                  MAV_FRAME_LOCAL_OFFSET_NED = 7,
                                                  MAV_FRAME_BODY_NED = 8,
                                                  MAV_FRAME_BODY_OFFSET_NED = 9 */
    } set_position_target_local_ned;

    /* Reports the current commanded vehicle position, velocity, and
     * acceleration as specified by the autopilot. This should match the
     * commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being
     * controlled this way. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float x;               /* X Position in NED frame */
      float y;               /* Y Position in NED frame */
      float z; /* Z Position in NED frame (note, altitude is negative in NED) */
      float vx;  /* X velocity in NED frame */
      float vy;  /* Y velocity in NED frame */
      float vz;  /* Z velocity in NED frame */
      float afx; /* X acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float afy; /* Y acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float afz; /* Z acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float yaw; /* yaw setpoint */
      float yaw_rate;                          /* yaw rate setpoint */
      enum POSITION_TARGET_TYPEMASK type_mask; /* (uint16_t) Bitmap to indicate
                                                  which dimensions should be
                                                  ignored by the vehicle. */
      enum MAV_FRAME coordinate_frame;         /* (uint8_t) Valid options are:
                                                  MAV_FRAME_LOCAL_NED = 1,
                                                  MAV_FRAME_LOCAL_OFFSET_NED = 7,
                                                  MAV_FRAME_BODY_NED = 8,
                                                  MAV_FRAME_BODY_OFFSET_NED = 9 */
    } position_target_local_ned;

    /* Sets a desired vehicle position, velocity, and/or acceleration in a
     * global coordinate system (WGS84). Used by an external controller to
     * command the vehicle (manual controller or other system). */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). The
                                rationale for the timestamp in the setpoint is
                                to allow the system to compensate for the
                                transport delay of the setpoint. This allows the
                                system to compensate processing latency. */
      int32_t lat_int;       /* X Position in WGS84 frame */
      int32_t lon_int;       /* Y Position in WGS84 frame */
      float alt; /* Altitude (MSL, Relative to home, or AGL - depending on
                    frame) */
      float vx;  /* X velocity in NED frame */
      float vy;  /* Y velocity in NED frame */
      float vz;  /* Z velocity in NED frame */
      float afx; /* X acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float afy; /* Y acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float afz; /* Z acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float yaw; /* yaw setpoint */
      float yaw_rate;                          /* yaw rate setpoint */
      enum POSITION_TARGET_TYPEMASK type_mask; /* (uint16_t) Bitmap to indicate
                                                  which dimensions should be
                                                  ignored by the vehicle. */
      uint8_t target_system;                   /* System ID */
      uint8_t target_component;                /* Component ID */
      enum MAV_FRAME
          coordinate_frame; /* (uint8_t) Valid options are: MAV_FRAME_GLOBAL_INT
                               = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6,
                               MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 */
    } set_position_target_global_int;

    /* Reports the current commanded vehicle position, velocity, and
     * acceleration as specified by the autopilot. This should match the
     * commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being
     * controlled this way. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). The
                                rationale for the timestamp in the setpoint is
                                to allow the system to compensate for the
                                transport delay of the setpoint. This allows the
                                system to compensate processing latency. */
      int32_t lat_int;       /* X Position in WGS84 frame */
      int32_t lon_int;       /* Y Position in WGS84 frame */
      float alt; /* Altitude (MSL, AGL or relative to home altitude, depending
                    on frame) */
      float vx;  /* X velocity in NED frame */
      float vy;  /* Y velocity in NED frame */
      float vz;  /* Z velocity in NED frame */
      float afx; /* X acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float afy; /* Y acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float afz; /* Z acceleration or force (if bit 10 of type_mask is set) in
                    NED frame in meter / s^2 or N */
      float yaw; /* yaw setpoint */
      float yaw_rate;                          /* yaw rate setpoint */
      enum POSITION_TARGET_TYPEMASK type_mask; /* (uint16_t) Bitmap to indicate
                                                  which dimensions should be
                                                  ignored by the vehicle. */
      enum MAV_FRAME
          coordinate_frame; /* (uint8_t) Valid options are: MAV_FRAME_GLOBAL_INT
                               = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6,
                               MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11 */
    } position_target_global_int;

    /* The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of
     * MAV X and the global coordinate frame in NED coordinates. Coordinate
     * frame is right-handed, Z-axis down (aeronautical frame, NED /
     * north-east-down convention) */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float x;               /* X Position */
      float y;               /* Y Position */
      float z;               /* Z Position */
      float roll;            /* Roll */
      float pitch;           /* Pitch */
      float yaw;             /* Yaw */
    } local_position_ned_system_global_offset;

    /* Sent from simulation to autopilot. This packet is useful for high
     * throughput applications such as hardware in the loop simulations. */
    struct {
      uint64_t
          time_usec;   /* Timestamp (UNIX Epoch time or time since system boot).
                          The receiving end can infer timestamp format
                          (since 1.1.1970 or since system boot) by checking for
                          the magnitude the number. */
      float roll;      /* Roll angle */
      float pitch;     /* Pitch angle */
      float yaw;       /* Yaw angle */
      float rollspeed; /* Body frame roll / phi angular speed */
      float pitchspeed; /* Body frame pitch / theta angular speed */
      float yawspeed;   /* Body frame yaw / psi angular speed */
      int32_t lat;      /* Latitude */
      int32_t lon;      /* Longitude */
      int32_t alt;      /* Altitude */
      int16_t vx;       /* Ground X Speed (Latitude) */
      int16_t vy;       /* Ground Y Speed (Longitude) */
      int16_t vz;       /* Ground Z Speed (Altitude) */
      int16_t xacc;     /* X acceleration */
      int16_t yacc;     /* Y acceleration */
      int16_t zacc;     /* Z acceleration */
    } hil_state;

    /* Sent from autopilot to simulation. Hardware in the loop control outputs
     */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float roll_ailerons;  /* Control output -1 .. 1 */
      float pitch_elevator; /* Control output -1 .. 1 */
      float yaw_rudder;     /* Control output -1 .. 1 */
      float throttle;       /* Throttle 0 .. 1 */
      float aux1;           /* Aux 1, -1 .. 1 */
      float aux2;           /* Aux 2, -1 .. 1 */
      float aux3;           /* Aux 3, -1 .. 1 */
      float aux4;           /* Aux 4, -1 .. 1 */
      enum MAV_MODE mode;   /* (uint8_t) System mode. */
      uint8_t nav_mode;     /* Navigation mode (MAV_NAV_MODE) */
    } hil_controls;

    /* Sent from simulation to autopilot. The RAW values of the RC channels
     * received. The standard PPM modulation is as follows: 1000 microseconds:
     * 0%, 2000 microseconds: 100%. Individual receivers/transmitters might
     * violate this specification. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint16_t chan1_raw;  /* RC channel 1 value */
      uint16_t chan2_raw;  /* RC channel 2 value */
      uint16_t chan3_raw;  /* RC channel 3 value */
      uint16_t chan4_raw;  /* RC channel 4 value */
      uint16_t chan5_raw;  /* RC channel 5 value */
      uint16_t chan6_raw;  /* RC channel 6 value */
      uint16_t chan7_raw;  /* RC channel 7 value */
      uint16_t chan8_raw;  /* RC channel 8 value */
      uint16_t chan9_raw;  /* RC channel 9 value */
      uint16_t chan10_raw; /* RC channel 10 value */
      uint16_t chan11_raw; /* RC channel 11 value */
      uint16_t chan12_raw; /* RC channel 12 value */
      uint8_t rssi; /* Receive signal strength indicator in device-dependent
                       units/scale. Values: [0-254], 255: invalid/unknown. */
    } hil_rc_inputs_raw;

    /* Sent from autopilot to simulation. Hardware in the loop control outputs
     * (replacement for HIL_CONTROLS) */
    struct {
      uint64_t
          time_usec;  /* Timestamp (UNIX Epoch time or time since system boot).
                         The receiving end can infer timestamp format
                         (since 1.1.1970 or since system boot) by checking for
                         the magnitude the number. */
      uint64_t flags; /* Flags as bitfield, reserved for future use. */
      float
          controls[16]; /* Control outputs -1 .. 1. Channel assignment depends
                           on the simulated hardware. */
      enum MAV_MODE_FLAG
          mode; /* (uint8_t) System mode. Includes arming state. */
    } hil_actuator_controls;

    /* Optical flow from a flow sensor (e.g. optical mouse sensor) */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float flow_comp_m_x; /* Flow in x-sensor direction, angular-speed
                              compensated */
      float flow_comp_m_y; /* Flow in y-sensor direction, angular-speed
                              compensated */
      float
          ground_distance; /* Ground distance. Positive value: distance known.
                              Negative value: Unknown distance */
      int16_t flow_x;      /* Flow in x-sensor direction */
      int16_t flow_y;      /* Flow in y-sensor direction */
      uint8_t sensor_id;   /* Sensor ID */
      uint8_t quality;     /* Optical flow quality / confidence. 0: bad, 255:
                              maximum quality */
      float flow_rate_x;   /* EXTENSION Flow rate about X axis */
      float flow_rate_y;   /* EXTENSION Flow rate about Y axis */
    } optical_flow;

    /* Global position/attitude estimate from a vision source. */
    struct {
      uint64_t usec; /* Timestamp (UNIX time or since system boot) */
      float x;       /* Global X position */
      float y;       /* Global Y position */
      float z;       /* Global Z position */
      float roll;    /* Roll angle */
      float pitch;   /* Pitch angle */
      float yaw;     /* Yaw angle */
      float covariance
          [21]; /* EXTENSION Row-major representation of pose 6x6
                   cross-covariance matrix upper right triangle (states:
                   x_global, y_global, z_global, roll, pitch, yaw; first six
                   entries are the first ROW, next five entries are the second
                   ROW, etc.). If unknown, assign NaN value to first element in
                   the array. */
      uint8_t
          reset_counter; /* EXTENSION Estimate reset counter. This should be
                            incremented when the estimate resets in any of the
                            dimensions (position, velocity, attitude, angular
                            speed). This is designed to be used when e.g an
                            external SLAM system detects a loop-closure and the
                            estimate jumps. */
    } global_vision_position_estimate;

    /* Global position/attitude estimate from a vision source. */
    struct {
      uint64_t usec; /* Timestamp (UNIX time or time since system boot) */
      float x;       /* Global X position */
      float y;       /* Global Y position */
      float z;       /* Global Z position */
      float roll;    /* Roll angle */
      float pitch;   /* Pitch angle */
      float yaw;     /* Yaw angle */
      float covariance
          [21]; /* EXTENSION Row-major representation of pose 6x6
                   cross-covariance matrix upper right triangle (states: x, y,
                   z, roll, pitch, yaw; first six entries are the first ROW,
                   next five entries are the second ROW, etc.). If unknown,
                   assign NaN value to first element in the array. */
      uint8_t
          reset_counter; /* EXTENSION Estimate reset counter. This should be
                            incremented when the estimate resets in any of the
                            dimensions (position, velocity, attitude, angular
                            speed). This is designed to be used when e.g an
                            external SLAM system detects a loop-closure and the
                            estimate jumps. */
    } vision_position_estimate;

    /* Speed estimate from a vision source. */
    struct {
      uint64_t usec;       /* Timestamp (UNIX time or time since system boot) */
      float x;             /* Global X speed */
      float y;             /* Global Y speed */
      float z;             /* Global Z speed */
      float covariance[9]; /* EXTENSION Row-major representation of 3x3 linear
                              velocity covariance matrix (states: vx, vy, vz;
                              1st three entries - 1st row, etc.). If unknown,
                              assign NaN value to first element in the array. */
      uint8_t
          reset_counter; /* EXTENSION Estimate reset counter. This should be
                            incremented when the estimate resets in any of the
                            dimensions (position, velocity, attitude, angular
                            speed). This is designed to be used when e.g an
                            external SLAM system detects a loop-closure and the
                            estimate jumps. */
    } vision_speed_estimate;

    /* Global position estimate from a Vicon motion system source. */
    struct {
      uint64_t usec; /* Timestamp (UNIX time or time since system boot) */
      float x;       /* Global X position */
      float y;       /* Global Y position */
      float z;       /* Global Z position */
      float roll;    /* Roll angle */
      float pitch;   /* Pitch angle */
      float yaw;     /* Yaw angle */
      float covariance
          [21]; /* EXTENSION Row-major representation of 6x6 pose
                   cross-covariance matrix upper right triangle (states: x, y,
                   z, roll, pitch, yaw; first six entries are the first ROW,
                   next five entries are the second ROW, etc.). If unknown,
                   assign NaN value to first element in the array. */
    } vicon_position_estimate;

    /* The IMU readings in SI units in NED body frame */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float xacc;    /* X acceleration */
      float yacc;    /* Y acceleration */
      float zacc;    /* Z acceleration */
      float xgyro;   /* Angular speed around X axis */
      float ygyro;   /* Angular speed around Y axis */
      float zgyro;   /* Angular speed around Z axis */
      float xmag;    /* X Magnetic field */
      float ymag;    /* Y Magnetic field */
      float zmag;    /* Z Magnetic field */
      float abs_pressure;  /* Absolute pressure */
      float diff_pressure; /* Differential pressure */
      float pressure_alt;  /* Altitude calculated from pressure */
      float temperature;   /* Temperature */
      uint16_t
          fields_updated; /* Bitmap for fields that have updated since last
                             message, bit 0 = xacc, bit 12: temperature */
    } highres_imu;

    /* Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse
     * sensor) */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint32_t
          integration_time_us; /* Integration time. Divide integrated_x and
                                  integrated_y by the integration time to obtain
                                  average flow. The integration time also
                                  indicates the. */
      float
          integrated_x; /* Flow around X axis (Sensor RH rotation about the X
                           axis induces a positive flow. Sensor linear motion
                           along the positive Y axis induces a negative flow.)
                         */
      float
          integrated_y; /* Flow around Y axis (Sensor RH rotation about the Y
                           axis induces a positive flow. Sensor linear motion
                           along the positive X axis induces a positive flow.)
                         */
      float integrated_xgyro; /* RH rotation around X axis */
      float integrated_ygyro; /* RH rotation around Y axis */
      float integrated_zgyro; /* RH rotation around Z axis */
      uint32_t
          time_delta_distance_us; /* Time since the distance was sampled. */
      float distance;      /* Distance to the center of the flow field. Positive
                              value (including zero): distance known. Negative value:
                              Unknown distance. */
      int16_t temperature; /* Temperature */
      uint8_t sensor_id;   /* Sensor ID */
      uint8_t quality; /* Optical flow quality / confidence. 0: no valid flow,
                          255: maximum quality */
    } optical_flow_rad;

    /* The IMU readings in SI units in NED body frame */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float xacc;    /* X acceleration */
      float yacc;    /* Y acceleration */
      float zacc;    /* Z acceleration */
      float xgyro;   /* Angular speed around X axis in body frame */
      float ygyro;   /* Angular speed around Y axis in body frame */
      float zgyro;   /* Angular speed around Z axis in body frame */
      float xmag;    /* X Magnetic field */
      float ymag;    /* Y Magnetic field */
      float zmag;    /* Z Magnetic field */
      float abs_pressure;  /* Absolute pressure */
      float diff_pressure; /* Differential pressure (airspeed) */
      float pressure_alt;  /* Altitude calculated from pressure */
      float temperature;   /* Temperature */
      uint32_t
          fields_updated; /* Bitmap for fields that have updated since last
                             message, bit 0 = xacc, bit 12: temperature, bit 31:
                             full reset of attitude/position/velocities/etc was
                             performed in sim. */
    } hil_sensor;

    /* Status of simulation environment, if used */
    struct {
      float
          q1; /* True attitude quaternion component 1, w (1 in null-rotation) */
      float
          q2; /* True attitude quaternion component 2, x (0 in null-rotation) */
      float
          q3; /* True attitude quaternion component 3, y (0 in null-rotation) */
      float
          q4; /* True attitude quaternion component 4, z (0 in null-rotation) */
      float roll; /* Attitude roll expressed as Euler angles, not recommended
                     except for human-readable outputs */
      float
          pitch;   /* Attitude pitch expressed as Euler angles, not recommended
                      except for human-readable outputs */
      float yaw;   /* Attitude yaw expressed as Euler angles, not recommended
                      except for human-readable outputs */
      float xacc;  /* X acceleration */
      float yacc;  /* Y acceleration */
      float zacc;  /* Z acceleration */
      float xgyro; /* Angular speed around X axis */
      float ygyro; /* Angular speed around Y axis */
      float zgyro; /* Angular speed around Z axis */
      float lat;   /* Latitude */
      float lon;   /* Longitude */
      float alt;   /* Altitude */
      float std_dev_horz; /* Horizontal position standard deviation */
      float std_dev_vert; /* Vertical position standard deviation */
      float vn; /* True velocity in NORTH direction in earth-fixed NED frame */
      float ve; /* True velocity in EAST direction in earth-fixed NED frame */
      float vd; /* True velocity in DOWN direction in earth-fixed NED frame */
    } sim_state;

    /* Status generated by radio and injected into MAVLink stream. */
    struct {
      uint16_t
          rxerrors;   /* Count of radio packet receive errors (since boot). */
      uint16_t fixed; /* Count of error corrected radio packets (since boot). */
      uint8_t rssi;   /* Local (message sender) recieved signal strength
                         indication in device-dependent units/scale. Values:
                         [0-254], 255: invalid/unknown. */
      uint8_t
          remrssi;   /* Remote (message receiver) signal strength indication in
                        device-dependent units/scale. Values: [0-254], 255:
                        invalid/unknown. */
      uint8_t txbuf; /* Remaining free transmitter buffer space. */
      uint8_t
          noise; /* Local background noise level. These are device dependent
                    RSSI values (scale as approx 2x dB on SiK radios). Values:
                    [0-254], 255: invalid/unknown. */
      uint8_t remnoise; /* Remote background noise level. These are device
                           dependent RSSI values (scale as approx 2x dB on SiK
                           radios). Values: [0-254], 255: invalid/unknown. */
    } radio_status;

    /* File transfer message */
    struct {
      uint8_t target_network;   /* Network ID (0 for broadcast) */
      uint8_t target_system;    /* System ID (0 for broadcast) */
      uint8_t target_component; /* Component ID (0 for broadcast) */
      uint8_t payload
          [251]; /* Variable length payload. The length is defined by the
                    remaining message length when subtracting the header and
                    other fields.  The entire content of this block is opaque
                    unless you understand any the encoding message_type.  The
                    particular encoding used can be extension specific and might
                    not always be documented as part of the mavlink
                    specification. */
    } file_transfer_protocol;

    /* Time synchronization message. */
    struct {
      int64_t tc1; /* Time sync timestamp 1 */
      int64_t ts1; /* Time sync timestamp 2 */
    } timesync;

    /* Camera-IMU triggering and synchronisation message. */
    struct {
      uint64_t time_usec; /* Timestamp for image frame (UNIX Epoch time or time
                             since system boot). The receiving end can infer
                             timestamp format (since 1.1.1970 or since system
                             boot) by checking for the magnitude the number. */
      uint32_t seq;       /* Image frame sequence */
    } camera_trigger;

    /* The global position, as returned by the Global Positioning System (GPS).
     * This is                  NOT the global position estimate of the sytem,
     * but rather a RAW sensor value. See message GLOBAL_POSITION for the global
     * position estimate. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      int32_t lat;   /* Latitude (WGS84) */
      int32_t lon;   /* Longitude (WGS84) */
      int32_t alt;   /* Altitude (MSL). Positive for up. */
      uint16_t
          eph; /* GPS HDOP horizontal dilution of position. If unknown, set to:
                  65535 */
      uint16_t epv; /* GPS VDOP vertical dilution of position. If unknown, set
                       to: 65535 */
      uint16_t vel; /* GPS ground speed. If unknown, set to: 65535 */
      int16_t vn; /* GPS velocity in NORTH direction in earth-fixed NED frame */
      int16_t ve; /* GPS velocity in EAST direction in earth-fixed NED frame */
      int16_t vd; /* GPS velocity in DOWN direction in earth-fixed NED frame */
      uint16_t
          cog; /* Course over ground (NOT heading, but direction of movement),
                  0.0..359.99 degrees. If unknown, set to: 65535 */
      uint8_t fix_type; /* 0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications
                           will not use the value of this field unless it is at
                           least two, so always correctly fill in the fix. */
      uint8_t satellites_visible; /* Number of satellites visible. If unknown,
                                     set to 255 */
    } hil_gps;

    /* Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse
     * sensor) */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint32_t
          integration_time_us; /* Integration time. Divide integrated_x and
                                  integrated_y by the integration time to obtain
                                  average flow. The integration time also
                                  indicates the. */
      float integrated_x; /* Flow in radians around X axis (Sensor RH rotation
                             about the X axis induces a positive flow. Sensor
                             linear motion along the positive Y axis induces a
                             negative flow.) */
      float integrated_y; /* Flow in radians around Y axis (Sensor RH rotation
                             about the Y axis induces a positive flow. Sensor
                             linear motion along the positive X axis induces a
                             positive flow.) */
      float integrated_xgyro; /* RH rotation around X axis */
      float integrated_ygyro; /* RH rotation around Y axis */
      float integrated_zgyro; /* RH rotation around Z axis */
      uint32_t
          time_delta_distance_us; /* Time since the distance was sampled. */
      float distance;      /* Distance to the center of the flow field. Positive
                              value (including zero): distance known. Negative value:
                              Unknown distance. */
      int16_t temperature; /* Temperature */
      uint8_t sensor_id;   /* Sensor ID */
      uint8_t quality; /* Optical flow quality / confidence. 0: no valid flow,
                          255: maximum quality */
    } hil_optical_flow;

    /* Sent from simulation to autopilot, avoids in contrast to HIL_STATE
     * singularities. This packet is useful for high throughput applications
     * such as hardware in the loop simulations. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float attitude_quaternion
          [4]; /* Vehicle attitude expressed as normalized quaternion in w, x,
                  y, z order (with 1 0 0 0 being the null-rotation) */
      float rollspeed;        /* Body frame roll / phi angular speed */
      float pitchspeed;       /* Body frame pitch / theta angular speed */
      float yawspeed;         /* Body frame yaw / psi angular speed */
      int32_t lat;            /* Latitude */
      int32_t lon;            /* Longitude */
      int32_t alt;            /* Altitude */
      int16_t vx;             /* Ground X Speed (Latitude) */
      int16_t vy;             /* Ground Y Speed (Longitude) */
      int16_t vz;             /* Ground Z Speed (Altitude) */
      uint16_t ind_airspeed;  /* Indicated airspeed */
      uint16_t true_airspeed; /* True airspeed */
      int16_t xacc;           /* X acceleration */
      int16_t yacc;           /* Y acceleration */
      int16_t zacc;           /* Z acceleration */
    } hil_state_quaternion;

    /* The RAW IMU readings for secondary 9DOF sensor setup. This message should
     * contain the scaled values to the described units */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      int16_t xacc;          /* X acceleration */
      int16_t yacc;          /* Y acceleration */
      int16_t zacc;          /* Z acceleration */
      int16_t xgyro;         /* Angular speed around X axis */
      int16_t ygyro;         /* Angular speed around Y axis */
      int16_t zgyro;         /* Angular speed around Z axis */
      int16_t xmag;          /* X Magnetic field */
      int16_t ymag;          /* Y Magnetic field */
      int16_t zmag;          /* Z Magnetic field */
    } scaled_imu2;

    /* Request a list of available logs. On some systems calling this may stop
     * on-board logging until LOG_REQUEST_END is called. */
    struct {
      uint16_t start;           /* First log id (0 for first available) */
      uint16_t end;             /* Last log id (0xffff for last available) */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
    } log_request_list;

    /* Reply to LOG_REQUEST_LIST */
    struct {
      uint32_t
          time_utc; /* UTC timestamp of log since 1970, or 0 if not available */
      uint32_t size;         /* Size of the log (may be approximate) */
      uint16_t id;           /* Log id */
      uint16_t num_logs;     /* Total number of logs */
      uint16_t last_log_num; /* High log number */
    } log_entry;

    /* Request a chunk of a log */
    struct {
      uint32_t ofs;             /* Offset into the log */
      uint32_t count;           /* Number of bytes */
      uint16_t id;              /* Log id (from LOG_ENTRY reply) */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
    } log_request_data;

    /* Reply to LOG_REQUEST_DATA */
    struct {
      uint32_t ofs;     /* Offset into the log */
      uint16_t id;      /* Log id (from LOG_ENTRY reply) */
      uint8_t count;    /* Number of bytes (zero for end of log) */
      uint8_t data[90]; /* log data */
    } log_data;

    /* Erase all logs */
    struct {
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
    } log_erase;

    /* Stop log transfer and resume normal logging */
    struct {
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
    } log_request_end;

    /* Data for injecting into the onboard GPS (used for DGPS) */
    struct {
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      uint8_t len;              /* Data length */
      uint8_t
          data[110]; /* Raw data (110 is enough for 12 satellites of RTCMv2) */
    } gps_inject_data;

    /* Second GPS data. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      int32_t lat;   /* Latitude (WGS84) */
      int32_t lon;   /* Longitude (WGS84) */
      int32_t alt;   /* Altitude (MSL). Positive for up. */
      uint32_t dgps_age; /* Age of DGPS info */
      uint16_t
          eph; /* GPS HDOP horizontal dilution of position. If unknown, set to:
                  UINT16_MAX */
      uint16_t epv; /* GPS VDOP vertical dilution of position. If unknown, set
                       to: UINT16_MAX */
      uint16_t vel; /* GPS ground speed. If unknown, set to: UINT16_MAX */
      uint16_t cog; /* Course over ground (NOT heading, but direction of
                       movement): 0.0..359.99 degrees. If unknown, set to:
                       UINT16_MAX */
      enum GPS_FIX_TYPE fix_type; /* (uint8_t) GPS fix type. */
      uint8_t satellites_visible; /* Number of satellites visible. If unknown,
                                     set to 255 */
      uint8_t dgps_numch;         /* Number of DGPS satellites */
    } gps2_raw;

    /* Power supply status */
    struct {
      uint16_t Vcc;    /* 5V rail voltage. */
      uint16_t Vservo; /* Servo rail voltage. */
      enum MAV_POWER_STATUS
          flags; /* (uint16_t) Bitmap of power supply status flags. */
    } power_status;

    /* Control a serial port. This can be used for raw access to an onboard
     * serial peripheral such as a GPS or telemetry radio. It is designed to
     * make it possible to update the devices firmware via MAVLink messages or
     * change the devices settings. A message with zero bytes can be used to
     * change just the baudrate. */
    struct {
      uint32_t baudrate; /* Baudrate of transfer. Zero means no change. */
      uint16_t timeout;  /* Timeout for reply data */
      enum SERIAL_CONTROL_DEV
          device; /* (uint8_t) Serial control device type. */
      enum SERIAL_CONTROL_FLAG
          flags;        /* (uint8_t) Bitmap of serial control flags. */
      uint8_t count;    /* how many bytes in this transfer */
      uint8_t data[70]; /* serial data */
    } serial_control;

    /* RTK GPS data. Gives information on the relative baseline calculation the
     * GPS is reporting */
    struct {
      uint32_t time_last_baseline_ms; /* Time since boot of last baseline
                                         message received. */
      uint32_t tow;                   /* GPS Time of Week of last baseline */
      int32_t baseline_a_mm;          /* Current baseline in ECEF x or NED north
                                         component. */
      int32_t
          baseline_b_mm; /* Current baseline in ECEF y or NED east component. */
      int32_t
          baseline_c_mm; /* Current baseline in ECEF z or NED down component. */
      uint32_t accuracy; /* Current estimate of baseline accuracy. */
      int32_t iar_num_hypotheses; /* Current number of integer ambiguity
                                     hypotheses. */
      uint16_t wn;                /* GPS Week Number of last baseline */
      uint8_t rtk_receiver_id; /* Identification of connected RTK receiver. */
      uint8_t rtk_health;      /* GPS-specific health report for RTK data. */
      uint8_t rtk_rate; /* Rate of baseline messages being received by GPS */
      uint8_t nsats;    /* Current number of sats used for RTK calculation. */
      enum RTK_BASELINE_COORDINATE_SYSTEM
          baseline_coords_type; /* (uint8_t) Coordinate system of baseline */
    } gps_rtk;

    /* RTK GPS data. Gives information on the relative baseline calculation the
     * GPS is reporting */
    struct {
      uint32_t time_last_baseline_ms; /* Time since boot of last baseline
                                         message received. */
      uint32_t tow;                   /* GPS Time of Week of last baseline */
      int32_t baseline_a_mm;          /* Current baseline in ECEF x or NED north
                                         component. */
      int32_t
          baseline_b_mm; /* Current baseline in ECEF y or NED east component. */
      int32_t
          baseline_c_mm; /* Current baseline in ECEF z or NED down component. */
      uint32_t accuracy; /* Current estimate of baseline accuracy. */
      int32_t iar_num_hypotheses; /* Current number of integer ambiguity
                                     hypotheses. */
      uint16_t wn;                /* GPS Week Number of last baseline */
      uint8_t rtk_receiver_id; /* Identification of connected RTK receiver. */
      uint8_t rtk_health;      /* GPS-specific health report for RTK data. */
      uint8_t rtk_rate; /* Rate of baseline messages being received by GPS */
      uint8_t nsats;    /* Current number of sats used for RTK calculation. */
      enum RTK_BASELINE_COORDINATE_SYSTEM
          baseline_coords_type; /* (uint8_t) Coordinate system of baseline */
    } gps2_rtk;

    /* The RAW IMU readings for 3rd 9DOF sensor setup. This message should
     * contain the scaled values to the described units */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      int16_t xacc;          /* X acceleration */
      int16_t yacc;          /* Y acceleration */
      int16_t zacc;          /* Z acceleration */
      int16_t xgyro;         /* Angular speed around X axis */
      int16_t ygyro;         /* Angular speed around Y axis */
      int16_t zgyro;         /* Angular speed around Z axis */
      int16_t xmag;          /* X Magnetic field */
      int16_t ymag;          /* Y Magnetic field */
      int16_t zmag;          /* Z Magnetic field */
    } scaled_imu3;

    /* Handshake message to initiate, control and stop image streaming when
     * using the Image Transmission Protocol:
     * https://mavlink.io/en/services/image_transmission.html. */
    struct {
      uint32_t size;    /* total data size (set on ACK only). */
      uint16_t width;   /* Width of a matrix or image. */
      uint16_t height;  /* Height of a matrix or image. */
      uint16_t packets; /* Number of packets being sent (set on ACK only). */
      enum MAVLINK_DATA_STREAM_TYPE
          type;        /* (uint8_t) Type of requested/acknowledged data. */
      uint8_t payload; /* Payload size per packet (normally 253 byte, see DATA
                          field size in message ENCAPSULATED_DATA) (set on ACK
                          only). */
      uint8_t jpg_quality; /* JPEG quality. Values: [1-100]. */
    } data_transmission_handshake;

    /* Data packet for images sent using the Image Transmission Protocol:
     * https://mavlink.io/en/services/image_transmission.html. */
    struct {
      uint16_t
          seqnr; /* sequence number (starting with 0 on every transmission) */
      uint8_t data[253]; /* image data bytes */
    } encapsulated_data;

    /* Distance sensor information for an onboard rangefinder. */
    struct {
      uint32_t time_boot_ms;     /* Timestamp (time since system boot). */
      uint16_t min_distance;     /* Minimum distance the sensor can measure */
      uint16_t max_distance;     /* Maximum distance the sensor can measure */
      uint16_t current_distance; /* Current distance reading */
      enum MAV_DISTANCE_SENSOR type; /* (uint8_t) Type of distance sensor. */
      uint8_t id;                    /* Onboard ID of the sensor */
      enum MAV_SENSOR_ORIENTATION
          orientation; /* (uint8_t) Direction the sensor faces. downward-facing:
                          ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90,
                          backward-facing: ROTATION_PITCH_180, forward-facing:
                          ROTATION_NONE, left-facing: ROTATION_YAW_90,
                          right-facing: ROTATION_YAW_270 */
      uint8_t covariance;   /* Measurement variance. Max standard deviation is
                               6cm. 255 if unknown. */
      float horizontal_fov; /* EXTENSION Horizontal Field of View (angle) where
                               the distance measurement is valid and the field
                               of view is known. Otherwise this is set to 0. */
      float
          vertical_fov;    /* EXTENSION Vertical Field of View (angle) where the
                              distance measurement is valid and the field of view
                              is known. Otherwise this is set to 0. */
      float quaternion[4]; /* EXTENSION Quaternion of the sensor orientation in
                              vehicle body frame (w, x, y, z order,
                              zero-rotation is 1, 0, 0, 0). Zero-rotation is
                              along the vehicle body x-axis. This field is
                              required if the orientation is set to
                              MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if
                              invalid." */
    } distance_sensor;

    /* Request for terrain data and terrain status */
    struct {
      uint64_t mask; /* Bitmask of requested 4x4 grids (row major 8x7 array of
                        grids, 56 bits) */
      int32_t lat;   /* Latitude of SW corner of first grid */
      int32_t lon;   /* Longitude of SW corner of first grid */
      uint16_t grid_spacing; /* Grid spacing */
    } terrain_request;

    /* Terrain data sent from GCS. The lat/lon and grid_spacing must be the same
     * as a lat/lon from a TERRAIN_REQUEST */
    struct {
      int32_t lat;           /* Latitude of SW corner of first grid */
      int32_t lon;           /* Longitude of SW corner of first grid */
      uint16_t grid_spacing; /* Grid spacing */
      int16_t data[16];      /* Terrain data MSL */
      uint8_t gridbit;       /* bit within the terrain request mask */
    } terrain_data;

    /* Request that the vehicle report terrain height at the given location.
     * Used by GCS to check if vehicle has all terrain data needed for a
     * mission. */
    struct {
      int32_t lat; /* Latitude */
      int32_t lon; /* Longitude */
    } terrain_check;

    /* Response from a TERRAIN_CHECK request */
    struct {
      int32_t lat;          /* Latitude */
      int32_t lon;          /* Longitude */
      float terrain_height; /* Terrain height MSL */
      float current_height; /* Current vehicle height above lat/lon terrain
                               height */
      uint16_t spacing;     /* grid spacing (zero if terrain at this location
                               unavailable) */
      uint16_t pending; /* Number of 4x4 terrain blocks waiting to be received
                           or read from disk */
      uint16_t loaded;  /* Number of 4x4 terrain blocks in memory */
    } terrain_report;

    /* Barometer readings for 2nd barometer */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float press_abs;       /* Absolute pressure */
      float press_diff;      /* Differential pressure */
      int16_t temperature;   /* Temperature measurement */
    } scaled_pressure2;

    /* Motion capture attitude and position */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float q[4]; /* Attitude quaternion (w, x, y, z order, zero-rotation is 1,
                     0, 0, 0) */
      float x;    /* X position (NED) */
      float y;    /* Y position (NED) */
      float z;    /* Z position (NED) */
      float covariance
          [21]; /* EXTENSION Row-major representation of a pose 6x6
                   cross-covariance matrix upper right triangle (states: x, y,
                   z, roll, pitch, yaw; first six entries are the first ROW,
                   next five entries are the second ROW, etc.). If unknown,
                   assign NaN value to first element in the array. */
    } att_pos_mocap;

    /* Set the vehicle attitude and body angular rates. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float controls
          [8]; /* Actuator controls. Normed to -1..+1 where 0 is neutral
                  position. Throttle for single rotation direction motors is
                  0..1, negative range for reverse direction. Standard mapping
                  for attitude controls (group 0): (index 0-7): roll, pitch,
                  yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load
                  a pass-through mixer to repurpose them as generic outputs. */
      uint8_t group_mlx;     /* Actuator group. The "_mlx" indicates this is a
                                multi-instance message and a MAVLink parser should
                                use this field to difference between instances. */
      uint8_t target_system; /* System ID */
      uint8_t target_component; /* Component ID */
    } set_actuator_control_target;

    /* Set the vehicle attitude and body angular rates. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float controls
          [8]; /* Actuator controls. Normed to -1..+1 where 0 is neutral
                  position. Throttle for single rotation direction motors is
                  0..1, negative range for reverse direction. Standard mapping
                  for attitude controls (group 0): (index 0-7): roll, pitch,
                  yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load
                  a pass-through mixer to repurpose them as generic outputs. */
      uint8_t group_mlx; /* Actuator group. The "_mlx" indicates this is a
                            multi-instance message and a MAVLink parser should
                            use this field to difference between instances. */
    } actuator_control_target;

    /* The current system altitude. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float altitude_monotonic; /* This altitude measure is initialized on
                                   system boot and monotonic (it is never reset,
                                   but represents the local altitude change).
                                   The only guarantee on this field is that it
                                   will never be reset and is consistent within
                                   a flight. The recommended value for this
                                   field is the uncorrected barometric altitude
                                   at boot time. This altitude will also drift
                                   and vary between flights. */
      float
          altitude_amsl;    /* This altitude measure is strictly above mean sea
                               level and might be non-monotonic (it might reset on
                               events like GPS lock or when a new QNH value is
                               set). It should be the altitude to which global
                               altitude waypoints are compared to. Note that it is
                               *not* the GPS altitude, however, most GPS modules
                               already output MSL by default and not the WGS84
                               altitude. */
      float altitude_local; /* This is the local altitude in the local
                               coordinate frame. It is not the altitude above
                               home, but in reference to the coordinate origin
                               (0, 0, 0). It is up-positive. */
      float altitude_relative; /* This is the altitude above the home position.
                                  It resets on each change of the current home
                                  position. */
      float
          altitude_terrain;   /* This is the altitude above terrain. It might be
                                 fed by a terrain database or an altimeter. Values
                                 smaller than -1000 should be interpreted as
                                 unknown. */
      float bottom_clearance; /* This is not the altitude, but the clear space
                                 below the system according to the fused
                                 clearance estimate. It generally should max out
                                 at the maximum range of e.g. the laser
                                 altimeter. It is generally a moving target. A
                                 negative value indicates no measurement
                                 available. */
    } altitude;

    /* The autopilot is requesting a resource (file, binary, other type of data)
     */
    struct {
      uint8_t request_id; /* Request ID. This ID should be re-used when sending
                             back URI contents */
      uint8_t
          uri_type; /* The type of requested URI. 0 = a file via URL. 1 = a
                       UAVCAN binary */
      uint8_t
          uri
              [120]; /* The requested unique resource identifier (URI). It is
                        not necessarily a straight domain name (depends on the
                        URI type enum) */
      uint8_t transfer_type; /* The way the autopilot wants to receive the URI.
                                0 = MAVLink FTP. 1 = binary stream. */
      uint8_t storage[120];  /* The storage path the autopilot wants the URI to
                                be stored in. Will only be valid if the
                                transfer_type has a storage associated (e.g.
                                MAVLink FTP). */
    } resource_request;

    /* Barometer readings for 3rd barometer */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float press_abs;       /* Absolute pressure */
      float press_diff;      /* Differential pressure */
      int16_t temperature;   /* Temperature measurement */
    } scaled_pressure3;

    /* Current motion information from a designated system */
    struct {
      uint64_t timestamp;    /* Timestamp (time since system boot). */
      uint64_t custom_state; /* button states or switches of a tracker device */
      int32_t lat;           /* Latitude (WGS84) */
      int32_t lon;           /* Longitude (WGS84) */
      float alt;             /* Altitude (MSL) */
      float vel[3];          /* target velocity (0,0,0) for unknown */
      float acc[3];        /* linear target acceleration (0,0,0) for unknown */
      float attitude_q[4]; /* (1 0 0 0 for unknown) */
      float rates[3];      /* (0 0 0 for unknown) */
      float position_cov[3];    /* eph epv */
      uint8_t est_capabilities; /* bit positions for tracker reporting
                                   capabilities (POS = 0, VEL = 1, ACCEL = 2,
                                   ATT + RATES = 3) */
    } follow_target;

    /* The smoothed, monotonic system state used to feed the control loops of
     * the system. */
    struct {
      uint64_t
          time_usec;  /* Timestamp (UNIX Epoch time or time since system boot).
                         The receiving end can infer timestamp format
                         (since 1.1.1970 or since system boot) by checking for
                         the magnitude the number. */
      float x_acc;    /* X acceleration in body frame */
      float y_acc;    /* Y acceleration in body frame */
      float z_acc;    /* Z acceleration in body frame */
      float x_vel;    /* X velocity in body frame */
      float y_vel;    /* Y velocity in body frame */
      float z_vel;    /* Z velocity in body frame */
      float x_pos;    /* X position in local frame */
      float y_pos;    /* Y position in local frame */
      float z_pos;    /* Z position in local frame */
      float airspeed; /* Airspeed, set to -1 if unknown */
      float vel_variance[3]; /* Variance of body velocity estimate */
      float pos_variance[3]; /* Variance in local position */
      float q[4];            /* The attitude, represented as Quaternion */
      float roll_rate;       /* Angular rate in roll axis */
      float pitch_rate;      /* Angular rate in pitch axis */
      float yaw_rate;        /* Angular rate in yaw axis */
    } control_system_state;

    /* Battery information. Updates GCS with flight controller battery status.
     * Use SMART_BATTERY_* messages instead for smart batteries. */
    struct {
      int32_t current_consumed; /* Consumed charge, -1: autopilot does not
                                   provide consumption estimate */
      int32_t energy_consumed;  /* Consumed energy, -1: autopilot does not
                                   provide energy consumption estimate */
      int16_t
          temperature; /* Temperature of the battery. INT16_MAX for unknown
                          temperature. */
      uint16_t voltages
          [10]; /* Battery voltage of cells. Cells above the valid cell count
                   for this battery should have the UINT16_MAX value. */
      int16_t current_battery; /* Battery current, -1: autopilot does not
                                  measure the current */
      uint8_t id;              /* Battery ID */
      enum MAV_BATTERY_FUNCTION
          battery_function; /* (uint8_t) Function of the battery */
      enum MAV_BATTERY_TYPE
          type; /* (uint8_t) Type (chemistry) of the battery */
      int8_t
          battery_remaining;  /* Remaining battery energy. Values: [0-100], -1:
                                 autopilot does not estimate the remaining
                                 battery. */
      int32_t time_remaining; /* EXTENSION Remaining battery time, 0: autopilot
                                 does not provide remaining battery time
                                 estimate */
      enum MAV_BATTERY_CHARGE_STATE charge_state; /* (uint8_t) EXTENSION State
                                                     for extent of discharge,
                                                     provided by autopilot for
                                                     warning or external
                                                     reactions */
    } battery_status;

    /* Version and capability of autopilot software. This should be emitted in
     * response to a MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES command. */
    struct {
      enum MAV_PROTOCOL_CAPABILITY
          capabilities;           /* (uint64_t) Bitmap of capabilities */
      uint64_t uid;               /* UID if provided by hardware (see uid2) */
      uint32_t flight_sw_version; /* Firmware version number */
      uint32_t middleware_sw_version; /* Middleware version number */
      uint32_t os_sw_version;         /* Operating system version number */
      uint32_t board_version; /* HW / board version (last 8 bytes should be
                                 silicon ID, if any) */
      uint16_t vendor_id;     /* ID of the board vendor */
      uint16_t product_id;    /* ID of the product */
      uint8_t flight_custom_version[8]; /* Custom version field, commonly the
                                           first 8 bytes of the git hash. This
                                           is not an unique identifier, but
                                           should allow to identify the commit
                                           using the main version number even
                                           for very large code bases. */
      uint8_t
          middleware_custom_version[8]; /* Custom version field, commonly the
                                           first 8 bytes of the git hash. This
                                           is not an unique identifier, but
                                           should allow to identify the commit
                                           using the main version number even
                                           for very large code bases. */
      uint8_t os_custom_version
          [8]; /* Custom version field, commonly the first 8 bytes of the git
                  hash. This is not an unique identifier, but should allow to
                  identify the commit using the main version number even for
                  very large code bases. */
      uint8_t uid2
          [18]; /* EXTENSION UID if provided by hardware (supersedes the uid
                   field. If this is non-zero, use this field, otherwise use
                   uid) */
    } autopilot_version;

    /* The location of a landing target. See:
     * https://mavlink.io/en/services/landing_target.html */
    struct {
      uint64_t
          time_usec;  /* Timestamp (UNIX Epoch time or time since system boot).
                         The receiving end can infer timestamp format
                         (since 1.1.1970 or since system boot) by checking for
                         the magnitude the number. */
      float angle_x;  /* X-axis angular offset of the target from the center of
                         the image */
      float angle_y;  /* Y-axis angular offset of the target from the center of
                         the image */
      float distance; /* Distance to the target from the vehicle */
      float size_x;   /* Size of target along x-axis */
      float size_y;   /* Size of target along y-axis */
      uint8_t
          target_num; /* The ID of the target if multiple targets are present */
      enum MAV_FRAME
          frame;  /* (uint8_t) Coordinate frame used for following fields. */
      float x;    /* EXTENSION X Position of the landing target in MAV_FRAME */
      float y;    /* EXTENSION Y Position of the landing target in MAV_FRAME */
      float z;    /* EXTENSION Z Position of the landing target in MAV_FRAME */
      float q[4]; /* EXTENSION Quaternion of landing target orientation (w, x,
                     y, z order, zero-rotation is 1, 0, 0, 0) */
      enum LANDING_TARGET_TYPE
          type;               /* (uint8_t) EXTENSION Type of landing target */
      uint8_t position_valid; /* EXTENSION Boolean indicating whether the
                                 position fields (x, y, z, q, type) contain
                                 valid target position information (valid: 1,
                                 invalid: 0). Default is 0 (invalid). */
    } landing_target;

    /* Accelerometer and Gyro biases from the navigation filter */
    struct {
      uint64_t usec; /* Timestamp (microseconds) */
      float accel_0; /* b_f[0] */
      float accel_1; /* b_f[1] */
      float accel_2; /* b_f[2] */
      float gyro_0;  /* b_f[0] */
      float gyro_1;  /* b_f[1] */
      float gyro_2;  /* b_f[2] */
    } nav_filter_bias;

    /* Complete set of calibration parameters for the radio */
    struct {
      uint16_t aileron[3];  /* Aileron setpoints: left, center, right */
      uint16_t elevator[3]; /* Elevator setpoints: nose down, center, nose up */
      uint16_t rudder[3]; /* Rudder setpoints: nose left, center, nose right */
      uint16_t
          gyro[2]; /* Tail gyro mode/gain setpoints: heading hold, rate mode */
      uint16_t pitch[5];    /* Pitch curve setpoints (every 25%) */
      uint16_t throttle[5]; /* Throttle curve setpoints (every 25%) */
    } radio_calibration;

    /* System status specific to ualberta uav */
    struct {
      uint8_t mode;     /* System mode, see UALBERTA_AUTOPILOT_MODE ENUM */
      uint8_t nav_mode; /* Navigation mode, see UALBERTA_NAV_MODE ENUM */
      uint8_t pilot;    /* Pilot mode, see UALBERTA_PILOT_MODE */
    } ualberta_sys_status;

    /* Estimator status message including flags, innovation test ratios and
     * estimated accuracies. The flags message is an integer bitmask containing
     * information on which EKF outputs are valid. See the
     * ESTIMATOR_STATUS_FLAGS enum definition for further information. The
     * innovation test ratios show the magnitude of the sensor innovation
     * divided by the innovation check threshold. Under normal operation the
     * innovation test ratios should be below 0.5 with occasional values up
     * to 1.0. Values greater than 1.0 should be rare under normal operation and
     * indicate that a measurement has been rejected by the filter. The user
     * should be notified if an innovation test ratio greater than 1.0 is
     * recorded. Notifications for values in the range between 0.5 and 1.0
     * should be optional and controllable by the user. */
    struct {
      uint64_t
          time_usec;   /* Timestamp (UNIX Epoch time or time since system boot).
                          The receiving end can infer timestamp format
                          (since 1.1.1970 or since system boot) by checking for
                          the magnitude the number. */
      float vel_ratio; /* Velocity innovation test ratio */
      float pos_horiz_ratio;    /* Horizontal position innovation test ratio */
      float pos_vert_ratio;     /* Vertical position innovation test ratio */
      float mag_ratio;          /* Magnetometer innovation test ratio */
      float hagl_ratio;         /* Height above terrain innovation test ratio */
      float tas_ratio;          /* True airspeed innovation test ratio */
      float pos_horiz_accuracy; /* Horizontal position 1-STD accuracy relative
                                   to the EKF local origin */
      float pos_vert_accuracy;  /* Vertical position 1-STD accuracy relative to
                                   the EKF local origin */
      enum ESTIMATOR_STATUS_FLAGS
          flags; /* (uint16_t) Bitmap indicating which EKF outputs are valid. */
    } estimator_status;

    /* Wind covariance estimate from vehicle. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float wind_x;  /* Wind in X (NED) direction */
      float wind_y;  /* Wind in Y (NED) direction */
      float wind_z;  /* Wind in Z (NED) direction */
      float
          var_horiz;  /* Variability of the wind in XY. RMS of a 1 Hz lowpassed
                         wind estimate. */
      float var_vert; /* Variability of the wind in Z. RMS of a 1 Hz lowpassed
                         wind estimate. */
      float wind_alt; /* Altitude (MSL) that this measurement was taken at */
      float horiz_accuracy; /* Horizontal speed 1-STD accuracy */
      float vert_accuracy;  /* Vertical speed 1-STD accuracy */
    } wind_cov;

    /* GPS sensor input message.  This is a raw sensor value sent by the GPS.
     * This is NOT the global position estimate of the system. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint32_t time_week_ms; /* GPS time (from start of GPS week) */
      int32_t lat;           /* Latitude (WGS84) */
      int32_t lon;           /* Longitude (WGS84) */
      float alt;             /* Altitude (MSL). Positive for up. */
      float hdop;            /* GPS HDOP horizontal dilution of position */
      float vdop;            /* GPS VDOP vertical dilution of position */
      float vn; /* GPS velocity in NORTH direction in earth-fixed NED frame */
      float ve; /* GPS velocity in EAST direction in earth-fixed NED frame */
      float vd; /* GPS velocity in DOWN direction in earth-fixed NED frame */
      float speed_accuracy; /* GPS speed accuracy */
      float horiz_accuracy; /* GPS horizontal accuracy */
      float vert_accuracy;  /* GPS vertical accuracy */
      enum GPS_INPUT_IGNORE_FLAGS
          ignore_flags;   /* (uint16_t) Bitmap indicating which GPS input flags
                             fields to ignore.  All other fields must be provided.
                           */
      uint16_t time_week; /* GPS week number */
      uint8_t gps_id;     /* ID of the GPS for multiple GPS inputs */
      uint8_t fix_type;   /* 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS.
                             5: 3D with RTK */
      uint8_t satellites_visible; /* Number of satellites visible. */
    } gps_input;

    /* RTCM message for injecting into the onboard GPS (used for DGPS) */
    struct {
      uint8_t flags; /* LSB: 1 means message is fragmented, next 2 bits are the
                        fragment ID, the remaining 5 bits are used for the
                        sequence ID. Messages are only to be flushed to the GPS
                        when the entire message has been reconstructed on the
                        autopilot. The fragment ID specifies which order the
                        fragments should be assembled into a buffer, while the
                        sequence ID is used to detect a mismatch between
                        different buffers. The buffer is considered fully
                        reconstructed when either all 4 fragments are present,
                        or all the fragments before the first fragment with a
                        non full payload is received. This management is used to
                        ensure that normal GPS operation doesn't corrupt RTCM
                        data, and to recover from a unreliable transport
                        delivery order. */
      uint8_t len;   /* data length */
      uint8_t data[180]; /* RTCM message (may be fragmented) */
    } gps_rtcm_data;

    /* Message appropriate for high latency connections like Iridium */
    struct {
      uint32_t
          custom_mode;    /* A bitfield for use for autopilot-specific flags. */
      int32_t latitude;   /* Latitude */
      int32_t longitude;  /* Longitude */
      int16_t roll;       /* roll */
      int16_t pitch;      /* pitch */
      uint16_t heading;   /* heading */
      int16_t heading_sp; /* heading setpoint */
      int16_t altitude_amsl; /* Altitude above mean sea level */
      int16_t altitude_sp; /* Altitude setpoint relative to the home position */
      uint16_t wp_distance; /* distance to target */
      enum MAV_MODE_FLAG
          base_mode; /* (uint8_t) Bitmap of enabled system modes. */
      enum MAV_LANDED_STATE
          landed_state;    /* (uint8_t) The landed state. Is set to
                              MAV_LANDED_STATE_UNDEFINED if landed state is
                              unknown. */
      int8_t throttle;     /* throttle (percentage) */
      uint8_t airspeed;    /* airspeed */
      uint8_t airspeed_sp; /* airspeed setpoint */
      uint8_t groundspeed; /* groundspeed */
      int8_t climb_rate;   /* climb rate */
      uint8_t
          gps_nsat; /* Number of satellites visible. If unknown, set to 255 */
      enum GPS_FIX_TYPE gps_fix_type; /* (uint8_t) GPS Fix type. */
      uint8_t battery_remaining;      /* Remaining battery (percentage) */
      int8_t temperature;             /* Autopilot temperature (degrees C) */
      int8_t temperature_air; /* Air temperature (degrees C) from airspeed
                                 sensor */
      uint8_t
          failsafe;   /* failsafe (each bit represents a failsafe where 0=ok,
                         1=failsafe active (bit0:RC, bit1:batt, bit2:GPS,
                         bit3:GCS, bit4:fence) */
      uint8_t wp_num; /* current waypoint number */
    } high_latency;

    /* Message appropriate for high latency connections like Iridium (version 2)
     */
    struct {
      uint32_t
          timestamp;     /* Timestamp (milliseconds since boot or Unix epoch) */
      int32_t latitude;  /* Latitude */
      int32_t longitude; /* Longitude */
      uint16_t custom_mode; /* A bitfield for use for autopilot-specific flags
                               (2 byte version). */
      int16_t altitude;     /* Altitude above mean sea level */
      int16_t target_altitude;  /* Altitude setpoint */
      uint16_t target_distance; /* Distance to target waypoint or position */
      uint16_t wp_num;          /* Current waypoint number */
      enum HL_FAILURE_FLAG
          failure_flags; /* (uint16_t) Bitmap of failure flags. */
      enum MAV_TYPE
          type; /* (uint8_t) Type of the MAV (quadrotor, helicopter, etc.) */
      enum MAV_AUTOPILOT autopilot; /* (uint8_t) Autopilot type / class. */
      uint8_t heading;              /* Heading */
      uint8_t target_heading;       /* Heading setpoint */
      uint8_t throttle;             /* Throttle */
      uint8_t airspeed;             /* Airspeed */
      uint8_t airspeed_sp;          /* Airspeed setpoint */
      uint8_t groundspeed;          /* Groundspeed */
      uint8_t windspeed;            /* Windspeed */
      uint8_t wind_heading;         /* Wind heading */
      uint8_t eph; /* Maximum error horizontal position since last message */
      uint8_t epv; /* Maximum error vertical position since last message */
      int8_t temperature_air; /* Air temperature from airspeed sensor */
      int8_t climb_rate; /* Maximum climb rate magnitude since last message */
      int8_t battery;    /* Battery (percentage, -1 for DNU) */
      int8_t custom0;    /* Field for custom payload. */
      int8_t custom1;    /* Field for custom payload. */
      int8_t custom2;    /* Field for custom payload. */
    } high_latency2;

    /* Vibration levels and accelerometer clipping */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float vibration_x;   /* Vibration levels on X-axis */
      float vibration_y;   /* Vibration levels on Y-axis */
      float vibration_z;   /* Vibration levels on Z-axis */
      uint32_t clipping_0; /* first accelerometer clipping count */
      uint32_t clipping_1; /* second accelerometer clipping count */
      uint32_t clipping_2; /* third accelerometer clipping count */
    } vibration;

    /* This message can be requested by sending the MAV_CMD_GET_HOME_POSITION
     * command. The position the system will return to and land on. The position
     * is set automatically by the system during the takeoff in case it was not
     * explicitly set by the operator before or after. The position the system
     * will return to and land on. The global and local positions encode the
     * position in the respective coordinate frames, while the q parameter
     * encodes the orientation of the surface. Under normal conditions it
     * describes the heading and terrain slope, which can be used by the
     * aircraft to adjust the approach. The approach 3D vector describes the
     * point to which the system should fly in normal flight mode and then
     * perform a landing sequence along the vector. */
    struct {
      int32_t latitude;  /* Latitude (WGS84) */
      int32_t longitude; /* Longitude (WGS84) */
      int32_t altitude;  /* Altitude (MSL). Positive for up. */
      float x; /* Local X position of this position in the local coordinate
                  frame */
      float y; /* Local Y position of this position in the local coordinate
                  frame */
      float z; /* Local Z position of this position in the local coordinate
                  frame */
      float
          q[4]; /* World to surface normal and heading transformation of the
                   takeoff position. Used to indicate the heading and slope of
                   the ground */
      float approach_x; /* Local X position of the end of the approach vector.
                           Multicopters should set this position based on their
                           takeoff path. Grass-landing fixed wing aircraft
                           should set it the same way as multicopters.
                           Runway-landing fixed wing aircraft should set it to
                           the opposite direction of the takeoff, assuming the
                           takeoff happened from the threshold / touchdown zone.
                         */
      float approach_y; /* Local Y position of the end of the approach vector.
                           Multicopters should set this position based on their
                           takeoff path. Grass-landing fixed wing aircraft
                           should set it the same way as multicopters.
                           Runway-landing fixed wing aircraft should set it to
                           the opposite direction of the takeoff, assuming the
                           takeoff happened from the threshold / touchdown zone.
                         */
      float approach_z; /* Local Z position of the end of the approach vector.
                           Multicopters should set this position based on their
                           takeoff path. Grass-landing fixed wing aircraft
                           should set it the same way as multicopters.
                           Runway-landing fixed wing aircraft should set it to
                           the opposite direction of the takeoff, assuming the
                           takeoff happened from the threshold / touchdown zone.
                         */
      uint64_t
          time_usec; /* EXTENSION Timestamp (UNIX Epoch time or time since
                        system boot). The receiving end can infer timestamp
                        format (since 1.1.1970 or since system boot) by checking
                        for the magnitude the number. */
    } home_position;

    /* The position the system will return to and land on. The position is set
     * automatically by the system during the takeoff in case it was not
     * explicitly set by the operator before or after. The global and local
     * positions encode the position in the respective coordinate frames, while
     * the q parameter encodes the orientation of the surface. Under normal
     * conditions it describes the heading and terrain slope, which can be used
     * by the aircraft to adjust the approach. The approach 3D vector describes
     * the point to which the system should fly in normal flight mode and then
     * perform a landing sequence along the vector. */
    struct {
      int32_t latitude;  /* Latitude (WGS84) */
      int32_t longitude; /* Longitude (WGS84) */
      int32_t altitude;  /* Altitude (MSL). Positive for up. */
      float x; /* Local X position of this position in the local coordinate
                  frame */
      float y; /* Local Y position of this position in the local coordinate
                  frame */
      float z; /* Local Z position of this position in the local coordinate
                  frame */
      float
          q[4]; /* World to surface normal and heading transformation of the
                   takeoff position. Used to indicate the heading and slope of
                   the ground */
      float approach_x; /* Local X position of the end of the approach vector.
                           Multicopters should set this position based on their
                           takeoff path. Grass-landing fixed wing aircraft
                           should set it the same way as multicopters.
                           Runway-landing fixed wing aircraft should set it to
                           the opposite direction of the takeoff, assuming the
                           takeoff happened from the threshold / touchdown zone.
                         */
      float approach_y; /* Local Y position of the end of the approach vector.
                           Multicopters should set this position based on their
                           takeoff path. Grass-landing fixed wing aircraft
                           should set it the same way as multicopters.
                           Runway-landing fixed wing aircraft should set it to
                           the opposite direction of the takeoff, assuming the
                           takeoff happened from the threshold / touchdown zone.
                         */
      float approach_z; /* Local Z position of the end of the approach vector.
                           Multicopters should set this position based on their
                           takeoff path. Grass-landing fixed wing aircraft
                           should set it the same way as multicopters.
                           Runway-landing fixed wing aircraft should set it to
                           the opposite direction of the takeoff, assuming the
                           takeoff happened from the threshold / touchdown zone.
                         */
      uint8_t target_system; /* System ID. */
      uint64_t
          time_usec; /* EXTENSION Timestamp (UNIX Epoch time or time since
                        system boot). The receiving end can infer timestamp
                        format (since 1.1.1970 or since system boot) by checking
                        for the magnitude the number. */
    } set_home_position;

    /* The interval between messages for a particular MAVLink message ID. This
     * interface replaces DATA_STREAM */
    struct {
      int32_t
          interval_us;     /* The interval between two messages. A value of -1
                              indicates this stream is disabled, 0 indicates it is
                              not available, &gt; 0 indicates the interval at which
                              it is sent. */
      uint16_t message_id; /* The ID of the requested MAVLink message. v1.0 is
                              limited to 254 messages. */
    } message_interval;

    /* Provides state for additional features */
    struct {
      enum MAV_VTOL_STATE
          vtol_state; /* (uint8_t) The VTOL state if applicable. Is set to
                         MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL
                         configuration. */
      enum MAV_LANDED_STATE
          landed_state; /* (uint8_t) The landed state. Is set to
                           MAV_LANDED_STATE_UNDEFINED if landed state is
                           unknown. */
    } extended_sys_state;

    /* The location and information of an ADSB vehicle */
    struct {
      uint32_t ICAO_address; /* ICAO address */
      int32_t lat;           /* Latitude */
      int32_t lon;           /* Longitude */
      int32_t altitude;      /* Altitude(ASL) */
      uint16_t heading;      /* Course over ground */
      uint16_t hor_velocity; /* The horizontal velocity */
      int16_t ver_velocity;  /* The vertical velocity. Positive is up */
      enum ADSB_FLAGS flags; /* (uint16_t) Bitmap to indicate various statuses
                                including valid data fields */
      uint16_t squawk;       /* Squawk code */
      enum ADSB_ALTITUDE_TYPE altitude_type; /* (uint8_t) ADSB altitude type. */
      char callsign[9];                      /* The callsign, 8+null */
      enum ADSB_EMITTER_TYPE emitter_type;   /* (uint8_t) ADSB emitter type. */
      uint8_t tslc; /* Time since last communication in seconds */
    } adsb_vehicle;

    /* Information about a potential collision */
    struct {
      uint32_t id; /* Unique identifier, domain based on src field */
      float time_to_minimum_delta; /* Estimated time until collision occurs */
      float
          altitude_minimum_delta; /* Closest vertical distance between vehicle
                                     and object */
      float horizontal_minimum_delta; /* Closest horizontal distance between
                                         vehicle and object */
      enum MAV_COLLISION_SRC src;     /* (uint8_t) Collision data source */
      enum MAV_COLLISION_ACTION
          action; /* (uint8_t) Action that is being taken to avoid this
                     collision */
      enum MAV_COLLISION_THREAT_LEVEL threat_level; /* (uint8_t) How concerned
                                                       the aircraft is about
                                                       this collision */
    } collision;

    /* Message implementing parts of the V2 payload specs in V1 frames for
     * transitional support. */
    struct {
      uint16_t
          message_type; /* A code that identifies the software component that
                           understands this message (analogous to USB device
                           classes or mime type strings).  If this code is less
                           than 32768, it is considered a 'registered' protocol
                           extension and the corresponding entry should be added
                           to
                           https://github.com/mavlink/mavlink/extension-message-ids.xml.
                           Software creators can register blocks of message IDs
                           as needed (useful for GCS specific metadata, etc...).
                           Message_types greater than 32767 are considered local
                           experiments and should not be checked in to any
                           widely distributed codebase. */
      uint8_t target_network;   /* Network ID (0 for broadcast) */
      uint8_t target_system;    /* System ID (0 for broadcast) */
      uint8_t target_component; /* Component ID (0 for broadcast) */
      uint8_t payload
          [249]; /* Variable length payload. The length is defined by the
                    remaining message length when subtracting the header and
                    other fields.  The entire content of this block is opaque
                    unless you understand any the encoding message_type.  The
                    particular encoding used can be extension specific and might
                    not always be documented as part of the mavlink
                    specification. */
    } v2_extension;

    /* Send raw controller memory. The use of this message is discouraged for
     * normal packets, but a quite efficient way for testing new messages and
     * getting experimental debug output. */
    struct {
      uint16_t address; /* Starting address of the debug variables */
      uint8_t ver; /* Version code of the type variable. 0=unknown, type ignored
                      and assumed int16_t. 1=as below */
      uint8_t type; /* Type code of the memory variables. for ver = 1: 0=16 x
                       int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14 */
      int8_t value[32]; /* Memory contents at specified address */
    } memory_vect;

    /* To debug something using a named 3D vector. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float x;       /* x */
      float y;       /* y */
      float z;       /* z */
      char name[10]; /* Name */
    } debug_vect;

    /* Send a key-value pair as float. The use of this message is discouraged
     * for normal packets, but a quite efficient way for testing new messages
     * and getting experimental debug output. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float value;           /* Floating point value */
      char name[10];         /* Name of the debug variable */
    } named_value_float;

    /* Send a key-value pair as integer. The use of this message is discouraged
     * for normal packets, but a quite efficient way for testing new messages
     * and getting experimental debug output. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      int32_t value;         /* Signed integer value */
      char name[10];         /* Name of the debug variable */
    } named_value_int;

    /* Status text message. These messages are printed in yellow in the COMM
     * console of QGroundControl. WARNING: They consume quite some bandwidth, so
     * use only for important status and error messages. If implemented wisely,
     * these messages are buffered on the MCU and sent only at a limited rate
     * (e.g. 10 Hz). */
    struct {
      enum MAV_SEVERITY
          severity; /* (uint8_t) Severity of status. Relies on the definitions
                       within RFC-5424. */
      char text
          [50]; /* Status text message, without null termination character */
    } statustext;

    /* Send a debug value. The index is used to discriminate between values.
     * These values show up in the plot of QGroundControl as DEBUG N. */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float value;           /* DEBUG value */
      uint8_t ind;           /* index of debug variable */
    } debug;

    /* Setup a MAVLink2 signing key. If called with secret_key of all zero and
     * zero initial_timestamp will disable signing */
    struct {
      uint64_t initial_timestamp; /* initial timestamp */
      uint8_t target_system;      /* system id of the target */
      uint8_t target_component;   /* component ID of the target */
      uint8_t secret_key[32];     /* signing key */
    } setup_signing;

    /* Report button state change. */
    struct {
      uint32_t time_boot_ms;   /* Timestamp (time since system boot). */
      uint32_t last_change_ms; /* Time of last change of button state. */
      uint8_t state;           /* Bitmap for state of buttons. */
    } button_change;

    /* Control vehicle tone generation (buzzer) */
    struct {
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      char tune[30];            /* tune in board specific format */
      char tune2[200]; /* EXTENSION tune extension (appended to tune) */
    } play_tune;

    /* Information about a camera */
    struct {
      uint32_t time_boot_ms;     /* Timestamp (time since system boot). */
      uint32_t firmware_version; /* Version of the camera firmware (v &lt;&lt;
                                    24 &amp; 0xff = Dev, v &lt;&lt; 16 &amp;
                                    0xff = Patch, v &lt;&lt; 8 &amp; 0xff =
                                    Minor, v &amp; 0xff = Major) */
      float focal_length;        /* Focal length */
      float sensor_size_h;       /* Image sensor size horizontal */
      float sensor_size_v;       /* Image sensor size vertical */
      enum CAMERA_CAP_FLAGS
          flags;             /* (uint32_t) Bitmap of camera capability flags. */
      uint16_t resolution_h; /* Horizontal image resolution */
      uint16_t resolution_v; /* Vertical image resolution */
      uint16_t
          cam_definition_version; /* Camera definition version (iteration) */
      uint8_t vendor_name[32];    /* Name of the camera vendor */
      uint8_t model_name[32];     /* Name of the camera model */
      uint8_t lens_id;            /* Reserved for a lens ID */
      char
          cam_definition_uri[140]; /* Camera definition URI (if any, otherwise
                                      only basic functions will be available).
                                    */
    } camera_information;

    /* Settings of a camera, can be requested using
     * MAV_CMD_REQUEST_CAMERA_SETTINGS. */
    struct {
      uint32_t time_boot_ms;    /* Timestamp (time since system boot). */
      enum CAMERA_MODE mode_id; /* (uint8_t) Camera mode */
      float
          zoomLevel; /* EXTENSION Current zoom level (0.0 to 100.0, NaN if not
                        known) */
      float focusLevel; /* EXTENSION Current focus level (0.0 to 100.0, NaN if
                           not known) */
    } camera_settings;

    /* Information about a storage medium. This message is sent in response to a
     * request and whenever the status of the storage changes (STORAGE_STATUS).
     */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float total_capacity;  /* Total capacity. If storage is not ready
                                (STORAGE_STATUS_READY) value will be ignored. */
      float used_capacity;   /* Used capacity. If storage is not ready
                                (STORAGE_STATUS_READY) value will be ignored. */
      float
          available_capacity; /* Available storage capacity. If storage is not
                                 ready (STORAGE_STATUS_READY) value will be
                                 ignored. */
      float read_speed;       /* Read speed. */
      float write_speed;      /* Write speed. */
      uint8_t storage_id;     /* Storage ID (1 for first, 2 for second, etc.) */
      uint8_t storage_count;  /* Number of storage devices */
      enum STORAGE_STATUS status; /* (uint8_t) Status of storage */
    } storage_information;

    /* Information about the status of a capture. */
    struct {
      uint32_t time_boot_ms;      /* Timestamp (time since system boot). */
      float image_interval;       /* Image capture interval */
      uint32_t recording_time_ms; /* Time since recording started */
      float available_capacity;   /* Available storage capacity. */
      uint8_t
          image_status;     /* Current status of image capturing (0: idle, 1:
                               capture in progress, 2: interval set but idle, 3:
                               interval set and capture in progress) */
      uint8_t video_status; /* Current status of video capturing (0: idle, 1:
                               capture in progress) */
    } camera_capture_status;

    /* Information about a captured image */
    struct {
      uint64_t time_utc;     /* Timestamp (time since UNIX epoch) in UTC. 0 for
                                unknown. */
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      int32_t lat;           /* Latitude where image was taken */
      int32_t lon;           /* Longitude where capture was taken */
      int32_t alt;           /* Altitude (MSL) where image was taken */
      int32_t relative_alt;  /* Altitude above ground */
      float q[4]; /* Quaternion of camera orientation (w, x, y, z order,
                     zero-rotation is 0, 0, 0, 0) */
      int32_t
          image_index;   /* Zero based index of this image (image count since
                            armed -1) */
      uint8_t camera_id; /* Camera ID (1 for first, 2 for second, etc.) */
      int8_t capture_result; /* Boolean indicating success (1) or failure (0)
                                while capturing this image. */
      char file_url[205];    /* URL of image taken. Either local storage or
                                http://foo.jpg if camera provides an HTTP
                                interface. */
    } camera_image_captured;

    /* Information about flight since last arming. */
    struct {
      uint64_t arming_time_utc; /* Timestamp at arming (time since UNIX epoch)
                                   in UTC, 0 for unknown */
      uint64_t
          takeoff_time_utc;  /* Timestamp at takeoff (time since UNIX epoch) in
                                UTC, 0 for unknown */
      uint64_t flight_uuid;  /* Universally unique identifier (UUID) of flight,
                                should correspond to name of log files */
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
    } flight_information;

    /* Orientation of a mount */
    struct {
      uint32_t time_boot_ms; /* Timestamp (time since system boot). */
      float roll;  /* Roll in global frame (set to NaN for invalid). */
      float pitch; /* Pitch in global frame (set to NaN for invalid). */
      float yaw;   /* Yaw relative to vehicle(set to NaN for invalid). */
      float
          yaw_absolute; /* EXTENSION Yaw in absolute frame, North is 0 (set to
                           NaN for invalid). */
    } mount_orientation;

    /* A message containing logged data (see also MAV_CMD_LOGGING_START) */
    struct {
      uint16_t sequence;            /* sequence number (can wrap) */
      uint8_t target_system;        /* system ID of the target */
      uint8_t target_component;     /* component ID of the target */
      uint8_t length;               /* data length */
      uint8_t first_message_offset; /* offset into data where first message
                                       starts. This can be used for recovery,
                                       when a previous message got lost (set to
                                       255 if no start exists). */
      uint8_t data[249];            /* logged data */
    } logging_data;

    /* A message containing logged data which requires a LOGGING_ACK to be sent
     * back */
    struct {
      uint16_t sequence;            /* sequence number (can wrap) */
      uint8_t target_system;        /* system ID of the target */
      uint8_t target_component;     /* component ID of the target */
      uint8_t length;               /* data length */
      uint8_t first_message_offset; /* offset into data where first message
                                       starts. This can be used for recovery,
                                       when a previous message got lost (set to
                                       255 if no start exists). */
      uint8_t data[249];            /* logged data */
    } logging_data_acked;

    /* An ack for a LOGGING_DATA_ACKED message */
    struct {
      uint16_t sequence;        /* sequence number (must match the one in
                                   LOGGING_DATA_ACKED) */
      uint8_t target_system;    /* system ID of the target */
      uint8_t target_component; /* component ID of the target */
    } logging_ack;

    /* Information about video stream */
    struct {
      float framerate;  /* Frame rate. */
      uint32_t bitrate; /* Bit rate. */
      enum VIDEO_STREAM_STATUS_FLAGS
          flags;             /* (uint16_t) Bitmap of stream status flags. */
      uint16_t resolution_h; /* Horizontal resolution. */
      uint16_t resolution_v; /* Vertical resolution. */
      uint16_t rotation;     /* Video image rotation clockwise. */
      uint16_t hfov;         /* Horizontal Field of view. */
      uint8_t stream_id; /* Video Stream ID (1 for first, 2 for second, etc.) */
      uint8_t count;     /* Number of streams available. */
      enum VIDEO_STREAM_TYPE type; /* (uint8_t) Type of stream. */
      char name[32];               /* Stream name. */
      char
          uri[160]; /* Video stream URI (TCP or RTSP URI ground station should
                       connect to) or port number (UDP port ground station
                       should listen to). */
    } video_stream_information;

    /* Information about the status of a video stream. */
    struct {
      float framerate;  /* Frame rate */
      uint32_t bitrate; /* Bit rate */
      enum VIDEO_STREAM_STATUS_FLAGS
          flags;             /* (uint16_t) Bitmap of stream status flags */
      uint16_t resolution_h; /* Horizontal resolution */
      uint16_t resolution_v; /* Vertical resolution */
      uint16_t rotation;     /* Video image rotation clockwise */
      uint16_t hfov;         /* Horizontal Field of view */
      uint8_t stream_id; /* Video Stream ID (1 for first, 2 for second, etc.) */
    } video_stream_status;

    /* Configure AP SSID and Password. */
    struct {
      char ssid
          [32]; /* Name of Wi-Fi network (SSID). Leave it blank to leave it
                   unchanged. */
      char password[64]; /* Password. Leave it blank for an open AP. */
    } wifi_config_ap;

    /* Version and capability of protocol version. This message is the response
     * to REQUEST_PROTOCOL_VERSION and is used as part of the handshaking to
     * establish which MAVLink version should be used on the network. Every node
     * should respond to REQUEST_PROTOCOL_VERSION to enable the handshaking.
     * Library implementers should consider adding this into the default
     * decoding state machine to allow the protocol core to respond directly. */
    struct {
      uint16_t version; /* Currently active MAVLink version number * 100: v1.0
                           is 100, v2.0 is 200, etc. */
      uint16_t min_version; /* Minimum MAVLink version supported */
      uint16_t max_version; /* Maximum MAVLink version supported (set to the
                               same value as version by default) */
      uint8_t
          spec_version_hash[8]; /* The first 8 bytes (not characters printed in
                                   hex!) of the git hash. */
      uint8_t library_version_hash[8]; /* The first 8 bytes (not characters
                                          printed in hex!) of the git hash. */
    } protocol_version;

    /* General status information of an UAVCAN node. Please refer to the
     * definition of the UAVCAN message "uavcan.protocol.NodeStatus" for the
     * background information. The UAVCAN specification is available at
     * http://uavcan.org. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint32_t uptime_sec; /* Time since the start-up of the node. */
      uint16_t
          vendor_specific_status_code; /* Vendor-specific status information. */
      enum UAVCAN_NODE_HEALTH
          health; /* (uint8_t) Generalized node health status. */
      enum UAVCAN_NODE_MODE mode; /* (uint8_t) Generalized operating mode. */
      uint8_t sub_mode;           /* Not used currently. */
    } uavcan_node_status;

    /* General information describing a particular UAVCAN node. Please refer to
     * the definition of the UAVCAN service "uavcan.protocol.GetNodeInfo" for
     * the background information. This message should be emitted by the system
     * whenever a new node appears online, or an existing node reboots.
     * Additionally, it can be emitted upon request from the other end of the
     * MAVLink channel (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is also not
     * prohibited to emit this message unconditionally at a low frequency. The
     * UAVCAN specification is available at http://uavcan.org. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint32_t uptime_sec;    /* Time since the start-up of the node. */
      uint32_t sw_vcs_commit; /* Version control system (VCS) revision
                                 identifier (e.g. git short commit hash). Zero
                                 if unknown. */
      char name[80]; /* Node name string. For example, "sapog.px4.io". */
      uint8_t hw_version_major; /* Hardware major version number. */
      uint8_t hw_version_minor; /* Hardware minor version number. */
      uint8_t hw_unique_id[16]; /* Hardware unique 128-bit ID. */
      uint8_t sw_version_major; /* Software major version number. */
      uint8_t sw_version_minor; /* Software minor version number. */
    } uavcan_node_info;

    /* Request to read the value of a parameter with the either the param_id
     * string id or param_index. */
    struct {
      int16_t
          param_index; /* Parameter index. Set to -1 to use the Parameter ID
                          field as identifier (else param_id will be ignored) */
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      char
          param_id[16]; /* Parameter id, terminated by NULL if the length is
                           less than 16 human-readable chars and WITHOUT null
                           termination (NULL) byte if the length is exactly 16
                           chars - applications have to provide 16+1 bytes
                           storage if the ID is stored as string */
    } param_ext_request_read;

    /* Request all parameters of this component. After this request, all
     * parameters are emitted. */
    struct {
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
    } param_ext_request_list;

    /* Emit the value of a parameter. The inclusion of param_count and
     * param_index in the message allows the recipient to keep track of received
     * parameters and allows them to re-request missing parameters after a loss
     * or timeout. */
    struct {
      uint16_t param_count; /* Total number of parameters */
      uint16_t param_index; /* Index of this parameter */
      char
          param_id[16]; /* Parameter id, terminated by NULL if the length is
                           less than 16 human-readable chars and WITHOUT null
                           termination (NULL) byte if the length is exactly 16
                           chars - applications have to provide 16+1 bytes
                           storage if the ID is stored as string */
      char param_value[128];              /* Parameter value */
      enum MAV_PARAM_EXT_TYPE param_type; /* (uint8_t) Parameter type. */
    } param_ext_value;

    /* Set a parameter value. In order to deal with message loss (and
     * retransmission of PARAM_EXT_SET), when setting a parameter value and the
     * new value is the same as the current value, you will immediately get a
     * PARAM_ACK_ACCEPTED response. If the current state is
     * PARAM_ACK_IN_PROGRESS, you will accordingly receive a
     * PARAM_ACK_IN_PROGRESS in response. */
    struct {
      uint8_t target_system;    /* System ID */
      uint8_t target_component; /* Component ID */
      char
          param_id[16]; /* Parameter id, terminated by NULL if the length is
                           less than 16 human-readable chars and WITHOUT null
                           termination (NULL) byte if the length is exactly 16
                           chars - applications have to provide 16+1 bytes
                           storage if the ID is stored as string */
      char param_value[128];              /* Parameter value */
      enum MAV_PARAM_EXT_TYPE param_type; /* (uint8_t) Parameter type. */
    } param_ext_set;

    /* Response from a PARAM_EXT_SET message. */
    struct {
      char
          param_id[16]; /* Parameter id, terminated by NULL if the length is
                           less than 16 human-readable chars and WITHOUT null
                           termination (NULL) byte if the length is exactly 16
                           chars - applications have to provide 16+1 bytes
                           storage if the ID is stored as string */
      char param_value[128];              /* Parameter value (new value if
                                             PARAM_ACK_ACCEPTED, current value otherwise) */
      enum MAV_PARAM_EXT_TYPE param_type; /* (uint8_t) Parameter type. */
      enum PARAM_ACK param_result;        /* (uint8_t) Result code. */
    } param_ext_ack;

    /* Obstacle distances in front of the sensor, starting from the left in
     * increment degrees to the right */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint16_t
          distances[72]; /* Distance of obstacles around the UAV with index 0
                            corresponding to local forward + angle_offset. A
                            value of 0 means that the obstacle is right in front
                            of the sensor. A value of max_distance +1 means no
                            obstacle is present. A value of UINT16_MAX for
                            unknown/not used. In a array element, one unit
                            corresponds to 1cm. */
      uint16_t min_distance; /* Minimum distance the sensor can measure. */
      uint16_t max_distance; /* Maximum distance the sensor can measure. */
      enum MAV_DISTANCE_SENSOR
          sensor_type;   /* (uint8_t) Class id of the distance sensor type. */
      uint8_t increment; /* Angular width in degrees of each array element.
                            (Ignored if increment_f greater than 0). */
      float increment_f; /* EXTENSION Angular width in degrees of each array
                            element as a float. If greater than 0 then this
                            value is used instead of the uint8_t increment
                            field. */
      float
          angle_offset; /* EXTENSION Relative angle offset of the 0-index
                           element in the distances array. Value of 0
                           corresponds to forward. Positive values are offsets
                           to the right. */
    } obstacle_distance;

    /* Odometry message to communicate odometry information with an external
     * interface. Fits ROS REP 147 standard for aerial vehicles
     * (http://www.ros.org/reps/rep-0147.html). */
    struct {
      uint64_t
          time_usec;   /* Timestamp (UNIX Epoch time or time since system boot).
                          The receiving end can infer timestamp format
                          (since 1.1.1970 or since system boot) by checking for
                          the magnitude the number. */
      float x;         /* X Position */
      float y;         /* Y Position */
      float z;         /* Z Position */
      float q[4];      /* Quaternion components, w, x, y, z (1 0 0 0 is the
                          null-rotation) */
      float vx;        /* X linear speed */
      float vy;        /* Y linear speed */
      float vz;        /* Z linear speed */
      float rollspeed; /* Roll angular speed */
      float pitchspeed; /* Pitch angular speed */
      float yawspeed;   /* Yaw angular speed */
      float pose_covariance
          [21]; /* Row-major representation of a 6x6 pose cross-covariance
                   matrix upper right triangle (states: x, y, z, roll, pitch,
                   yaw; first six entries are the first ROW, next five entries
                   are the second ROW, etc.). If unknown, assign NaN value to
                   first element in the array. */
      float velocity_covariance
          [21]; /* Row-major representation of a 6x6 velocity cross-covariance
                   matrix upper right triangle (states: vx, vy, vz, rollspeed,
                   pitchspeed, yawspeed; first six entries are the first ROW,
                   next five entries are the second ROW, etc.). If unknown,
                   assign NaN value to first element in the array. */
      enum MAV_FRAME frame_id; /* (uint8_t) Coordinate frame of reference for
                                  the pose data. */
      enum MAV_FRAME
          child_frame_id; /* (uint8_t) Coordinate frame of reference for the
                             velocity in free space (twist) data. */
      uint8_t
          reset_counter; /* EXTENSION Estimate reset counter. This should be
                            incremented when the estimate resets in any of the
                            dimensions (position, velocity, attitude, angular
                            speed). This is designed to be used when e.g an
                            external SLAM system detects a loop-closure and the
                            estimate jumps. */
    } odometry;

    /* Describe a trajectory using an array of up-to 5 waypoints in the local
     * frame. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float
          pos_x[5]; /* X-coordinate of waypoint, set to NaN if not being used */
      float
          pos_y[5]; /* Y-coordinate of waypoint, set to NaN if not being used */
      float
          pos_z[5]; /* Z-coordinate of waypoint, set to NaN if not being used */
      float vel_x[5]; /* X-velocity of waypoint, set to NaN if not being used */
      float vel_y[5]; /* Y-velocity of waypoint, set to NaN if not being used */
      float vel_z[5]; /* Z-velocity of waypoint, set to NaN if not being used */
      float acc_x[5]; /* X-acceleration of waypoint, set to NaN if not being
                         used */
      float acc_y[5]; /* Y-acceleration of waypoint, set to NaN if not being
                         used */
      float acc_z[5]; /* Z-acceleration of waypoint, set to NaN if not being
                         used */
      float pos_yaw[5];     /* Yaw angle, set to NaN if not being used */
      float vel_yaw[5];     /* Yaw rate, set to NaN if not being used */
      uint8_t valid_points; /* Number of valid points (up-to 5 waypoints are
                               possible) */
    } trajectory_representation_waypoints;

    /* Describe a trajectory using an array of up-to 5 bezier points in the
     * local frame. */
    struct {
      uint64_t
          time_usec;  /* Timestamp (UNIX Epoch time or time since system boot).
                         The receiving end can infer timestamp format
                         (since 1.1.1970 or since system boot) by checking for
                         the magnitude the number. */
      float pos_x[5]; /* X-coordinate of starting bezier point, set to NaN if
                         not being used */
      float pos_y[5]; /* Y-coordinate of starting bezier point, set to NaN if
                         not being used */
      float pos_z[5]; /* Z-coordinate of starting bezier point, set to NaN if
                         not being used */
      float delta[5]; /* Bezier time horizon, set to NaN if
                         velocity/acceleration should not be incorporated */
      float pos_yaw[5];     /* Yaw, set to NaN for unchanged */
      uint8_t valid_points; /* Number of valid points (up-to 5 waypoints are
                               possible) */
    } trajectory_representation_bezier;

    /* Report current used cellular network status */
    struct {
      uint32_t cid; /* Cell ID. If unknown, set to: UINT32_MAX */
      enum CELLULAR_NETWORK_STATUS_FLAG status; /* (uint16_t) Status bitmap */
      uint16_t mcc; /* Mobile country code. If unknown, set to: UINT16_MAX */
      uint16_t mnc; /* Mobile network code. If unknown, set to: UINT16_MAX */
      uint16_t lac; /* Location area code. If unknown, set to: 0 */
      enum CELLULAR_NETWORK_RADIO_TYPE
          type; /* (uint8_t) Cellular network radio type: gsm, cdma, lte... */
      uint8_t quality; /* Cellular network RSSI/RSRP in dBm, absolute value */
    } cellular_status;

    /* Status of the Iridium SBD link. */
    struct {
      uint64_t
          timestamp; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint64_t
          last_heartbeat; /* Timestamp of the last successful sbd session. The
                             receiving end can infer timestamp format
                             (since 1.1.1970 or since system boot) by checking
                             for the magnitude the number. */
      uint16_t failed_sessions;     /* Number of failed SBD sessions. */
      uint16_t successful_sessions; /* Number of successful SBD sessions. */
      uint8_t
          signal_quality;   /* Signal quality equal to the number of bars
                               displayed on the ISU signal strength indicator.
                               Range is 0 to 5, where 0 indicates no signal and 5
                               indicates maximum signal strength. */
      uint8_t ring_pending; /* 1: Ring call pending, 0: No call pending. */
      uint8_t tx_session_pending; /* 1: Transmission session pending, 0: No
                                     transmission session pending. */
      uint8_t rx_session_pending; /* 1: Receiving session pending, 0: No
                                     receiving session pending. */
    } isbd_link_status;

    /* The global position resulting from GPS and sensor fusion. */
    struct {
      uint64_t time; /* Time of applicability of position (microseconds since
                        UNIX epoch). */
      int32_t lat;   /* Latitude (WGS84) */
      int32_t lon;   /* Longitude (WGS84) */
      int32_t alt;   /* Altitude (WGS84) */
      int32_t relative_alt; /* Altitude above ground */
      int32_t next_lat;     /* Next waypoint, latitude (WGS84) */
      int32_t next_lon;     /* Next waypoint, longitude (WGS84) */
      int32_t next_alt;     /* Next waypoint, altitude (WGS84) */
      int16_t vx;           /* Ground X speed (latitude, positive north) */
      int16_t vy;           /* Ground Y speed (longitude, positive east) */
      int16_t vz;           /* Ground Z speed (altitude, positive down) */
      uint16_t h_acc; /* Horizontal position uncertainty (standard deviation) */
      uint16_t v_acc; /* Altitude uncertainty (standard deviation) */
      uint16_t vel_acc;     /* Speed uncertainty (standard deviation) */
      uint16_t update_rate; /* Time until next update. Set to 0 if unknown or in
                               data driven mode. */
      uint8_t uas_id[18];   /* Unique UAS ID. */
      enum UTM_FLIGHT_STATE flight_state; /* (uint8_t) Flight state */
      enum UTM_DATA_AVAIL_FLAGS flags;    /* (uint8_t) Bitwise OR combination of
                                             the data available flags. */
    } utm_global_position;

    /* Large debug/prototyping array. The message uses the maximum available
     * payload for data. The array_id and name fields are used to discriminate
     * between messages in code and in user interfaces (respectively). Do not
     * use in production code. */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      uint16_t array_id; /* Unique ID used to discriminate between arrays */
      char name[10];     /* Name, for human-friendly display in a Ground Control
                            Station */
      float data[58];    /* EXTENSION data */
    } debug_float_array;

    /* Vehicle status report that is sent out while orbit execution is in
     * progress (see MAV_CMD_DO_ORBIT). */
    struct {
      uint64_t
          time_usec; /* Timestamp (UNIX Epoch time or time since system boot).
                        The receiving end can infer timestamp format
                        (since 1.1.1970 or since system boot) by checking for
                        the magnitude the number. */
      float radius;  /* Radius of the orbit circle. Positive values orbit
                        clockwise, negative values orbit counter-clockwise. */
      int32_t x; /* X coordinate of center point. Coordinate system depends on
                    frame field: local = x position in meters * 1e4, global =
                    latitude in degrees * 1e7. */
      int32_t
          y;   /* Y coordinate of center point.  Coordinate system depends on
                  frame field: local = x position in meters * 1e4, global =
                  latitude in degrees * 1e7. */
      float z; /* Altitude of center point. Coordinate system depends on frame
                  field. */
      enum MAV_FRAME
          frame; /* (uint8_t) The coordinate system of the fields: x, y, z. */
    } orbit_execution_status;

    /* Status text message (use only for important status and error messages).
     * The full message payload can be used for status text, but we recommend
     * that updates be kept concise. Note: The message is intended as a less
     * restrictive replacement for STATUSTEXT. */
    struct {
      enum MAV_SEVERITY
          severity;   /* (uint8_t) Severity of status. Relies on the definitions
                         within RFC-5424. */
      char text[254]; /* Status text message, without null termination
                         character. */
    } statustext_long;

    /* Smart Battery information (static/infrequent update). Use for updates
     * from: smart battery to flight stack, flight stack to GCS. Use instead of
     * BATTERY_STATUS for smart batteries. */
    struct {
      int32_t capacity_full_specification; /* Capacity when full according to
                                              manufacturer, -1: field not
                                              provided. */
      int32_t capacity_full; /* Capacity when full (accounting for battery
                                degradation), -1: field not provided. */
      int32_t serial_number; /* Serial number. -1: field not provided. */
      uint16_t cycle_count;  /* Charge/discharge cycle count. -1: field not
                                provided. */
      uint16_t weight;       /* Battery weight. 0: field not provided. */
      uint16_t
          discharge_minimum_voltage;     /* Minimum per-cell voltage when
                                            discharging. If not supplied set to
                                            UINT16_MAX value. */
      uint16_t charging_minimum_voltage; /* Minimum per-cell voltage when
                                            charging. If not supplied set to
                                            UINT16_MAX value. */
      uint16_t resting_minimum_voltage;  /* Minimum per-cell voltage when
                                            resting. If not supplied set to
                                            UINT16_MAX value. */
      uint8_t id;                        /* Battery ID */
      char device_name[50]; /* Static device name. Encode as manufacturer and
                               product names separated using an underscore. */
    } smart_battery_info;

    /* Smart Battery information (dynamic). Use for updates from: smart battery
     * to flight stack, flight stack to GCS. Use instead of BATTERY_STATUS for
     * smart batteries. */
    struct {
      enum MAV_SMART_BATTERY_FAULT
          fault_bitmask; /* (int32_t) Fault/health indications. */
      int32_t
          time_remaining; /* Estimated remaining battery time. -1: field not
                             provided. */
      uint16_t id;        /* Battery ID */
      int16_t capacity_remaining; /* Remaining battery energy. Values: [0-100],
                                     -1: field not provided. */
      int16_t
          current; /* Battery current (through all cells/loads). Positive if
                      discharging, negative if charging. UINT16_MAX: field not
                      provided. */
      int16_t temperature;  /* Battery temperature. -1: field not provided. */
      uint16_t cell_offset; /* The cell number of the first index in the
                               'voltages' array field. Using this field allows
                               you to specify cell voltages for batteries with
                               more than 16 cells. */
      uint16_t voltages
          [16]; /* Individual cell voltages. Batteries with more 16 cells can
                   use the cell_offset field to specify the cell offset for the
                   array specified in the current message . Index values above
                   the valid cell count for this battery should have the
                   UINT16_MAX value. */
    } smart_battery_status;

    /* The raw values of the actuator outputs. */
    struct {
      uint64_t time_usec; /* Timestamp (since system boot). */
      uint32_t active;    /* Active outputs */
      float actuator[32]; /* Servo / motor output array values. Zero values
                             indicate unused channels. */
    } actuator_output_status;

    /* Time/duration estimates for various events and actions given the current
     * vehicle state and position. */
    struct {
      int32_t
          safe_return; /* Estimated time to complete the vehicle's configured
                          "safe return" action from its current position (e.g.
                          RTL, Smart RTL, etc.). -1 indicates that the vehicle
                          is landed, or that no time estimate available. */
      int32_t
          land; /* Estimated time for vehicle to complete the LAND action from
                   its current position. -1 indicates that the vehicle is
                   landed, or that no time estimate available. */
      int32_t mission_next_item; /* Estimated time for reaching/completing the
                                    currently active mission item. -1 means no
                                    time estimate available. */
      int32_t mission_end; /* Estimated time for completing the current mission.
                              -1 means no mission active and/or no estimate
                              available. */
      int32_t
          commanded_action; /* Estimated time for completing the current
                               commanded action (i.e. Go To, Takeoff, Land,
                               etc.). -1 means no action active and/or no
                               estimate available. */
    } time_estimate_to_target;

    /* Cumulative distance traveled for each reported wheel. */
    struct {
      uint64_t
          time_usec; /* Timestamp (synced to UNIX time or since system boot). */
      double distance[16]; /* Distance reported by individual wheel encoders.
                              Forward rotations increase values, reverse
                              rotations decrease them. Not all wheels will
                              necessarily have wheel encoders; the mapping of
                              encoders to wheel positions must be
                              agreed/understood by the endpoints. */
      uint8_t count;       /* Number of wheels reported. */
    } wheel_distance;
  };
};

/* Sign[ed] sets/checks the signature field of message based on the shared
 * secret. Signed returns non-zero (true) iff the signature is zero (V1 or
 * unsigned V2) or correct (signed V2), zero (false) for a non-zero signature
 * field that does not match the shared secret (signed V2 only).
 *
 * implemented in ualberta_sign.c
 */
void ualberta_message_sign(struct ualberta_message *msg, uint8_t shared[32]);
int ualberta_message_signed(struct ualberta_message *msg, uint8_t shared[32]);

/* Serialize_v1 and _v2 write the message to buf in mavlink V1/V2 frame
 * encoding. These functions takes care not to write more than size bytes, and
 * return the number of bytes needed, even if that exceeds size. On succesful
 * encoding, the sequence number is updated, so the same structure can be
 * re-used easily for sending a stream of messages. If the message can not be
 * encoded for whatever reason (e.g. msg id > 255), the return value is 0.
 *
 * implemented in ualberta_enc.c
 */
size_t ualberta_message_serialize_v1(struct ualberta_message *msg, uint8_t *buf,
                                     size_t size);
size_t ualberta_message_serialize_v2(struct ualberta_message *msg, uint8_t *buf,
                                     size_t size);

/* Seek returns the number of bytes to skip to the start of a frame, or when buf
 * starts with a frame STX, it returns 0. If seek can not find the start of a
 * frame it returns size.
 *
 * implemented in ualberta_dec.c
 */
size_t ualberta_message_seek(const uint8_t *buf, size_t size);

/* Deserialize reads up to min(size, 280) bytes from buf and decodes a V1, V2
 * signed or unsigned message. if buf is too small, i.e. does not contain a
 * complete frame, or does not start with a valid STX, it returns zero, but msg
 * may have been modified with the partially decoded message.  It will not
 * increment seqnr/dropped in this case. If the frame is corrupt, its crc field
 * will be non zero.  This is the only integrity check if the message is not
 * _signed(); In case of a corrupt package, the advised way to proceed is to
 * call _seek on (++buf,--size) to find the next possible packet start. If the
 * message id is unknown by this library the payload will be ignored, but all
 * header fields will be set accordingly.
 *
 * implemented in ualberta_dec.c
 */
size_t ualberta_message_deserialize(const uint8_t *buf, size_t size,
                                    struct ualberta_message *msg);

/* _snprintf appends a debug representation of the message to a buffer
 * implemented in ualberta_fmt.c
 */
size_t ualberta_message_snprintf(char *buf, size_t size,
                                 const struct ualberta_message *msg);
