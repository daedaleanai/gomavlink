{{$pkg := lower .Name -}}
// Generated enums and structures for Mavlink dialect {{$pkg}} #{{.Dialect}} version {{.Version}}
// Generated by gomavlink, DO NOT EDIT.
#include <stdarg.h>
#include <stdio.h>

#include "{{$pkg}}.h"

static inline size_t psnprintf(char** pbuf, size_t* psize, const char* fmt, ...) {
	va_list ap;
	va_start(ap, fmt);
	size_t s = vsnprintf(*pbuf, *psize, fmt, ap);
	if (s < *psize) {
		*pbuf  +=s; 
		*psize -=s;
	} else {
		*psize = 0;
	}
	return s;
}


{{range .Enums}}
{{- $tpe := .Name}}
static const char* {{$tpe}}_str(enum {{$tpe}} val) {
	switch (val) {
{{- range .Entries -}}
	case {{upper .Name}}: return "{{.Name}}";
{{- end}}
	}
	return NULL;
};

static size_t psnprint_{{$tpe}}(char**p, size_t* sz, enum {{$tpe}} val) {
	const char* s = {{$tpe}}_str(val);
	if (s) {
		return psnprintf(p, sz, "%s", s);
	}
	return psnprintf(p, sz, "{{$tpe}}<%d>", (int)val);
}
{{end}}


size_t {{$pkg}}_message_snprintf(char* buf, size_t size, const struct {{$pkg}}_message *msg) {
	size_t r = 0;
	switch (msg->msg_id) {
{{range .Messages}}
	case {{upper $pkg}}_MESSAGE_{{upper .Name}}:
			{{$str := lower .Name}}
			r += psnprintf(&buf, &size, "{{.Name}}<");
	{{range .Fields}}
			r += psnprintf(&buf, &size, " {{.Name}}:");
			// TODO values: handle strings, arrays and enums 
	{{- end}}
			r += psnprintf(&buf, &size, " >");
		break;
{{end}}
	};

	return r;
}

